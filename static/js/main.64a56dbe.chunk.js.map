{"version":3,"sources":["components/CenterLayout.tsx","components/CssThemeVariables.tsx","components/List.tsx","store/Airgram.ts","utils/HandlersBuilder.ts","store/AuthorizationStore.ts","store/ChatsStore.ts","store/ConnectionStore.ts","store/ThemeStore.ts","store/RootStore.ts","components/StoreProvider.tsx","utils/convertBlob.ts","store/FileStore.ts","components/Sticker.tsx","components/Toolbar.tsx","components/UserCard.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","components/MobileBackButton.tsx","store/ChatStore.ts","store/StickerMessagesStore.ts","app/Conversation/Loader.tsx","store/UserStore.ts","store/MessageSenderStore.ts","app/Conversation/Message.tsx","app/Conversation/Conversation.tsx","app/Menu/User.tsx","app/Menu/ChatRow.tsx","app/Menu/Chats.tsx","app/Menu/Menu.tsx","store/StickerSetStore.ts","app/Set/Set.tsx","store/StickersStore.ts","app/Stickers/InlineSet.tsx","app/Stickers/Stickers.tsx","app/Root.tsx","app/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx","components/Sticker.module.css","app/Menu/ChatRow.module.css","components/CenterLayout.module.css","app/Conversation/Message.module.css","app/Root.module.css","app/Stickers/InlineSet.module.css","components/List.module.css","components/UserCard.module.css","app/SignIn/QrCode.module.css","app/Conversation/Conversation.module.css","app/Menu/User.module.css","app/Menu/Chats.module.css","app/Set/Set.module.css","app/Stickers/Stickers.module.css"],"names":["CenterLayout","className","disablePadding","other","cx","styles","root","padding","document","documentElement","CssThemeVariables","theme","useTheme","useEffect","palette","Object","entries","key","value","style","setProperty","renderThumb","props","thumb","virtialContainerStyle","totalSize","horizontal","height","width","position","virtualSizeStyles","size","start","top","left","ListComponent","ref","component","Component","children","refSetter","useCallback","scrollbarsRef","current","view","renderView","renderThumbHorizontal","renderThumbVertical","List","forwardRef","options","useTestDc","readOnly","instanceName","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","useDatabase","useFileDatabase","useChatInfoDatabase","useMessageDatabase","useSecretChats","AirgramFactory","a","this","api","destroy","newInstance","Airgram","HandlersBuilder","handlers","args","push","ctx","next","filter","_","length","Composer","compose","map","AuthorizationStore","rootStore","state","undefined","firstLaunch","user","add","UPDATE","updateAuthorizationState","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","setState","build","makeAutoObservable","observable","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","result","response","reset","resetAirgram","logOut","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","getMe","ChatsStore","chats","Map","updateNewChat","setChat","chat","id","info","updateChatPosition","chatId","updateChatLastMessage","lastMessage","positions","find","x","list","shallow","updater","get","set","loadChats","chatList","limit","Array","from","values","sort","b","BigInt","order","isPinned","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","middleware","updateConnectionState","context","STORAGE_KEY","initColor","window","matchMedia","matches","savedColor","localStorage","getItem","ThemeStore","currentTheme","setItem","newTheme","setTheme","airgramFactory","RootStore","events","EventEmitter","emit","console","log","listeners","eventName","Theme","Authorization","Connection","Chats","makeAsync","use","store","StoreContext","createContext","StoreProvider","Provider","blobToLotty","blob","arrayBuffer","buffer","data","Uint8Array","output","pako","inflate","Blob","text","json","JSON","parse","blobToJson","Response","type","blobToText","blobToBase64","reader","FileReader","readAsDataURL","Promise","resolve","reject","onloadend","onerror","error","cache","FileStore","file","format","params","isLoading","content","updateFile","load","addListener","removeListener","setLoading","fileId","cachedValue","setContent","downloadFile","priority","readFilePart","useFileStore","useState","dispose","setFile","observer","sticker","isAnimated","spinner","scale","intervalCheck","scrollCheck","isVisible","loop","renderer","animationData","alt","src","Toolbar","Container","wrap","alignItems","UserCard","card","PhoneNumber","useContext","lock","setLock","useForm","errors","formState","register","handleSubmit","setError","onSubmit","sendPhoneNumber","message","direction","alignContent","h3","margin","autoFocus","disabled","required","htmlType","ghost","onClick","control","useController","defaultValue","name","rules","field","onChange","fieldState","sendCode","handleChange","event","target","codeInfo","label","sendPassword","Password","placeholder","passwordHint","codeArea","link","includeMargin","renderAs","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","MobileBackButton","history","useHistory","goBack","ChatStore","has","getChat","StickerMessagesStore","chatStore","isRestored","startMessage","canLoad","messages","messageIds","stickerIds","processed","total","batch","updateNewMessage","setId","addMessage","save","assign","unshift","setLoadingProgress","getChatHistory","fromMessageId","totalCount","stickerMessages","reduce","acc","insertMessage","span","UserStore","userId","updateUser","getUser","setUser","MessageSenderStore","senderId","userStore","sender","useMessageSenderStore","senderPhoto","profilePhoto","small","photo","firstName","lastName","title","Date","date","toLocaleString","container","to","PLACEHOLDER_HEIGHT","scrollTop","match","parentRef","useRef","estimateSize","index","useVirtual","virtualItems","scrollToOffset","scrollView","count","offset","init","loaded","tryLoadMessages","handleScroll","justify","xs","onScroll","realIndex","gap","username","auto","iconRight","ChatRow","activeClassName","memo","itemData","chatsList","rowVirtualizer","transform","StickerSetStore","runInAction","getStickerSet","useLocalObservable","stickers","sm","md","lg","xl","StickersStore","sets","getInstalledStickerSets","setStickers","setInfo","routes","path","Menu","Stickers","render","toRoute","route","Root","isMobile","useMediaQuery","menu","panel","Footer","isDarktTheme","w","toggleTheme","flex","underline","href","rel","color","themeType","Content","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.64a56dbe.chunk.js","sourcesContent":["import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nexport const CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n","import { useTheme } from \"@geist-ui/react\";\r\nimport { useEffect, FC } from \"react\";\r\n\r\nconst root = document.documentElement;\r\n\r\nexport const CssThemeVariables: FC = () => {\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        const { palette } = theme;\r\n\r\n        for (const [key, value] of Object.entries(palette)) {\r\n            root.style.setProperty(\"--palette-\" + key, value);\r\n        }\r\n    }, [theme]);\r\n\r\n    return null;\r\n};\r\n","import cx from \"classnames\";\r\nimport { ComponentProps, CSSProperties, ElementType, FC, forwardRef, HTMLProps, Ref, useCallback } from \"react\";\r\nimport Scrollbars, { ScrollbarProps } from \"react-custom-scrollbars-2\";\r\nimport styles from \"./List.module.css\";\r\n\r\nconst renderThumb: FC<HTMLProps<HTMLDivElement>> = ({ className, ...props }) => {\r\n    return <div className={cx(className, styles.thumb)} {...props} />;\r\n};\r\n\r\nexport const virtialContainerStyle = (totalSize: number, horizontal = false): CSSProperties => ({\r\n    //minHeight: \"100%\",\r\n    height: horizontal ? \"100%\" : totalSize,\r\n    width: horizontal ? totalSize : \"100%\",\r\n    position: \"relative\",\r\n});\r\n\r\nexport const virtualSizeStyles = (size: number, start: number, horizontal = false): CSSProperties => ({\r\n    position: \"absolute\",\r\n    top: horizontal ? 0 : start,\r\n    left: horizontal ? start : 0,\r\n    height: horizontal ? \"100%\" : size,\r\n    width: horizontal ? size : \"100%\",\r\n    //transform: `translateY(${start}px)`,\r\n});\r\n\r\ntype Props<TComponent extends ElementType> = ComponentProps<TComponent> &\r\n    ScrollbarProps & {\r\n        component?: TComponent;\r\n    };\r\n\r\nconst ListComponent = <TComponent extends ElementType = \"div\">(\r\n    { component: Component = \"div\", children, ...other }: Props<TComponent>,\r\n    ref: Ref<HTMLDivElement>\r\n) => {\r\n    const refSetter = useCallback((scrollbarsRef: any) => {\r\n        if (scrollbarsRef && ref && typeof ref === \"object\") {\r\n            (ref.current as any) = scrollbarsRef.view;\r\n        } else if (scrollbarsRef && typeof ref === \"function\") {\r\n            ref?.(scrollbarsRef.view);\r\n        } else if (typeof ref === \"function\") {\r\n            ref?.(null);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const renderView = useCallback(\r\n        (props) => {\r\n            return <Component {...props} />;\r\n        },\r\n        [Component]\r\n    );\r\n\r\n    return (\r\n        <Scrollbars\r\n            ref={refSetter}\r\n            renderView={renderView}\r\n            renderThumbHorizontal={renderThumb}\r\n            renderThumbVertical={renderThumb}\r\n            {...other}\r\n        >\r\n            {children}\r\n        </Scrollbars>\r\n    );\r\n};\r\n\r\nexport const List = forwardRef(ListComponent);\r\n","import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst useTestDc = false;\r\n\r\nconst options: AirgramConfig = {\r\n    useTestDc,\r\n    readOnly: false,\r\n    instanceName: useTestDc ? \"tdlib_test\" : \"tdlib\",\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"info\",\r\n    logVerbosityLevel: 1,\r\n    useDatabase: true,\r\n    useFileDatabase: true,\r\n    useChatInfoDatabase: true,\r\n    useMessageDatabase: true,\r\n    useSecretChats: false,\r\n};\r\n\r\nexport class AirgramFactory {\r\n    current?: Airgram;\r\n\r\n    async makeAsync() {\r\n        if (this.current) {\r\n            await this.current.api.destroy();\r\n        }\r\n\r\n        const newInstance = new Airgram(options);\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this.current = newInstance;\r\n\r\n        return newInstance;\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { UpdateContext, UpdateUnion, ApiMethods, MiddlewareFn, Composer } from \"@airgram/core\";\r\n\r\ntype UpdateName = `${UPDATE}`;\r\n\r\ntype UpdateLookup = {\r\n    [P in UpdateName]: Extract<UpdateUnion, { _: P }>;\r\n};\r\n\r\ntype MethodName = {\r\n    [K in keyof ApiMethods]: K;\r\n}[keyof ApiMethods];\r\n\r\ntype MethodsLookup = {\r\n    [P in MethodName]: ReturnType<ApiMethods[P]> extends Promise<infer PT> ? PT : never;\r\n};\r\n\r\ntype ActionName = UpdateName | MethodName;\r\n\r\ntype PickContext<TAction extends string> = TAction extends UPDATE\r\n    ? UpdateContext<UpdateLookup[TAction]>\r\n    : TAction extends MethodName\r\n    ? MethodsLookup[TAction]\r\n    : never;\r\n\r\ntype Handler<TAction extends ActionName> = MiddlewareFn<PickContext<TAction>>;\r\n\r\ntype HandlerRecord<TAction extends ActionName> = [action: TAction, handler: Handler<TAction>];\r\n\r\nexport default class HandlersBuilder {\r\n    private handlers: Array<HandlerRecord<any>> = [];\r\n    add<TAction extends ActionName>(...args: HandlerRecord<TAction>) {\r\n        this.handlers.push(args);\r\n        return this;\r\n    }\r\n\r\n    build(): MiddlewareFn {\r\n        return (ctx, next) => {\r\n            const handlers = this.handlers.filter(([update]) => update === ctx._) ?? [];\r\n\r\n            if (handlers.length) {\r\n                return Composer.compose(handlers.map(([, handler]) => handler))(ctx, next);\r\n            }\r\n\r\n            return next();\r\n        };\r\n    }\r\n}\r\n","import { AUTHORIZATION_STATE, UPDATE } from \"@airgram/constants\";\r\nimport { AuthorizationStateUnion, User } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    setState(state: AuthorizationStateUnion) {\r\n        this.state = state;\r\n    }\r\n    firstLaunch = true;\r\n    user?: User;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            user: observable.ref,\r\n            handlers: false,\r\n        });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateAuthorizationState, (ctx) => {\r\n            const state = ctx.update.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            this.setState(state);\r\n        })\r\n        .build();\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    async logOut() {\r\n        await this.rootStore.Airgram.api.logOut();\r\n        this.firstLaunch = true;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n\r\n    async getMe() {\r\n        if (this.user) {\r\n            return;\r\n        }\r\n\r\n        const user = await this.rootStore.Airgram.api.getMe();\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        this.user = user.response as User;\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat as AirgramChat, ChatPosition, Message } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport interface Chat {\r\n    info?: AirgramChat;\r\n    position?: ChatPosition;\r\n    lastMessage?: Message;\r\n}\r\n\r\nexport default class ChatsStore {\r\n    chats = new Map<number, Chat>();\r\n    setChat(chatId: number, updater: (chat: Chat) => Chat | void) {\r\n        let chat = this.chats.get(chatId);\r\n        if (!chat) {\r\n            chat = {};\r\n        }\r\n\r\n        chat = updater(chat!) ?? chat;\r\n        this.chats.set(chatId, chat!);\r\n    }\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, { chats: observable.shallow, handlers: false });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            this.setChat(ctx.update.chat.id, (chat) => {\r\n                chat.info = ctx.update.chat;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatPosition, (ctx, next) => {\r\n            this.setChat(ctx.update.chatId, (chat) => {\r\n                chat.position = ctx.update.position;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatLastMessage, (ctx, next) => {\r\n            this.setChat(ctx.update.chatId, (chat) => {\r\n                chat.lastMessage = ctx.update.lastMessage;\r\n            });\r\n\r\n            const position = ctx.update.positions.find((x) => x.list._ === \"chatListMain\");\r\n\r\n            if (position) {\r\n                this.setChat(ctx.update.chatId, (chat) => {\r\n                    chat.position = position;\r\n                });\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        await this.rootStore.Airgram.api.loadChats({\r\n            chatList: { _: \"chatListMain\" },\r\n            limit: 10,\r\n        });\r\n    }\r\n\r\n    get chatsList() {\r\n        return Array.from(this.chats.values())\r\n            .sort((a, b) => (BigInt(a.position?.order ?? 0) < BigInt(b.position?.order ?? 0) ? 0 : -1))\r\n            .sort((a, b) => {\r\n                const x = a.position?.isPinned;\r\n                const y = b.position?.isPinned;\r\n                return x === y ? 0 : x ? -1 : 1;\r\n            });\r\n    }\r\n}\r\n","import { CONNECTION_STATE, UPDATE } from \"@airgram/constants\";\r\nimport { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n    setState(state: CONNECTION_STATE) {\r\n        this.state = state;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n\r\n            this.setState(state);\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nconst STORAGE_KEY = \"theme\";\r\n\r\ntype ThemeVariants = \"dark\" | \"light\";\r\n\r\nlet initColor: ThemeVariants = \"light\";\r\n\r\nif (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    initColor = \"dark\";\r\n}\r\n\r\nconst savedColor = localStorage.getItem(STORAGE_KEY);\r\n\r\nif (savedColor) {\r\n    initColor = savedColor as ThemeVariants;\r\n}\r\n\r\nexport default class ThemeStore {\r\n    currentTheme = initColor;\r\n    setTheme(theme: ThemeVariants) {\r\n        this.currentTheme = theme;\r\n        localStorage.setItem(STORAGE_KEY, theme);\r\n    }\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const newTheme = this.currentTheme === \"dark\" ? \"light\" : \"dark\";\r\n        this.setTheme(newTheme);\r\n    }\r\n}\r\n","import { Airgram, Composer, MiddlewareFn } from \"@airgram/web\";\r\nimport { EventEmitter } from \"events\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { AirgramFactory } from \"./Airgram\";\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ChatsStore from \"./ChatsStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\nimport ThemeStore from \"./ThemeStore\";\r\n\r\nexport type EventPayload = Parameters<MiddlewareFn>;\r\n\r\nconst airgramFactory = new AirgramFactory();\r\n\r\nexport default class RootStore {\r\n    static eventName = \"action\";\r\n    events = new EventEmitter();\r\n    private emit: MiddlewareFn = (ctx, next) => {\r\n        console.log(ctx);\r\n        const listeners = (this.events.listeners(RootStore.eventName) ?? []) as MiddlewareFn[];\r\n        return Composer.compose(listeners)(ctx, next);\r\n    };\r\n\r\n    Theme = new ThemeStore();\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    Chats = new ChatsStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { events: false, Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await airgramFactory.makeAsync();\r\n        this.Airgram.use(this.Authorization.handlers, this.Connection, this.Chats.handlers, this.emit);\r\n    }\r\n}\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const StoreProvider: FC = ({ children }) => (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n);\r\n","import pako from \"pako\";\r\n\r\nexport async function blobToLotty(blob: Blob) {\r\n    const buffer = await blob.arrayBuffer();\r\n    const data = new Uint8Array(buffer);\r\n    const output = pako.inflate(data);\r\n    var json = await new Blob([output]).text();\r\n\r\n    return JSON.parse(json);\r\n}\r\n\r\nexport function blobToJson(blob: Blob) {\r\n    return new Response(new Blob([blob], { type: \"application/json\" })).text();\r\n}\r\n\r\nexport function blobToText(blob: Blob) {\r\n    return new Response(blob).text();\r\n}\r\n\r\nexport function blobToBase64(blob: Blob) {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    return new Promise<string>((resolve, reject) => {\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string);\r\n        };\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { DownloadFileParams, File } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components/StoreProvider\";\r\nimport { blobToBase64, blobToJson, blobToLotty, blobToText } from \"../utils\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<number, any>();\r\n\r\ntype FileFormats = \"blob\" | \"base64\" | \"text\" | \"json\" | \"lotty\";\r\n\r\ntype FileFormat<TFormat extends FileFormats> = TFormat extends \"blob\"\r\n    ? Blob\r\n    : TFormat extends \"base64\" | \"text\"\r\n    ? string\r\n    : TFormat extends \"json\" | \"lotty\"\r\n    ? object\r\n    : never;\r\n\r\ntype DownloadParams = Omit<DownloadFileParams, \"fileId\">;\r\n\r\nexport default class FileStore<TFormat extends FileFormats> {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    private format?: FileFormats = undefined;\r\n    private file?: File = undefined;\r\n    content?: FileFormat<TFormat> = undefined;\r\n    setContent(content: any) {\r\n        this.content = content;\r\n    }\r\n    private params?: DownloadParams = undefined;\r\n    constructor(private rootStore: RootStore, file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        makeAutoObservable(this, { content: observable.ref, handlers: false });\r\n        this.file = file;\r\n        this.format = format;\r\n        this.params = params;\r\n        this.load();\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateFile, (ctx, next) => {\r\n            if (ctx.update.file.id === this.file?.id) {\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    setFile(file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        this.file = file;\r\n\r\n        if (this.format !== format) {\r\n            this.content = undefined;\r\n            this.format = format;\r\n        }\r\n\r\n        this.params = params;\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.file || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        if (this.content) {\r\n            return this.content;\r\n        }\r\n\r\n        try {\r\n            this.setLoading(true);\r\n\r\n            const fileId = this.file.id;\r\n\r\n            const cachedValue = cache.get(fileId);\r\n            if (cachedValue) {\r\n                this.setContent(cachedValue);\r\n                return cachedValue;\r\n            }\r\n\r\n            const download = await this.rootStore.Airgram.api.downloadFile({ fileId, priority: 1, ...this.params });\r\n\r\n            if (download.response._ === \"error\") {\r\n                return;\r\n            }\r\n\r\n            const file = await this.rootStore.Airgram.api.readFilePart({ fileId });\r\n\r\n            if (file.response._ === \"error\") {\r\n                return;\r\n            }\r\n\r\n            const blob = file.response.data as unknown as Blob;\r\n\r\n            let content: any = null;\r\n            if (this.format === \"blob\") {\r\n                content = blob;\r\n            }\r\n\r\n            if (this.format === \"base64\") {\r\n                content = await blobToBase64(blob);\r\n            }\r\n\r\n            if (this.format === \"text\") {\r\n                content = await blobToText(blob);\r\n            }\r\n\r\n            if (this.format === \"json\") {\r\n                content = await blobToJson(blob);\r\n            }\r\n\r\n            if (this.format === \"lotty\") {\r\n                content = await blobToLotty(blob);\r\n            }\r\n\r\n            cache.set(fileId, content);\r\n            this.setContent(content);\r\n\r\n            return content;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function useFileStore<TResult extends FileFormats>(\r\n    file?: File,\r\n    format?: TResult,\r\n    params?: DownloadParams\r\n): FileFormat<TResult> | undefined {\r\n    const [store] = useState(() => new FileStore<TResult>(rootStore, file, format, params));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        store.setFile(file, format, params);\r\n    }, [file, format, params, store]);\r\n\r\n    return store.content;\r\n}\r\n","import { Sticker as AirgramSticker } from \"@airgram/core\";\r\nimport { Spinner } from \"@geist-ui/react\";\r\nimport Lottie from \"lottie-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { useFileStore } from \"../store/FileStore\";\r\nimport styles from \"./Sticker.module.css\";\r\n\r\nexport interface StickerProps {\r\n    sticker: AirgramSticker;\r\n}\r\n\r\nconst Sticker: FC<StickerProps> = ({ sticker }) => {\r\n    const file = useFileStore(sticker.sticker, sticker.isAnimated ? \"lotty\" : \"base64\");\r\n\r\n    let children: JSX.Element | undefined = undefined;\r\n\r\n    if (!file) {\r\n        children = <Spinner className={styles.spinner} scale={4} />;\r\n    }\r\n\r\n    if (file && sticker.isAnimated) {\r\n        children = (\r\n            <VisibilitySensor intervalCheck={true} scrollCheck={true}>\r\n                {({ isVisible }) => (\r\n                    <Lottie loop={isVisible} renderer=\"svg\" className={styles.sticker} animationData={file as any} />\r\n                )}\r\n            </VisibilitySensor>\r\n        );\r\n    }\r\n\r\n    if (file && !sticker.isAnimated) {\r\n        children = <img className={styles.sticker} alt=\"\" src={file as any} />;\r\n    }\r\n\r\n    return <div className={styles.root}>{children}</div>;\r\n};\r\n\r\nexport default observer(Sticker);\r\n","import { FC } from \"react\";\r\nimport { Grid, GridContainerProps } from \"@geist-ui/react\";\r\n\r\nexport const Toolbar: FC<GridContainerProps> = (props) => (\r\n    <Grid.Container wrap=\"nowrap\" height=\"64px\" alignItems=\"center\" {...props} />\r\n);\r\n","import { ComponentProps, FC } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { User } from \"@geist-ui/react\";\r\n\r\nimport styles from \"./UserCard.module.css\";\r\n\r\nexport const UserCard: FC<ComponentProps<typeof User>> = ({ className, ...other }) => (\r\n    <User className={cx(styles.card, className)} {...other} />\r\n);\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", { message: error as string });\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", { message: error as string });\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", { message: error as string });\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <RenderQrCode includeMargin renderAs=\"svg\" value={state.link} size={240} />\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { useContext, FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { Spinner } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../components\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","import { Button, Grid } from \"@geist-ui/react\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport function MobileBackButton() {\r\n    const history = useHistory();\r\n\r\n    if (history.length) {\r\n        <Grid md={0}>\r\n            <Button auto type=\"abort\" iconRight={<FiArrowLeft />} onClick={history.goBack} />\r\n        </Grid>;\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat } from \"@airgram/web\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components/StoreProvider\";\r\nimport { HandlersBuilder } from \"../utils\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<number, Chat>();\r\n\r\nexport class ChatStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    chat?: Chat = undefined;\r\n    setChat(chat: Chat) {\r\n        this.chat = chat;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private chatId: number) {\r\n        if (cache.has(chatId)) {\r\n            const chat = cache.get(chatId);\r\n            this.chat = chat;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            chat: observable.ref,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            if (ctx.update.chat.id === this.chatId) {\r\n                this.chat = ctx.update.chat;\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        if (this.chat) {\r\n            return this.chat;\r\n        }\r\n\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            const chat = await this.rootStore.Airgram.api.getChat({ chatId: this.chatId });\r\n\r\n            if (chat.response._ === \"error\") {\r\n                throw chat.response;\r\n            }\r\n\r\n            this.setChat(chat.response);\r\n            cache.set(this.chatId, chat.response);\r\n\r\n            return this.chat;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function useChat(chatId: number) {\r\n    const [store] = useState(() => new ChatStore(rootStore, chatId));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store.chat;\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Message, Messages, MessageSticker } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport { ChatStore } from \"./ChatStore\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst limit = 100;\r\n\r\nexport interface StickerMessage extends Message {\r\n    content: MessageSticker;\r\n}\r\n\r\ninterface IMessagesStore {\r\n    startMessage: number;\r\n    canLoad: boolean;\r\n    messages?: StickerMessage[];\r\n    messageIds: Map<number, boolean>;\r\n    stickerIds: Map<string, boolean>;\r\n}\r\n\r\nconst cache = new Map<number, IMessagesStore>();\r\n\r\nexport default class StickerMessagesStore implements IMessagesStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    chatStore: ChatStore;\r\n    isRestored = false;\r\n    startMessage = 0;\r\n    canLoad = true;\r\n    messages: StickerMessage[] = [];\r\n    insertMessage(message: StickerMessage) {\r\n        this.messages.unshift(message);\r\n    }\r\n    addMessage(message: StickerMessage) {\r\n        this.messages.push(message);\r\n    }\r\n    messageIds = new Map<number, boolean>();\r\n    stickerIds = new Map<string, boolean>();\r\n\r\n    processed: number = 0;\r\n    total: number = 0;\r\n    batch: number = 0;\r\n    setLoadingProgress(processed: number, total: number, batch: number) {\r\n        this.processed = processed;\r\n        this.total = total;\r\n        this.batch = batch;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private chatId: number) {\r\n        this.chatStore = new ChatStore(rootStore, chatId);\r\n\r\n        if (cache.has(chatId)) {\r\n            const values = cache.get(chatId);\r\n            Object.assign(this, values);\r\n            this.isRestored = true;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            messages: observable.shallow,\r\n            messageIds: observable.shallow,\r\n            stickerIds: observable.shallow,\r\n            dispose: false,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.chatStore.dispose();\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            if (ctx.update.chat.id === this.chatId) {\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateNewMessage, (ctx, next) => {\r\n            const message = ctx.update.message;\r\n            if (message.chatId === this.chatId && !this.messageIds.has(message.id)) {\r\n                this.messageIds.set(message.id, true);\r\n\r\n                if (message.content._ === \"messageSticker\" && !this.stickerIds.has(message.content.sticker.setId)) {\r\n                    this.addMessage(message as unknown as StickerMessage);\r\n                    this.stickerIds.set(message.content.sticker.setId, true);\r\n                }\r\n\r\n                this.save();\r\n            }\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    init() {\r\n        if (this.isRestored) {\r\n            return;\r\n        }\r\n\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.canLoad || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        this.setLoadingProgress(0, 0, 0);\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            await this.chatStore.load();\r\n\r\n            while (true) {\r\n                const history = await this.rootStore.Airgram.api.getChatHistory({\r\n                    chatId: this.chatId,\r\n                    limit,\r\n                    fromMessageId: this.startMessage,\r\n                });\r\n\r\n                if (history.response._ === \"error\") {\r\n                    throw history.response;\r\n                }\r\n\r\n                const messages = history.response as Messages;\r\n\r\n                if (messages.totalCount === 0) {\r\n                    this.canLoad = false;\r\n                    break;\r\n                }\r\n\r\n                const lastMessage = messages.messages![messages.messages!.length - 1];\r\n                this.startMessage = lastMessage.id;\r\n\r\n                const stickerMessages = Array.from(\r\n                    messages\r\n                        .messages!.reduce((acc, message) => {\r\n                            if (\r\n                                message.content._ === \"messageSticker\" &&\r\n                                !acc.has(message.content.sticker.setId) &&\r\n                                !this.stickerIds.has(message.content.sticker.setId)\r\n                            ) {\r\n                                acc.set(message.content.sticker.setId, message as any);\r\n                            }\r\n                            return acc;\r\n                        }, new Map<string, StickerMessage>())\r\n                        .values()\r\n                ).filter((x) => !this.messageIds.has(x.id));\r\n\r\n                for (const message of stickerMessages) {\r\n                    const content = message.content as MessageSticker;\r\n\r\n                    this.messageIds.set(message.id, true);\r\n                    this.stickerIds.set(content.sticker.setId, true);\r\n                    this.insertMessage(message);\r\n                }\r\n\r\n                this.setLoadingProgress(\r\n                    this.processed + messages.totalCount,\r\n                    this.total + messages.totalCount,\r\n                    this.batch + 1\r\n                );\r\n\r\n                this.save();\r\n\r\n                if (stickerMessages.length) {\r\n                    return stickerMessages.length;\r\n                }\r\n            }\r\n        } finally {\r\n            this.save();\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    save() {\r\n        const { messages, messageIds, stickerIds, startMessage, canLoad } = this;\r\n        cache.set(this.chatId, { messages, messageIds, stickerIds, startMessage, canLoad });\r\n    }\r\n}\r\n","import { FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Text, Loading } from \"@geist-ui/react\";\r\n\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\n\r\ninterface Props {\r\n    store: StickerMessagesStore;\r\n}\r\n\r\nconst Loader: FC<Props> = ({ store }) => {\r\n    return store.isLoading ? (\r\n        <Loading>\r\n            <Text span type=\"secondary\">\r\n                Loading messages ({store.processed}/{store.total} batch: {store.batch})\r\n            </Text>\r\n        </Loading>\r\n    ) : (\r\n        <Text span type=\"secondary\">\r\n            Scroll to start loading\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default observer(Loader);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { User } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components/StoreProvider\";\r\nimport { HandlersBuilder } from \"../utils\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<number, User>();\r\n\r\nexport class UserStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    user?: User = undefined;\r\n    setUser(user: User) {\r\n        this.user = user;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private userId: number) {\r\n        if (cache.has(userId)) {\r\n            const user = cache.get(userId);\r\n            this.user = user;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            user: observable.ref,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateUser, (ctx, next) => {\r\n            if (ctx.update.user.id === this.userId) {\r\n                this.user = ctx.update.user;\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        if (this.user) {\r\n            return this.user;\r\n        }\r\n\r\n        const user = await this.rootStore.Airgram.api.getUser({ userId: this.userId });\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        this.setUser(user.response);\r\n        cache.set(this.userId, user.response);\r\n\r\n        return this.user;\r\n    }\r\n}\r\n\r\nexport function useUser(userId: number) {\r\n    const [store] = useState(() => new UserStore(rootStore, userId));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store.user;\r\n}\r\n","import { MessageSenderUnion } from \"@airgram/web\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components/StoreProvider\";\r\nimport { ChatStore } from \"./ChatStore\";\r\nimport RootStore from \"./RootStore\";\r\nimport { UserStore } from \"./UserStore\";\r\n\r\nexport class MessageSenderStore {\r\n    userStore?: UserStore;\r\n    chatStore?: ChatStore;\r\n\r\n    constructor(private rootStore: RootStore, private senderId: MessageSenderUnion) {\r\n        if (senderId._ === \"messageSenderUser\") {\r\n            this.userStore = new UserStore(rootStore, senderId.userId);\r\n        }\r\n\r\n        if (senderId._ === \"messageSenderChat\") {\r\n            this.chatStore = new ChatStore(rootStore, senderId.chatId);\r\n        }\r\n\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    dispose() {\r\n        this.userStore?.dispose();\r\n        this.chatStore?.dispose();\r\n    }\r\n\r\n    get user() {\r\n        return this.userStore?.user;\r\n    }\r\n\r\n    get chat() {\r\n        return this.chatStore?.chat;\r\n    }\r\n\r\n    async load() {\r\n        if (this.senderId._ === \"messageSenderUser\") {\r\n            return this.userStore?.load();\r\n        }\r\n\r\n        if (this.senderId._ === \"messageSenderChat\") {\r\n            return this.chatStore?.load();\r\n        }\r\n    }\r\n}\r\n\r\nexport function useMessageSenderStore(senderId: MessageSenderUnion) {\r\n    const [store] = useState(() => new MessageSenderStore(rootStore, senderId));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store;\r\n}\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { HTMLProps, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Sticker, UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport { useMessageSenderStore } from \"../../store/MessageSenderStore\";\r\nimport { StickerMessage } from \"../../store/StickerMessagesStore\";\r\nimport styles from \"./Message.module.css\";\r\n\r\ninterface MessageProps extends HTMLProps<HTMLDivElement> {\r\n    message: StickerMessage;\r\n}\r\n\r\nconst Message = ({ message, ...other }: MessageProps) => {\r\n    const sticker = message.content.sticker;\r\n\r\n    const sender = useMessageSenderStore(message.senderId);\r\n    const senderPhoto = useFileStore(sender.user?.profilePhoto?.small ?? sender.chat?.photo?.small, \"base64\", {\r\n        priority: 32,\r\n    });\r\n\r\n    useEffect(() => {\r\n        sender.load();\r\n    }, [sender]);\r\n\r\n    return (\r\n        <div className={styles.root} {...other}>\r\n            <Grid.Container direction=\"column\">\r\n                <Grid>\r\n                    <UserCard\r\n                        src={senderPhoto}\r\n                        name={sender.user ? sender.user.firstName + \" \" + sender.user.lastName : sender.chat?.title}\r\n                    >\r\n                        {new Date(message.date * 1000).toLocaleString()}\r\n                    </UserCard>\r\n                </Grid>\r\n                <Grid className={styles.container} alignItems=\"center\">\r\n                    <NavLink to={`/set/${sticker.setId}`}>\r\n                        <Sticker sticker={sticker} />\r\n                    </NavLink>\r\n                </Grid>\r\n            </Grid.Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default observer(Message);\r\n","import { Grid, Text } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { useVirtual } from \"react-virtual\";\r\nimport {\r\n    CenterLayout,\r\n    List,\r\n    StoreContext,\r\n    Toolbar,\r\n    UserCard,\r\n    virtialContainerStyle,\r\n    virtualSizeStyles,\r\n} from \"../../components\";\r\nimport { MobileBackButton } from \"../../components/MobileBackButton\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\nimport styles from \"./Conversation.module.css\";\r\nimport Loader from \"./Loader\";\r\nimport Message from \"./Message\";\r\n\r\nconst PLACEHOLDER_HEIGHT = 1000;\r\nconst MESSAGE_HEIGHT = 420;\r\n\r\nlet scrollTop = new Map<number, number>();\r\n\r\nexport interface Props extends RouteComponentProps<{ id?: string | undefined }> {}\r\n\r\nconst Conversation: FC<Props> = ({ match }) => {\r\n    const id = match.params.id!;\r\n    const chatId = parseInt(id);\r\n\r\n    const rootStore = useContext(StoreContext);\r\n    const { Chats } = rootStore;\r\n    const [store] = useState(() => new StickerMessagesStore(rootStore, chatId));\r\n\r\n    const chat = store.chatStore.chat;\r\n    const messages = store.messages;\r\n\r\n    const photo = useFileStore(chat?.photo?.small, \"base64\");\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    let size = messages.length;\r\n    if (store.canLoad) {\r\n        size++;\r\n    }\r\n\r\n    const estimateSize = useCallback(\r\n        (index) => (store.canLoad && index === 0 ? PLACEHOLDER_HEIGHT : MESSAGE_HEIGHT),\r\n        [store.canLoad]\r\n    );\r\n\r\n    const { virtualItems, totalSize, scrollToOffset } = useVirtual({\r\n        size,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    const scrollView = useCallback(\r\n        (count?: number) => {\r\n            if (parentRef.current && count) {\r\n                const offset = MESSAGE_HEIGHT * count;\r\n\r\n                parentRef.current!.scrollTop += offset;\r\n                scrollToOffset(parentRef.current!.scrollTop);\r\n            }\r\n        },\r\n        [scrollToOffset]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (scrollTop.has(chatId)) {\r\n            scrollToOffset(scrollTop.get(chatId) ?? 0);\r\n        } else {\r\n            scrollView(store.messages.length);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (Chats.chats.has(chatId)) {\r\n            (async () => {\r\n                const loaded = await store.init();\r\n                scrollView(loaded);\r\n            })();\r\n        }\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n    }, [Chats.chats, chatId, scrollView, store]);\r\n\r\n    const tryLoadMessages = useCallback(async () => {\r\n        if (parentRef.current && parentRef.current.scrollTop < PLACEHOLDER_HEIGHT - 200) {\r\n            const loaded = await store.load();\r\n            scrollView(loaded);\r\n        }\r\n    }, [scrollView, store]);\r\n\r\n    useEffect(() => {\r\n        if (!store.canLoad) {\r\n            parentRef.current!.scrollTop -= PLACEHOLDER_HEIGHT;\r\n        }\r\n    }, [store.canLoad]);\r\n\r\n    useEffect(() => {\r\n        tryLoadMessages();\r\n    }, [tryLoadMessages, messages.length]);\r\n\r\n    const handleScroll = useCallback(\r\n        (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n            tryLoadMessages();\r\n            const target = event.target as HTMLDivElement;\r\n            scrollTop.set(chatId, target.scrollTop);\r\n        },\r\n        [chatId, tryLoadMessages]\r\n    );\r\n\r\n    if (!id) {\r\n        return (\r\n            <CenterLayout>\r\n                <Text type=\"secondary\">Please choose a conversation </Text>\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <MobileBackButton />\r\n                <Grid xs>\r\n                    <UserCard src={photo} name={chat?.title} />\r\n                </Grid>\r\n            </Toolbar>\r\n            <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n                <List ref={parentRef as any} onScroll={handleScroll}>\r\n                    <div style={virtialContainerStyle(totalSize)}>\r\n                        {virtualItems.map(({ index, start, size }) => {\r\n                            let realIndex = index;\r\n                            if (store.canLoad) {\r\n                                realIndex--;\r\n                            }\r\n\r\n                            const style = virtualSizeStyles(size, start);\r\n\r\n                            if (realIndex < 0)\r\n                                return (\r\n                                    <Grid.Container gap={0} alignItems=\"flex-end\" key={index} style={style}>\r\n                                        <Grid xs justify=\"center\" padding=\"50px\">\r\n                                            <Loader store={store} />\r\n                                        </Grid>\r\n                                    </Grid.Container>\r\n                                );\r\n\r\n                            const message = messages[realIndex];\r\n\r\n                            return <Message key={message.id} style={style} message={message} />;\r\n                        })}\r\n                    </div>\r\n                </List>\r\n            </Grid.Container>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Conversation);\r\n","import { Button, Grid, Spinner } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useContext, useEffect } from \"react\";\r\nimport { FiLogOut } from \"react-icons/fi\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { StoreContext, UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport styles from \"./User.module.css\";\r\n\r\nconst User: FC = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const photo = useFileStore(Authorization.user?.profilePhoto?.small, \"base64\", { priority: 32 });\r\n\r\n    useEffect(() => {\r\n        Authorization.getMe();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!Authorization.user) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" alignItems=\"center\" xs>\r\n            <NavLink className={styles.user} to=\"/stickers\">\r\n                <UserCard src={photo} name=\"My stickers\">\r\n                    {Authorization.user.username}\r\n                </UserCard>\r\n            </NavLink>\r\n\r\n            <Button auto type=\"abort\" iconRight={<FiLogOut />} onClick={() => Authorization.logOut()} />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(User);\r\n","import { FC, memo } from \"react\";\r\nimport cx from \"classnames\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { Chat } from \"../../store/ChatsStore\";\r\nimport { UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport styles from \"./ChatRow.module.css\";\r\n\r\ninterface ChatRowProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\r\n    chat: Chat;\r\n}\r\n\r\nconst ChatRow: FC<ChatRowProps> = ({ chat, className, ...other }) => {\r\n    const photo = useFileStore(chat.info?.photo?.small, \"base64\");\r\n\r\n    return (\r\n        <NavLink\r\n            to={`/conversation/${chat.info?.id}`}\r\n            className={cx(styles.chat, className)}\r\n            activeClassName={styles[\"active_chat\"]}\r\n            {...other}\r\n        >\r\n            <Grid.Container className={styles.container} alignItems=\"center\" height=\"100%\" width=\"100%\">\r\n                <UserCard src={photo} name={chat.info?.title} />\r\n            </Grid.Container>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default memo(ChatRow);\r\n","import { FC, useContext, useEffect, useRef, useCallback } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useVirtual } from \"react-virtual\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, List } from \"../../components\";\r\n\r\nimport ChatRow from \"./ChatRow\";\r\n\r\nimport styles from \"./Chats.module.css\";\r\n\r\nlet scrollTop = 0;\r\n\r\nconst Chats: FC = () => {\r\n    const { Chats } = useContext(StoreContext);\r\n\r\n    const itemData = Chats.chatsList;\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const rowVirtualizer = useVirtual({\r\n        size: itemData.length,\r\n        parentRef,\r\n        estimateSize: useCallback(() => 64, []),\r\n    });\r\n\r\n    useEffect(() => {\r\n        rowVirtualizer.scrollToOffset(scrollTop);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const target = event.target as HTMLDivElement;\r\n        scrollTop = target.scrollTop;\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n            <List ref={parentRef as any} onScroll={handleScroll}>\r\n                <div\r\n                    style={{\r\n                        height: `${rowVirtualizer.totalSize}px`,\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                    }}\r\n                >\r\n                    {rowVirtualizer.virtualItems.map(({ index, size, start }) => {\r\n                        const chat = itemData[index];\r\n                        return (\r\n                            <ChatRow\r\n                                key={chat.info?.id ?? index}\r\n                                chat={chat}\r\n                                style={{\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    left: 0,\r\n                                    width: \"100%\",\r\n                                    height: `${size}px`,\r\n                                    transform: `translateY(${start}px)`,\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Chats);\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FC } from \"react\";\r\n\r\nimport User from \"./User\";\r\nimport Chats from \"./Chats\";\r\nimport { Toolbar } from \"../../components\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <User />\r\n            </Toolbar>\r\n            <Chats />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Menu);\r\n","import { StickerSet } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable, runInAction } from \"mobx\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<string, StickerSet>();\r\n\r\nexport default class StickerSetStore {\r\n    set?: StickerSet = undefined;\r\n\r\n    constructor(private rootStore: RootStore, private setId: string) {\r\n        makeAutoObservable(this, { set: observable.ref });\r\n    }\r\n\r\n    async load() {\r\n        if (this.set) {\r\n            return;\r\n        }\r\n\r\n        if (cache.has(this.setId)) {\r\n            const set = cache.get(this.setId);\r\n            runInAction(() => {\r\n                this.set = set;\r\n            });\r\n            return;\r\n        }\r\n\r\n        const set = await this.rootStore.Airgram.api.getStickerSet({ setId: this.setId });\r\n\r\n        if (set.response._ === \"stickerSet\") {\r\n            runInAction(() => {\r\n                this.set = set.response as StickerSet;\r\n            });\r\n            cache.set(this.setId, this.set!);\r\n        }\r\n    }\r\n}\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer, useLocalObservable } from \"mobx-react-lite\";\r\nimport { FC, useContext, useEffect } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { List, Sticker, StoreContext, Toolbar, UserCard } from \"../../components\";\r\nimport { MobileBackButton } from \"../../components/MobileBackButton\";\r\nimport StickerSetStore from \"../../store/StickerSetStore\";\r\nimport styles from \"./Set.module.css\";\r\n\r\ninterface Props extends RouteComponentProps<{ id?: string | undefined }> {}\r\n\r\nconst Set: FC<Props> = ({ match }) => {\r\n    const setId = match.params.id!;\r\n\r\n    const rootStore = useContext(StoreContext);\r\n\r\n    const state = useLocalObservable(() => new StickerSetStore(rootStore, setId));\r\n    const set = state.set;\r\n\r\n    useEffect(() => {\r\n        state.load();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <MobileBackButton />\r\n                <Grid xs>\r\n                    <UserCard name={set?.title} />\r\n                </Grid>\r\n            </Toolbar>\r\n            <List className={styles.root}>\r\n                <Grid.Container justify=\"flex-start\">\r\n                    {set?.stickers.map((sticker) => (\r\n                        <Grid key={sticker.sticker.id} xs={24} sm={12} md={12} lg={8} xl={6} justify=\"center\">\r\n                            <Sticker sticker={sticker} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid.Container>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Set);\r\n","import { StickerSetInfo } from \"@airgram/web\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport class StickersStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    sets?: StickerSetInfo[] = undefined;\r\n    setStickers(sets: StickerSetInfo[]) {\r\n        this.sets = sets;\r\n    }\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            sets: observable.shallow,\r\n        });\r\n    }\r\n\r\n    async load() {\r\n        if (this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        if (this.sets) {\r\n            return this.sets;\r\n        }\r\n\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            const stickers = await this.rootStore.Airgram.api.getInstalledStickerSets();\r\n            if (stickers.response._ === \"error\") {\r\n                throw stickers.response;\r\n            }\r\n\r\n            this.setStickers(stickers.response.sets);\r\n            return stickers.response.sets;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    // get sets() {\r\n    //     return groupBy(this.sets ?? [], (sticker) => sticker.setId);\r\n    // }\r\n}\r\n","import { StickerSetInfo } from \"@airgram/web\";\r\nimport { Grid, Text } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { useVirtual } from \"react-virtual\";\r\nimport { List, Sticker, StoreContext, virtialContainerStyle, virtualSizeStyles } from \"../../components\";\r\nimport StickerSetStore from \"../../store/StickerSetStore\";\r\nimport styles from \"./InlineSet.module.css\";\r\n\r\ninterface Props {\r\n    setInfo: StickerSetInfo;\r\n}\r\n\r\nconst InlineSet: FC<Props> = ({ setInfo }) => {\r\n    const rootStore = useContext(StoreContext);\r\n    const [store] = useState(() => new StickerSetStore(rootStore, setInfo.id));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n    }, [store]);\r\n\r\n    const set = store.set;\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const estimateSize = useCallback((index) => 420, []);\r\n\r\n    const { virtualItems, totalSize } = useVirtual({\r\n        horizontal: true,\r\n        size: set?.stickers.length ?? 0,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid>\r\n                <Text>{set?.title}</Text>\r\n            </Grid>\r\n            <Grid className={styles.list}>\r\n                <List ref={parentRef as any}>\r\n                    <div style={virtialContainerStyle(totalSize, true)}>\r\n                        {virtualItems.map(({ index, start, size }) => {\r\n                            const sticker = set?.stickers[index];\r\n\r\n                            return (\r\n                                <div key={index} style={virtualSizeStyles(size, start, true)}>\r\n                                    <Sticker sticker={sticker!} />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </List>\r\n            </Grid>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(InlineSet);\r\n","import { Grid, Text } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { useVirtual } from \"react-virtual\";\r\nimport { List, StoreContext, Toolbar, virtialContainerStyle, virtualSizeStyles } from \"../../components\";\r\nimport { MobileBackButton } from \"../../components/MobileBackButton\";\r\nimport { StickersStore } from \"../../store/StickersStore\";\r\nimport InlineSet from \"./InlineSet\";\r\nimport styles from \"./Stickers.module.css\";\r\n\r\ninterface Props extends RouteComponentProps {}\r\n\r\nconst Stickers: FC<Props> = () => {\r\n    const rootStore = useContext(StoreContext);\r\n    const [store] = useState(() => new StickersStore(rootStore));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const estimateSize = useCallback((index) => 420, []);\r\n\r\n    const { virtualItems, totalSize } = useVirtual({\r\n        size: store.sets?.length ?? 0,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <MobileBackButton />\r\n                <Grid xs>\r\n                    <Text>Stickers</Text>\r\n                </Grid>\r\n            </Toolbar>\r\n            <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n                <List ref={parentRef as any}>\r\n                    <div style={virtialContainerStyle(totalSize)}>\r\n                        {virtualItems.map(({ index, start, size }) => {\r\n                            const set = store.sets?.[index];\r\n                            return (\r\n                                <div key={index} style={virtualSizeStyles(size, start)}>\r\n                                    <InlineSet setInfo={set!} />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </List>\r\n            </Grid.Container>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Stickers);\r\n","import { Grid, useMediaQuery } from \"@geist-ui/react\";\r\nimport { Redirect, Route, RouteProps, Switch } from \"react-router\";\r\nimport Conversation from \"./Conversation/Conversation\";\r\nimport Menu from \"./Menu/Menu\";\r\nimport styles from \"./Root.module.css\";\r\nimport Set from \"./Set/Set\";\r\nimport Stickers from \"./Stickers/Stickers\";\r\n\r\nconst routes: RouteProps[] = [\r\n    {\r\n        path: \"/chats\",\r\n        component: Menu,\r\n    },\r\n    {\r\n        path: \"/stickers\",\r\n        component: Stickers,\r\n    },\r\n    {\r\n        path: \"/conversation/:id?\",\r\n        render: (props) => <Conversation key={props.match.params.id} {...props} />,\r\n    },\r\n    {\r\n        path: \"/set/:id?\",\r\n        render: (props) => <Set key={props.match.params.id} {...props} />,\r\n    },\r\n];\r\n\r\nfunction toRoute(route: RouteProps, index: number) {\r\n    return <Route key={index} {...route} />;\r\n}\r\n\r\nexport default function Root() {\r\n    const isMobile = useMediaQuery(\"sm\", { match: \"down\" });\r\n    const [menu, ...other] = routes;\r\n\r\n    return (\r\n        <Grid.Container gap={0} width=\"100%\" height=\"100%\">\r\n            {isMobile ? (\r\n                <Switch>\r\n                    {[menu, ...other].map(toRoute)}\r\n                    <Redirect to=\"chats\" />\r\n                </Switch>\r\n            ) : (\r\n                <>\r\n                    <Grid className={styles.panel} sm={8} md={6} lg={4} xl={2}>\r\n                        <Menu />\r\n                    </Grid>\r\n                    <Grid className={styles.panel} sm={16} md={18} lg={20} xl={22}>\r\n                        <Switch>{other.map(toRoute)}</Switch>\r\n                        <Redirect to=\"conversation\" />\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n}\r\n","import { useContext } from \"react\";\r\n\r\nimport { Grid, Link, Text, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n    const { Theme } = useContext(StoreContext);\r\n\r\n    const isDarktTheme = Theme.currentTheme === \"dark\";\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" gap={0} height=\"50px\" alignItems=\"center\">\r\n            <Spacer w={0.5} />\r\n            <Button\r\n                auto\r\n                type=\"abort\"\r\n                iconRight={isDarktTheme ? <FiMoon /> : <FiSun />}\r\n                onClick={() => Theme.toggleTheme()}\r\n            />\r\n\r\n            <div style={{ flex: 1 }} />\r\n            <Text span>\r\n                Made with{\" \"}\r\n                <Link underline href=\"https://airgram.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Airgram\r\n                </Link>\r\n                ,{\" \"}\r\n                <Link underline href=\"https://react.geist-ui.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Geist UI\r\n                </Link>{\" \"}\r\n                and <FiHeart color=\"red\" />\r\n            </Text>\r\n            <Spacer />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useContext, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { GeistProvider, CssBaseline, Page } from \"@geist-ui/react\";\n\nimport { StoreContext, CssThemeVariables } from \"./components\";\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\nimport Footer from \"./app/Footer\";\n\nfunction App() {\n    const { Theme, Chats } = useContext(StoreContext);\n\n    useEffect(() => {\n        Chats.load();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <GeistProvider themeType={Theme.currentTheme}>\n            <CssThemeVariables />\n            <CssBaseline />\n            <Page render=\"effect-seo\" scale={0.5} width=\"100%\" padding={0}>\n                <Page.Content paddingTop={0}>\n                    <AuthProvider>\n                        <Root />\n                    </AuthProvider>\n                </Page.Content>\n                <Page.Footer>\n                    <Footer />\n                </Page.Footer>\n            </Page>\n        </GeistProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { StoreProvider } from \"./components\";\n\nReactDOM.render(\n    <StoreProvider>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </StoreProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Sticker_root__gZJDN\",\"sticker\":\"Sticker_sticker__27Rjf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatRow_chat__IbOPK\",\"active_chat\":\"ChatRow_active_chat__2ZRAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Message_container__L0WXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Root_panel__2Hl4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InlineSet_root__1p_bX\",\"list\":\"InlineSet_list__wg14G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"List_thumb__2th6t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"UserCard_card__3-Fjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Conversation_root__1cN7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__V0drn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chats_root__31lV_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Set_root__1thkL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Stickers_root__3yWzd\"};"],"sourceRoot":""}