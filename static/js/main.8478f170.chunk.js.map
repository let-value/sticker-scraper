{"version":3,"sources":["components/CenterLayout.tsx","components/CssThemeVariables.tsx","components/List.tsx","components/MobileBackButton.tsx","utils/convertBlob.ts","utils/databaseExists.ts","utils/HandlersBuilder.ts","utils/setRef.ts","store/Airgram.ts","store/AuthorizationStore.ts","store/ChatsStore.ts","store/ConnectionStore.ts","store/ThemeStore.ts","store/RootStore.ts","store/FileStore.ts","components/viewer/ImageView.tsx","components/viewer/LottieView.tsx","components/Sticker.tsx","components/Thumbnail.tsx","components/StickerSetThumbnail.tsx","components/StoreProvider.tsx","components/Toolbar.tsx","components/UserCard.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","store/ChatStore.ts","store/StickerMessagesStore.ts","app/Conversation/Loader.tsx","store/UserStore.ts","store/MessageSenderStore.ts","app/Conversation/Message.tsx","app/Conversation/Conversation.tsx","app/Menu/User.tsx","app/Menu/ChatRow.tsx","app/Menu/Chats.tsx","app/Menu/Menu.tsx","store/StickerSetStore.ts","app/Set/SetActions.tsx","app/Set/Set.tsx","store/StickersStore.ts","app/Stickers/InlineSet.tsx","app/Stickers/StickerSetRow.tsx","app/Stickers/Stickers.tsx","app/Root.tsx","app/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx","app/Stickers/Stickers.module.css","components/Sticker.module.css","app/Menu/ChatRow.module.css","app/Root.module.css","components/CenterLayout.module.css","app/Conversation/Message.module.css","app/Stickers/InlineSet.module.css","components/List.module.css","components/UserCard.module.css","app/SignIn/QrCode.module.css","app/Conversation/Conversation.module.css","app/Menu/User.module.css","app/Menu/Chats.module.css","app/Set/Set.module.css"],"names":["CenterLayout","className","disablePadding","other","cx","styles","root","padding","document","documentElement","CssThemeVariables","theme","useTheme","useEffect","palette","Object","entries","key","value","style","setProperty","renderThumb","props","thumb","virtialContainerStyle","totalSize","horizontal","height","width","position","virtualSizeStyles","size","start","top","left","ListComponent","ref","component","Component","children","refSetter","useCallback","scrollbarsRef","current","view","renderView","renderThumbHorizontal","renderThumbVertical","List","forwardRef","MobileBackButton","history","useHistory","handleClick","length","goBack","push","md","auto","type","iconRight","onClick","blobToLotty","blob","a","arrayBuffer","buffer","data","Uint8Array","output","pako","inflate","Blob","text","json","JSON","parse","blobToJson","Response","blobToText","blobToBase64","reader","FileReader","readAsDataURL","Promise","resolve","reject","onloadend","result","onerror","error","HandlersBuilder","handlers","args","this","ctx","next","filter","_","Composer","compose","map","setRef","options","useTestDc","readOnly","instanceName","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","useDatabase","useFileDatabase","useChatInfoDatabase","useMessageDatabase","useSecretChats","AirgramFactory","api","destroy","newInstance","Airgram","AuthorizationStore","rootStore","state","undefined","firstLaunch","user","add","UPDATE","updateAuthorizationState","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","setState","build","makeAutoObservable","observable","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","response","reset","resetAirgram","logOut","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","getMe","ChatsStore","chats","Map","updateNewChat","setChat","chat","id","info","updateChatPosition","chatId","updateChatLastMessage","lastMessage","positions","find","x","list","shallow","updater","get","set","loadChats","chatList","limit","Array","from","values","sort","b","BigInt","order","isPinned","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","middleware","updateConnectionState","context","STORAGE_KEY","initColor","window","matchMedia","matches","savedColor","localStorage","getItem","ThemeStore","currentTheme","setItem","newTheme","setTheme","airgramFactory","RootStore","events","EventEmitter","emit","console","log","listeners","eventName","Theme","Authorization","Connection","Chats","makeAsync","use","cache","FileStore","file","format","params","isLoading","content","updateFile","load","addListener","removeListener","setLoading","fileId","cachedValue","setContent","downloadFile","priority","readFilePart","useFileStore","useState","store","dispose","setFile","observer","fallback","alt","src","intervalCheck","scrollCheck","isVisible","loop","renderer","animationData","STICKER_SIZE","loader","spinner","scale","sticker","isAnimated","Thumbnail","thumbnail","heightProp","widthProp","thumbnailHeight","thumbnailWidth","StickerSetThumbnail","stickers","StoreContext","createContext","StoreProvider","Provider","Toolbar","Container","wrap","alignItems","UserCard","card","useContext","useForm","handleSubmit","setError","control","useController","defaultValue","name","rules","required","field","onChange","fieldState","onSubmit","sendCode","message","handleChange","event","target","direction","alignContent","h3","codeInfo","autoFocus","label","htmlType","ghost","lock","setLock","errors","formState","register","sendPassword","Password","disabled","placeholder","passwordHint","PhoneNumber","sendPhoneNumber","margin","codeArea","link","includeMargin","renderAs","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","ChatStore","has","getChat","StickerMessagesStore","chatStore","isRestored","startMessage","canLoad","messages","messageIds","stickerIds","processed","total","batch","updateNewMessage","setId","addMessage","save","assign","unshift","setLoadingProgress","getChatHistory","fromMessageId","totalCount","stickerMessages","reduce","acc","insertMessage","span","UserStore","userId","updateUser","getUser","setUser","MessageSenderStore","senderId","userStore","sender","useMessageSenderStore","senderPhoto","profilePhoto","small","photo","firstName","lastName","title","Date","date","toLocaleString","container","to","PLACEHOLDER_HEIGHT","scrollTop","match","parentRef","useRef","estimateSize","index","useVirtual","virtualItems","scrollToOffset","scrollView","count","offset","init","loaded","tryLoadMessages","handleScroll","isMobile","useMediaQuery","justify","xs","onScroll","realIndex","gap","username","ChatRow","activeClassName","memo","itemData","chatsList","rowVirtualizer","transform","StickerSetStore","toasts","updateStickerSet","stickerSet","setSet","getStickerSet","setToast","changeStickerSet","isInstalled","isArchived","request","actions","handler","cancel","useStickerSetStore","useToasts","install","delete","sm","lg","xl","StickersStore","isReordering","sets","updateInstalledStickerSets","source","destination","sourceSet","splice","stickerSetIds","reorderInstalledStickerSets","reorder","force","getInstalledStickerSets","setStickers","setReordering","hideToolbar","hideControls","hideList","setInfo","w","StickerSetRow","provided","innerRef","setWrapper","draggableProps","dragHandle","dragHandleProps","useStickersStore","itemSize","useMemo","toggleReordering","onDragEnd","reorderSets","isDropDisabled","droppableId","mode","renderClone","rubric","HTMLElement","isDragDisabled","draggableId","routes","path","Menu","Stickers","render","toRoute","route","panelProps","paddingTop","paddingBottom","Root","menu","panel","Footer","isDarktTheme","toggleTheme","flex","underline","href","rel","color","themeType","Content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8478f170.chunk.js","sourcesContent":["import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nexport const CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n","import { useTheme } from \"@geist-ui/react\";\r\nimport { useEffect, FC } from \"react\";\r\n\r\nconst root = document.documentElement;\r\n\r\nexport const CssThemeVariables: FC = () => {\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        const { palette } = theme;\r\n\r\n        for (const [key, value] of Object.entries(palette)) {\r\n            root.style.setProperty(\"--palette-\" + key, value);\r\n        }\r\n    }, [theme]);\r\n\r\n    return null;\r\n};\r\n","import cx from \"classnames\";\r\nimport { ComponentProps, CSSProperties, ElementType, FC, forwardRef, HTMLProps, Ref, useCallback } from \"react\";\r\nimport Scrollbars, { ScrollbarProps } from \"react-custom-scrollbars-2\";\r\nimport styles from \"./List.module.css\";\r\n\r\nconst renderThumb: FC<HTMLProps<HTMLDivElement>> = ({ className, ...props }) => {\r\n    return <div className={cx(className, styles.thumb)} {...props} />;\r\n};\r\n\r\nexport const virtialContainerStyle = (totalSize: number, horizontal = false): CSSProperties => ({\r\n    height: horizontal ? \"100%\" : totalSize,\r\n    width: horizontal ? totalSize : \"100%\",\r\n    position: \"relative\",\r\n});\r\n\r\nexport const virtualSizeStyles = (size: number, start: number, horizontal = false): CSSProperties => ({\r\n    position: \"absolute\",\r\n    top: horizontal ? 0 : start,\r\n    left: horizontal ? start : 0,\r\n    height: horizontal ? \"100%\" : size,\r\n    width: horizontal ? size : \"100%\",\r\n});\r\n\r\ntype Props<TComponent extends ElementType> = ComponentProps<TComponent> &\r\n    ScrollbarProps & {\r\n        component?: TComponent;\r\n    };\r\n\r\nconst ListComponent = <TComponent extends ElementType = \"div\">(\r\n    { component: Component = \"div\", children, ...other }: Props<TComponent>,\r\n    ref: Ref<HTMLDivElement>\r\n) => {\r\n    const refSetter = useCallback((scrollbarsRef: any) => {\r\n        if (scrollbarsRef && ref && typeof ref === \"object\") {\r\n            (ref.current as any) = scrollbarsRef.view;\r\n        } else if (scrollbarsRef && typeof ref === \"function\") {\r\n            ref?.(scrollbarsRef.view);\r\n        } else if (typeof ref === \"function\") {\r\n            ref?.(null);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const renderView = useCallback(\r\n        (props) => {\r\n            return <Component {...props} />;\r\n        },\r\n        [Component]\r\n    );\r\n\r\n    return (\r\n        <Scrollbars\r\n            ref={refSetter}\r\n            renderView={renderView}\r\n            renderThumbHorizontal={renderThumb}\r\n            renderThumbVertical={renderThumb}\r\n            {...other}\r\n        >\r\n            {children}\r\n        </Scrollbars>\r\n    );\r\n};\r\n\r\nexport const List = forwardRef(ListComponent);\r\n","import { Button, Grid } from \"@geist-ui/react\";\r\nimport { useCallback } from \"react\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport function MobileBackButton() {\r\n    const history = useHistory();\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (history.length > 1) {\r\n            history.goBack();\r\n        } else {\r\n            history.push(\"/\");\r\n        }\r\n    }, [history]);\r\n\r\n    return (\r\n        <Grid md={0}>\r\n            <Button auto type=\"abort\" iconRight={<FiArrowLeft />} onClick={handleClick} />\r\n        </Grid>\r\n    );\r\n}\r\n","import pako from \"pako\";\r\n\r\nexport async function blobToLotty(blob: Blob) {\r\n    const buffer = await blob.arrayBuffer();\r\n    const data = new Uint8Array(buffer);\r\n    const output = pako.inflate(data);\r\n    var json = await new Blob([output]).text();\r\n\r\n    return JSON.parse(json);\r\n}\r\n\r\nexport function blobToJson(blob: Blob) {\r\n    return new Response(new Blob([blob], { type: \"application/json\" })).text();\r\n}\r\n\r\nexport function blobToText(blob: Blob) {\r\n    return new Response(blob).text();\r\n}\r\n\r\nexport function blobToBase64(blob: Blob) {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    return new Promise<string>((resolve, reject) => {\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string);\r\n        };\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n","export const databaseExists = async (name: string) =>\r\n    new Promise((resolve, reject) => {\r\n        const request = indexedDB.open(name);\r\n        let existed = true;\r\n        request.onupgradeneeded = function () {\r\n            existed = false;\r\n        };\r\n        request.onsuccess = function () {\r\n            request.result.close();\r\n            if (!existed) indexedDB.deleteDatabase(name);\r\n            resolve(existed);\r\n        };\r\n        request.onerror = function () {\r\n            reject(request.error);\r\n        };\r\n    });\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { UpdateContext, UpdateUnion, ApiMethods, MiddlewareFn, Composer } from \"@airgram/core\";\r\n\r\ntype UpdateName = `${UPDATE}`;\r\n\r\ntype UpdateLookup = {\r\n    [P in UpdateName]: Extract<UpdateUnion, { _: P }>;\r\n};\r\n\r\ntype MethodName = {\r\n    [K in keyof ApiMethods]: K;\r\n}[keyof ApiMethods];\r\n\r\ntype MethodsLookup = {\r\n    [P in MethodName]: ReturnType<ApiMethods[P]> extends Promise<infer PT> ? PT : never;\r\n};\r\n\r\ntype ActionName = UpdateName | MethodName;\r\n\r\ntype PickContext<TAction extends string> = TAction extends UPDATE\r\n    ? UpdateContext<UpdateLookup[TAction]>\r\n    : TAction extends MethodName\r\n    ? MethodsLookup[TAction]\r\n    : never;\r\n\r\ntype Handler<TAction extends ActionName> = MiddlewareFn<PickContext<TAction>>;\r\n\r\ntype HandlerRecord<TAction extends ActionName> = [action: TAction, handler: Handler<TAction>];\r\n\r\nexport default class HandlersBuilder {\r\n    private handlers: Array<HandlerRecord<any>> = [];\r\n    add<TAction extends ActionName>(...args: HandlerRecord<TAction>) {\r\n        this.handlers.push(args);\r\n        return this;\r\n    }\r\n\r\n    build(): MiddlewareFn {\r\n        return (ctx, next) => {\r\n            const handlers = this.handlers.filter(([update]) => update === ctx._) ?? [];\r\n\r\n            if (handlers.length) {\r\n                return Composer.compose(handlers.map(([, handler]) => handler))(ctx, next);\r\n            }\r\n\r\n            return next();\r\n        };\r\n    }\r\n}\r\n","export default function setRef<T>(\r\n    ref: React.MutableRefObject<T | null> | ((instance: T | null) => void) | null | undefined,\r\n    value: T | null\r\n): void {\r\n    if (typeof ref === \"function\") {\r\n        ref(value);\r\n    } else if (ref) {\r\n        ref.current = value;\r\n    }\r\n}\r\n","import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst useTestDc = false;\r\n\r\nconst options: AirgramConfig = {\r\n    useTestDc,\r\n    readOnly: false,\r\n    instanceName: useTestDc ? \"tdlib_test\" : \"tdlib\",\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"info\",\r\n    logVerbosityLevel: 1,\r\n    useDatabase: true,\r\n    useFileDatabase: true,\r\n    useChatInfoDatabase: true,\r\n    useMessageDatabase: true,\r\n    useSecretChats: false,\r\n};\r\n\r\nexport class AirgramFactory {\r\n    current?: Airgram;\r\n\r\n    async makeAsync() {\r\n        if (this.current) {\r\n            await this.current.api.destroy();\r\n        }\r\n\r\n        const newInstance = new Airgram(options);\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this.current = newInstance;\r\n\r\n        return newInstance;\r\n    }\r\n}\r\n","import { AUTHORIZATION_STATE, UPDATE } from \"@airgram/constants\";\r\nimport { AuthorizationStateUnion, User } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    setState(state: AuthorizationStateUnion) {\r\n        this.state = state;\r\n    }\r\n    firstLaunch = true;\r\n    user?: User;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            user: observable.ref,\r\n            handlers: false,\r\n        });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateAuthorizationState, (ctx) => {\r\n            const state = ctx.update.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            this.setState(state);\r\n        })\r\n        .build();\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    async logOut() {\r\n        await this.rootStore.Airgram.api.logOut();\r\n        this.firstLaunch = true;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n\r\n    async getMe() {\r\n        if (this.user) {\r\n            return;\r\n        }\r\n\r\n        const user = await this.rootStore.Airgram.api.getMe();\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        this.user = user.response as User;\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat as AirgramChat, ChatPosition, Message } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport interface Chat {\r\n    info?: AirgramChat;\r\n    position?: ChatPosition;\r\n    lastMessage?: Message;\r\n}\r\n\r\nexport default class ChatsStore {\r\n    chats = new Map<number, Chat>();\r\n    setChat(chatId: number, updater: (chat: Chat) => Chat | void) {\r\n        let chat = this.chats.get(chatId);\r\n        if (!chat) {\r\n            chat = {};\r\n        }\r\n\r\n        chat = updater(chat!) ?? chat;\r\n        this.chats.set(chatId, chat!);\r\n    }\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, { chats: observable.shallow, handlers: false });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            this.setChat(ctx.update.chat.id, (chat) => {\r\n                chat.info = ctx.update.chat;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatPosition, (ctx, next) => {\r\n            this.setChat(ctx.update.chatId, (chat) => {\r\n                chat.position = ctx.update.position;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatLastMessage, (ctx, next) => {\r\n            this.setChat(ctx.update.chatId, (chat) => {\r\n                chat.lastMessage = ctx.update.lastMessage;\r\n            });\r\n\r\n            const position = ctx.update.positions.find((x) => x.list._ === \"chatListMain\");\r\n\r\n            if (position) {\r\n                this.setChat(ctx.update.chatId, (chat) => {\r\n                    chat.position = position;\r\n                });\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        await this.rootStore.Airgram.api.loadChats({\r\n            chatList: { _: \"chatListMain\" },\r\n            limit: 10,\r\n        });\r\n    }\r\n\r\n    get chatsList() {\r\n        return Array.from(this.chats.values())\r\n            .sort((a, b) => (BigInt(a.position?.order ?? 0) < BigInt(b.position?.order ?? 0) ? 0 : -1))\r\n            .sort((a, b) => {\r\n                const x = a.position?.isPinned;\r\n                const y = b.position?.isPinned;\r\n                return x === y ? 0 : x ? -1 : 1;\r\n            });\r\n    }\r\n}\r\n","import { CONNECTION_STATE, UPDATE } from \"@airgram/constants\";\r\nimport { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n    setState(state: CONNECTION_STATE) {\r\n        this.state = state;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n\r\n            this.setState(state);\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nconst STORAGE_KEY = \"theme\";\r\n\r\ntype ThemeVariants = \"dark\" | \"light\";\r\n\r\nlet initColor: ThemeVariants = \"light\";\r\n\r\nif (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    initColor = \"dark\";\r\n}\r\n\r\nconst savedColor = localStorage.getItem(STORAGE_KEY);\r\n\r\nif (savedColor) {\r\n    initColor = savedColor as ThemeVariants;\r\n}\r\n\r\nexport default class ThemeStore {\r\n    currentTheme = initColor;\r\n    setTheme(theme: ThemeVariants) {\r\n        this.currentTheme = theme;\r\n        localStorage.setItem(STORAGE_KEY, theme);\r\n    }\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const newTheme = this.currentTheme === \"dark\" ? \"light\" : \"dark\";\r\n        this.setTheme(newTheme);\r\n    }\r\n}\r\n","import { Airgram, Composer, MiddlewareFn } from \"@airgram/web\";\r\nimport { EventEmitter } from \"events\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { AirgramFactory } from \"./Airgram\";\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ChatsStore from \"./ChatsStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\nimport ThemeStore from \"./ThemeStore\";\r\n\r\nexport type EventPayload = Parameters<MiddlewareFn>;\r\n\r\nconst airgramFactory = new AirgramFactory();\r\n\r\nexport default class RootStore {\r\n    static eventName = \"action\";\r\n    events = new EventEmitter();\r\n    private emit: MiddlewareFn = (ctx, next) => {\r\n        console.log(ctx);\r\n        const listeners = (this.events.listeners(RootStore.eventName) ?? []) as MiddlewareFn[];\r\n        return Composer.compose(listeners)(ctx, next);\r\n    };\r\n\r\n    Theme = new ThemeStore();\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    Chats = new ChatsStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { events: false, Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await airgramFactory.makeAsync();\r\n        this.Airgram.use(this.Authorization.handlers, this.Connection, this.Chats.handlers, this.emit);\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { DownloadFileParams, File } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components\";\r\nimport { blobToBase64, blobToJson, blobToLotty, blobToText } from \"../utils\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<number, any>();\r\n\r\ntype FileFormats = \"blob\" | \"base64\" | \"text\" | \"json\" | \"lotty\";\r\n\r\ntype FileFormat<TFormat extends FileFormats> = TFormat extends \"blob\"\r\n    ? Blob\r\n    : TFormat extends \"base64\" | \"text\"\r\n    ? string\r\n    : TFormat extends \"json\" | \"lotty\"\r\n    ? object\r\n    : never;\r\n\r\ntype DownloadParams = Omit<DownloadFileParams, \"fileId\">;\r\n\r\nexport default class FileStore<TFormat extends FileFormats> {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    private format?: FileFormats = undefined;\r\n    private file?: File = undefined;\r\n    content?: FileFormat<TFormat> = undefined;\r\n    setContent(content: any) {\r\n        this.content = content;\r\n    }\r\n    private params?: DownloadParams = undefined;\r\n    constructor(private rootStore: RootStore, file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        makeAutoObservable(this, { content: observable.ref, handlers: false });\r\n        this.file = file;\r\n        this.format = format;\r\n        this.params = params;\r\n        this.load();\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateFile, (ctx, next) => {\r\n            if (ctx.update.file.id === this.file?.id) {\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    setFile(file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        this.file = file;\r\n\r\n        if (this.format !== format) {\r\n            this.content = undefined;\r\n            this.format = format;\r\n        }\r\n\r\n        this.params = params;\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.file || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        if (this.content) {\r\n            return this.content;\r\n        }\r\n\r\n        try {\r\n            this.setLoading(true);\r\n\r\n            const fileId = this.file.id;\r\n\r\n            const cachedValue = cache.get(fileId);\r\n            if (cachedValue) {\r\n                this.setContent(cachedValue);\r\n                return cachedValue;\r\n            }\r\n\r\n            const download = await this.rootStore.Airgram.api.downloadFile({ fileId, priority: 1, ...this.params });\r\n\r\n            if (download.response._ === \"error\") {\r\n                return;\r\n            }\r\n\r\n            const file = await this.rootStore.Airgram.api.readFilePart({ fileId });\r\n\r\n            if (file.response._ === \"error\") {\r\n                return;\r\n            }\r\n\r\n            const blob = file.response.data as unknown as Blob;\r\n\r\n            let content: any = null;\r\n            if (this.format === \"blob\") {\r\n                content = blob;\r\n            }\r\n\r\n            if (this.format === \"base64\") {\r\n                content = await blobToBase64(blob);\r\n            }\r\n\r\n            if (this.format === \"text\") {\r\n                content = await blobToText(blob);\r\n            }\r\n\r\n            if (this.format === \"json\") {\r\n                content = await blobToJson(blob);\r\n            }\r\n\r\n            if (this.format === \"lotty\") {\r\n                content = await blobToLotty(blob);\r\n            }\r\n\r\n            cache.set(fileId, content);\r\n            this.setContent(content);\r\n\r\n            return content;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function useFileStore<TResult extends FileFormats>(\r\n    file?: File,\r\n    format?: TResult,\r\n    params?: DownloadParams\r\n): FileFormat<TResult> | undefined {\r\n    const [store] = useState(() => new FileStore<TResult>(rootStore, file, format, params));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        store.setFile(file, format, params);\r\n    }, [file, format, params, store]);\r\n\r\n    return store.content;\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport { FileViewProps } from \"./FileViewProps\";\r\n\r\ninterface Props\r\n    extends FileViewProps,\r\n        Omit<React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, \"src\"> {}\r\n\r\nconst ImageView: FC<Props> = ({ file, fallback, ...other }) => {\r\n    const data = useFileStore(file, \"base64\");\r\n\r\n    if (!data) {\r\n        return fallback ?? null;\r\n    }\r\n\r\n    return <img alt=\"\" src={data as any} {...other} />;\r\n};\r\n\r\nexport default observer(ImageView);\r\n","import Lottie, { LottieComponentProps } from \"lottie-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport { FileViewProps } from \"./FileViewProps\";\r\n\r\ninterface Props extends FileViewProps, Omit<LottieComponentProps, \"animationData\"> {}\r\n\r\nconst LottieView: FC<Props> = ({ file, fallback, height, width, ...other }) => {\r\n    const data = useFileStore(file, \"lotty\");\r\n\r\n    if (!data) {\r\n        return fallback ?? null;\r\n    }\r\n\r\n    return (\r\n        <VisibilitySensor intervalCheck={true} scrollCheck={true}>\r\n            {({ isVisible }) => (\r\n                <Lottie\r\n                    loop={isVisible}\r\n                    renderer=\"svg\"\r\n                    animationData={data as any}\r\n                    height={height}\r\n                    width={width}\r\n                    style={{ height, width }}\r\n                    {...other}\r\n                />\r\n            )}\r\n        </VisibilitySensor>\r\n    );\r\n};\r\n\r\nexport default observer(LottieView);\r\n","import { Sticker as AirgramSticker } from \"@airgram/core\";\r\nimport { Spinner } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport styles from \"./Sticker.module.css\";\r\nimport { FileViewProps } from \"./viewer/FileViewProps\";\r\nimport ImageView from \"./viewer/ImageView\";\r\nimport LottieView from \"./viewer/LottieView\";\r\n\r\nexport const STICKER_SIZE = {\r\n    small: 100,\r\n    default: 320,\r\n};\r\n\r\nexport interface StickerProps extends Omit<FileViewProps, \"file\"> {\r\n    sticker: AirgramSticker;\r\n}\r\n\r\nlet loader = <Spinner className={styles.spinner} scale={4} />;\r\n\r\nconst Sticker: FC<StickerProps> = ({\r\n    sticker,\r\n    height = STICKER_SIZE.default,\r\n    width = STICKER_SIZE.default,\r\n    ...other\r\n}) => {\r\n    let children: JSX.Element | undefined = undefined;\r\n\r\n    if (sticker.isAnimated) {\r\n        children = (\r\n            <LottieView\r\n                className={styles.sticker}\r\n                file={sticker.sticker}\r\n                fallback={loader}\r\n                height={height}\r\n                width={width}\r\n                {...other}\r\n            />\r\n        );\r\n    } else {\r\n        children = (\r\n            <ImageView\r\n                className={styles.sticker}\r\n                file={sticker.sticker}\r\n                fallback={loader}\r\n                height={height}\r\n                width={width}\r\n                {...other}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={styles.root} style={{ height, width }}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default observer(Sticker);\r\n","import { Thumbnail as AirgramThumbnail } from \"@airgram/core\";\r\nimport { FC } from \"react\";\r\nimport { FileViewProps } from \"./viewer/FileViewProps\";\r\nimport ImageView from \"./viewer/ImageView\";\r\nimport LottieView from \"./viewer/LottieView\";\r\n\r\ninterface Props extends Omit<FileViewProps, \"file\"> {\r\n    thumbnail: AirgramThumbnail;\r\n}\r\n\r\nexport const Thumbnail: FC<Props> = ({ thumbnail, height: heightProp, width: widthProp, ...other }) => {\r\n    const { format, file, height: thumbnailHeight, width: thumbnailWidth } = thumbnail ?? {};\r\n\r\n    const height = heightProp ?? thumbnailHeight;\r\n    const width = widthProp ?? thumbnailWidth;\r\n\r\n    switch (format._) {\r\n        case \"thumbnailFormatJpeg\":\r\n        case \"thumbnailFormatPng\":\r\n        case \"thumbnailFormatWebp\":\r\n        case \"thumbnailFormatGif\":\r\n            return <ImageView file={file} height={height} width={width} {...other} />;\r\n        case \"thumbnailFormatTgs\":\r\n            return <LottieView file={file} height={height} width={width} {...other} />;\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n","import { StickerSet } from \"@airgram/core\";\r\nimport { FC } from \"react\";\r\nimport Sticker, { STICKER_SIZE } from \"./Sticker\";\r\nimport { Thumbnail } from \"./Thumbnail\";\r\nimport { FileViewProps } from \"./viewer/FileViewProps\";\r\n\r\ninterface Props extends Omit<FileViewProps, \"file\"> {\r\n    set?: StickerSet;\r\n}\r\n\r\nexport const StickerSetThumbnail: FC<Props> = ({ set, height = STICKER_SIZE.small, width = STICKER_SIZE.small }) => {\r\n    if (set?.thumbnail) {\r\n        return <Thumbnail thumbnail={set.thumbnail} height={height} width={width} />;\r\n    }\r\n\r\n    if (set?.stickers?.[0]) {\r\n        return <Sticker sticker={set?.stickers[0]} height={height} width={width} />;\r\n    }\r\n\r\n    return null;\r\n};\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const StoreProvider: FC = ({ children }) => (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n);\r\n","import { Grid, GridContainerProps } from \"@geist-ui/react\";\r\nimport { FC } from \"react\";\r\n\r\nexport const TOOLBAR_HEIGHT = 64;\r\n\r\nexport const Toolbar: FC<GridContainerProps> = (props) => (\r\n    <Grid.Container wrap=\"nowrap\" height={`${TOOLBAR_HEIGHT}px`} alignItems=\"center\" {...props} />\r\n);\r\n","import { ComponentProps, FC } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { User } from \"@geist-ui/react\";\r\n\r\nimport styles from \"./UserCard.module.css\";\r\n\r\nexport const UserCard: FC<ComponentProps<typeof User>> = ({ className, ...other }) => (\r\n    <User className={cx(styles.card, className)} {...other} />\r\n);\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", { message: error as string });\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", { message: error as string });\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", { message: error as string });\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <RenderQrCode includeMargin renderAs=\"svg\" value={state.link} size={240} />\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useContext } from \"react\";\r\nimport { StoreContext } from \"../../components\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\nimport { Spinner } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useContext } from \"react\";\r\nimport { CenterLayout, StoreContext } from \"../components\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    console.log(Authorization.state._);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat } from \"@airgram/web\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components\";\r\nimport { HandlersBuilder } from \"../utils\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<number, Chat>();\r\n\r\nexport class ChatStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    chat?: Chat = undefined;\r\n    setChat(chat: Chat) {\r\n        this.chat = chat;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private chatId: number) {\r\n        if (cache.has(chatId)) {\r\n            const chat = cache.get(chatId);\r\n            this.chat = chat;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            chat: observable.ref,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            if (ctx.update.chat.id === this.chatId) {\r\n                this.chat = ctx.update.chat;\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        if (this.chat) {\r\n            return this.chat;\r\n        }\r\n\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            const chat = await this.rootStore.Airgram.api.getChat({ chatId: this.chatId });\r\n\r\n            if (chat.response._ === \"error\") {\r\n                throw chat.response;\r\n            }\r\n\r\n            this.setChat(chat.response);\r\n            cache.set(this.chatId, chat.response);\r\n\r\n            return this.chat;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function useChat(chatId: number) {\r\n    const [store] = useState(() => new ChatStore(rootStore, chatId));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store.chat;\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Message, Messages, MessageSticker } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport { ChatStore } from \"./ChatStore\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst limit = 100;\r\n\r\nexport interface StickerMessage extends Message {\r\n    content: MessageSticker;\r\n}\r\n\r\ninterface IMessagesStore {\r\n    startMessage: number;\r\n    canLoad: boolean;\r\n    messages?: StickerMessage[];\r\n    messageIds: Map<number, boolean>;\r\n    stickerIds: Map<string, boolean>;\r\n}\r\n\r\nconst cache = new Map<number, IMessagesStore>();\r\n\r\nexport default class StickerMessagesStore implements IMessagesStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    chatStore: ChatStore;\r\n    isRestored = false;\r\n    startMessage = 0;\r\n    canLoad = true;\r\n    messages: StickerMessage[] = [];\r\n    insertMessage(message: StickerMessage) {\r\n        this.messages.unshift(message);\r\n    }\r\n    addMessage(message: StickerMessage) {\r\n        this.messages.push(message);\r\n    }\r\n    messageIds = new Map<number, boolean>();\r\n    stickerIds = new Map<string, boolean>();\r\n\r\n    processed: number = 0;\r\n    total: number = 0;\r\n    batch: number = 0;\r\n    setLoadingProgress(processed: number, total: number, batch: number) {\r\n        this.processed = processed;\r\n        this.total = total;\r\n        this.batch = batch;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private chatId: number) {\r\n        this.chatStore = new ChatStore(rootStore, chatId);\r\n\r\n        if (cache.has(chatId)) {\r\n            const values = cache.get(chatId);\r\n            Object.assign(this, values);\r\n            this.isRestored = true;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            messages: observable.shallow,\r\n            messageIds: observable.shallow,\r\n            stickerIds: observable.shallow,\r\n            dispose: false,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.chatStore.dispose();\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            if (ctx.update.chat.id === this.chatId) {\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateNewMessage, (ctx, next) => {\r\n            const message = ctx.update.message;\r\n            if (message.chatId === this.chatId && !this.messageIds.has(message.id)) {\r\n                this.messageIds.set(message.id, true);\r\n\r\n                if (message.content._ === \"messageSticker\" && !this.stickerIds.has(message.content.sticker.setId)) {\r\n                    this.addMessage(message as unknown as StickerMessage);\r\n                    this.stickerIds.set(message.content.sticker.setId, true);\r\n                }\r\n\r\n                this.save();\r\n            }\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    init() {\r\n        if (this.isRestored) {\r\n            return;\r\n        }\r\n\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.canLoad || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        this.setLoadingProgress(0, 0, 0);\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            await this.chatStore.load();\r\n\r\n            while (true) {\r\n                const history = await this.rootStore.Airgram.api.getChatHistory({\r\n                    chatId: this.chatId,\r\n                    limit,\r\n                    fromMessageId: this.startMessage,\r\n                });\r\n\r\n                if (history.response._ === \"error\") {\r\n                    throw history.response;\r\n                }\r\n\r\n                const messages = history.response as Messages;\r\n\r\n                if (messages.totalCount === 0) {\r\n                    this.canLoad = false;\r\n                    break;\r\n                }\r\n\r\n                const lastMessage = messages.messages![messages.messages!.length - 1];\r\n                this.startMessage = lastMessage.id;\r\n\r\n                const stickerMessages = Array.from(\r\n                    messages\r\n                        .messages!.reduce((acc, message) => {\r\n                            if (\r\n                                message.content._ === \"messageSticker\" &&\r\n                                !acc.has(message.content.sticker.setId) &&\r\n                                !this.stickerIds.has(message.content.sticker.setId)\r\n                            ) {\r\n                                acc.set(message.content.sticker.setId, message as any);\r\n                            }\r\n                            return acc;\r\n                        }, new Map<string, StickerMessage>())\r\n                        .values()\r\n                ).filter((x) => !this.messageIds.has(x.id));\r\n\r\n                for (const message of stickerMessages) {\r\n                    const content = message.content as MessageSticker;\r\n\r\n                    this.messageIds.set(message.id, true);\r\n                    this.stickerIds.set(content.sticker.setId, true);\r\n                    this.insertMessage(message);\r\n                }\r\n\r\n                this.setLoadingProgress(\r\n                    this.processed + messages.totalCount,\r\n                    this.total + messages.totalCount,\r\n                    this.batch + 1\r\n                );\r\n\r\n                this.save();\r\n\r\n                if (stickerMessages.length) {\r\n                    return stickerMessages.length;\r\n                }\r\n            }\r\n        } finally {\r\n            this.save();\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    save() {\r\n        const { messages, messageIds, stickerIds, startMessage, canLoad } = this;\r\n        cache.set(this.chatId, { messages, messageIds, stickerIds, startMessage, canLoad });\r\n    }\r\n}\r\n","import { FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Text, Loading } from \"@geist-ui/react\";\r\n\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\n\r\ninterface Props {\r\n    store: StickerMessagesStore;\r\n}\r\n\r\nconst Loader: FC<Props> = ({ store }) => {\r\n    return store.isLoading ? (\r\n        <Loading>\r\n            <Text span type=\"secondary\">\r\n                Loading messages ({store.processed}/{store.total} batch: {store.batch})\r\n            </Text>\r\n        </Loading>\r\n    ) : (\r\n        <Text span type=\"secondary\">\r\n            Scroll to start loading\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default observer(Loader);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { User } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components\";\r\nimport { HandlersBuilder } from \"../utils\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<number, User>();\r\n\r\nexport class UserStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    user?: User = undefined;\r\n    setUser(user: User) {\r\n        this.user = user;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private userId: number) {\r\n        if (cache.has(userId)) {\r\n            const user = cache.get(userId);\r\n            this.user = user;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            user: observable.ref,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateUser, (ctx, next) => {\r\n            if (ctx.update.user.id === this.userId) {\r\n                this.user = ctx.update.user;\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        if (this.user) {\r\n            return this.user;\r\n        }\r\n\r\n        const user = await this.rootStore.Airgram.api.getUser({ userId: this.userId });\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        this.setUser(user.response);\r\n        cache.set(this.userId, user.response);\r\n\r\n        return this.user;\r\n    }\r\n}\r\n\r\nexport function useUser(userId: number) {\r\n    const [store] = useState(() => new UserStore(rootStore, userId));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store.user;\r\n}\r\n","import { MessageSenderUnion } from \"@airgram/web\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components\";\r\nimport { ChatStore } from \"./ChatStore\";\r\nimport RootStore from \"./RootStore\";\r\nimport { UserStore } from \"./UserStore\";\r\n\r\nexport class MessageSenderStore {\r\n    userStore?: UserStore;\r\n    chatStore?: ChatStore;\r\n\r\n    constructor(private rootStore: RootStore, private senderId: MessageSenderUnion) {\r\n        if (senderId._ === \"messageSenderUser\") {\r\n            this.userStore = new UserStore(rootStore, senderId.userId);\r\n        }\r\n\r\n        if (senderId._ === \"messageSenderChat\") {\r\n            this.chatStore = new ChatStore(rootStore, senderId.chatId);\r\n        }\r\n\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    dispose() {\r\n        this.userStore?.dispose();\r\n        this.chatStore?.dispose();\r\n    }\r\n\r\n    get user() {\r\n        return this.userStore?.user;\r\n    }\r\n\r\n    get chat() {\r\n        return this.chatStore?.chat;\r\n    }\r\n\r\n    async load() {\r\n        if (this.senderId._ === \"messageSenderUser\") {\r\n            return this.userStore?.load();\r\n        }\r\n\r\n        if (this.senderId._ === \"messageSenderChat\") {\r\n            return this.chatStore?.load();\r\n        }\r\n    }\r\n}\r\n\r\nexport function useMessageSenderStore(senderId: MessageSenderUnion) {\r\n    const [store] = useState(() => new MessageSenderStore(rootStore, senderId));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store;\r\n}\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { HTMLProps, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Sticker, UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport { useMessageSenderStore } from \"../../store/MessageSenderStore\";\r\nimport { StickerMessage } from \"../../store/StickerMessagesStore\";\r\nimport styles from \"./Message.module.css\";\r\n\r\ninterface MessageProps extends HTMLProps<HTMLDivElement> {\r\n    message: StickerMessage;\r\n}\r\n\r\nconst Message = ({ message, ...other }: MessageProps) => {\r\n    const sticker = message.content.sticker;\r\n\r\n    const sender = useMessageSenderStore(message.senderId);\r\n    const senderPhoto = useFileStore(sender.user?.profilePhoto?.small ?? sender.chat?.photo?.small, \"base64\", {\r\n        priority: 32,\r\n    });\r\n\r\n    useEffect(() => {\r\n        sender.load();\r\n    }, [sender]);\r\n\r\n    return (\r\n        <div className={styles.root} {...other}>\r\n            <Grid.Container direction=\"column\">\r\n                <Grid>\r\n                    <UserCard\r\n                        src={senderPhoto}\r\n                        name={sender.user ? sender.user.firstName + \" \" + sender.user.lastName : sender.chat?.title}\r\n                    >\r\n                        {new Date(message.date * 1000).toLocaleString()}\r\n                    </UserCard>\r\n                </Grid>\r\n                <Grid className={styles.container} alignItems=\"flex-start\">\r\n                    <NavLink to={`/set/${sticker.setId}`}>\r\n                        <Sticker sticker={sticker} />\r\n                    </NavLink>\r\n                </Grid>\r\n            </Grid.Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default observer(Message);\r\n","import { Grid, Text, useMediaQuery } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Redirect, RouteComponentProps } from \"react-router\";\r\nimport { useVirtual } from \"react-virtual\";\r\nimport {\r\n    CenterLayout,\r\n    List,\r\n    MobileBackButton,\r\n    StoreContext,\r\n    Toolbar,\r\n    UserCard,\r\n    virtialContainerStyle,\r\n    virtualSizeStyles,\r\n} from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\nimport styles from \"./Conversation.module.css\";\r\nimport Loader from \"./Loader\";\r\nimport Message from \"./Message\";\r\n\r\nconst PLACEHOLDER_HEIGHT = 1000;\r\nconst MESSAGE_HEIGHT = 420;\r\n\r\nlet scrollTop = new Map<number, number>();\r\n\r\nexport interface Props extends RouteComponentProps<{ id?: string | undefined }> {}\r\n\r\nconst Conversation: FC<Props> = ({ match }) => {\r\n    const id = match.params.id!;\r\n    const chatId = parseInt(id);\r\n\r\n    const rootStore = useContext(StoreContext);\r\n    const { Chats } = rootStore;\r\n    const [store] = useState(() => new StickerMessagesStore(rootStore, chatId));\r\n\r\n    const chat = store.chatStore.chat;\r\n    const messages = store.messages;\r\n\r\n    const photo = useFileStore(chat?.photo?.small, \"base64\");\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    let size = messages.length;\r\n    if (store.canLoad) {\r\n        size++;\r\n    }\r\n\r\n    const estimateSize = useCallback(\r\n        (index) => (store.canLoad && index === 0 ? PLACEHOLDER_HEIGHT : MESSAGE_HEIGHT),\r\n        [store.canLoad]\r\n    );\r\n\r\n    const { virtualItems, totalSize, scrollToOffset } = useVirtual({\r\n        size,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    const scrollView = useCallback(\r\n        (count?: number) => {\r\n            if (parentRef.current && count) {\r\n                const offset = MESSAGE_HEIGHT * count;\r\n\r\n                parentRef.current!.scrollTop += offset;\r\n                scrollToOffset(parentRef.current!.scrollTop);\r\n            }\r\n        },\r\n        [scrollToOffset]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (scrollTop.has(chatId)) {\r\n            scrollToOffset(scrollTop.get(chatId) ?? 0);\r\n        } else {\r\n            scrollView(store.messages.length);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (Chats.chats.has(chatId)) {\r\n            (async () => {\r\n                const loaded = await store.init();\r\n                scrollView(loaded);\r\n            })();\r\n        }\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n    }, [Chats.chats, chatId, scrollView, store]);\r\n\r\n    const tryLoadMessages = useCallback(async () => {\r\n        if (parentRef.current && parentRef.current.scrollTop < PLACEHOLDER_HEIGHT - 200) {\r\n            const loaded = await store.load();\r\n            scrollView(loaded);\r\n        }\r\n    }, [scrollView, store]);\r\n\r\n    useEffect(() => {\r\n        if (!store.canLoad) {\r\n            parentRef.current!.scrollTop -= PLACEHOLDER_HEIGHT;\r\n        }\r\n    }, [store.canLoad]);\r\n\r\n    useEffect(() => {\r\n        tryLoadMessages();\r\n    }, [tryLoadMessages, messages.length]);\r\n\r\n    const handleScroll = useCallback(\r\n        (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n            tryLoadMessages();\r\n            const target = event.target as HTMLDivElement;\r\n            scrollTop.set(chatId, target.scrollTop);\r\n        },\r\n        [chatId, tryLoadMessages]\r\n    );\r\n\r\n    const isMobile = useMediaQuery(\"sm\", { match: \"down\" });\r\n\r\n    if (!id && isMobile) {\r\n        return <Redirect to=\"/chats\" />;\r\n    }\r\n\r\n    if (!id) {\r\n        return (\r\n            <CenterLayout>\r\n                <Text type=\"secondary\">Please choose a conversation </Text>\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <MobileBackButton />\r\n                <Grid xs>\r\n                    <UserCard src={photo} name={chat?.title} />\r\n                </Grid>\r\n            </Toolbar>\r\n            <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n                <List ref={parentRef as any} onScroll={handleScroll}>\r\n                    <div style={virtialContainerStyle(totalSize)}>\r\n                        {virtualItems.map(({ index, start, size }) => {\r\n                            let realIndex = index;\r\n                            if (store.canLoad) {\r\n                                realIndex--;\r\n                            }\r\n\r\n                            const style = virtualSizeStyles(size, start);\r\n\r\n                            if (realIndex < 0)\r\n                                return (\r\n                                    <Grid.Container gap={0} alignItems=\"flex-end\" key={index} style={style}>\r\n                                        <Grid xs justify=\"center\" padding=\"50px\">\r\n                                            <Loader store={store} />\r\n                                        </Grid>\r\n                                    </Grid.Container>\r\n                                );\r\n\r\n                            const message = messages[realIndex];\r\n\r\n                            return <Message key={message.id} style={style} message={message} />;\r\n                        })}\r\n                    </div>\r\n                </List>\r\n            </Grid.Container>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Conversation);\r\n","import { Button, Grid, Spinner } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useContext, useEffect } from \"react\";\r\nimport { FiLogOut } from \"react-icons/fi\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { StoreContext, UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\nimport styles from \"./User.module.css\";\r\n\r\nconst User: FC = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const photo = useFileStore(Authorization.user?.profilePhoto?.small, \"base64\", { priority: 32 });\r\n\r\n    useEffect(() => {\r\n        Authorization.getMe();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!Authorization.user) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" alignItems=\"center\" xs>\r\n            <NavLink className={styles.user} to=\"/stickers\">\r\n                <UserCard src={photo} name=\"My stickers\">\r\n                    {Authorization.user.username}\r\n                </UserCard>\r\n            </NavLink>\r\n\r\n            <Button auto type=\"abort\" iconRight={<FiLogOut />} onClick={() => Authorization.logOut()} />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(User);\r\n","import { FC, memo } from \"react\";\r\nimport cx from \"classnames\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { Chat } from \"../../store/ChatsStore\";\r\nimport { UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport styles from \"./ChatRow.module.css\";\r\n\r\ninterface ChatRowProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\r\n    chat: Chat;\r\n}\r\n\r\nconst ChatRow: FC<ChatRowProps> = ({ chat, className, ...other }) => {\r\n    const photo = useFileStore(chat.info?.photo?.small, \"base64\");\r\n\r\n    return (\r\n        <NavLink\r\n            to={`/conversation/${chat.info?.id}`}\r\n            className={cx(styles.chat, className)}\r\n            activeClassName={styles[\"active_chat\"]}\r\n            {...other}\r\n        >\r\n            <Grid.Container className={styles.container} alignItems=\"center\" height=\"100%\" width=\"100%\">\r\n                <UserCard src={photo} name={chat.info?.title} />\r\n            </Grid.Container>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default memo(ChatRow);\r\n","import { FC, useContext, useEffect, useRef, useCallback } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useVirtual } from \"react-virtual\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, List } from \"../../components\";\r\n\r\nimport ChatRow from \"./ChatRow\";\r\n\r\nimport styles from \"./Chats.module.css\";\r\n\r\nlet scrollTop = 0;\r\n\r\nconst Chats: FC = () => {\r\n    const { Chats } = useContext(StoreContext);\r\n\r\n    const itemData = Chats.chatsList;\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const rowVirtualizer = useVirtual({\r\n        size: itemData.length,\r\n        parentRef,\r\n        estimateSize: useCallback(() => 64, []),\r\n    });\r\n\r\n    useEffect(() => {\r\n        rowVirtualizer.scrollToOffset(scrollTop);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const target = event.target as HTMLDivElement;\r\n        scrollTop = target.scrollTop;\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n            <List ref={parentRef as any} onScroll={handleScroll}>\r\n                <div\r\n                    style={{\r\n                        height: `${rowVirtualizer.totalSize}px`,\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                    }}\r\n                >\r\n                    {rowVirtualizer.virtualItems.map(({ index, size, start }) => {\r\n                        const chat = itemData[index];\r\n                        return (\r\n                            <ChatRow\r\n                                key={chat.info?.id ?? index}\r\n                                chat={chat}\r\n                                style={{\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    left: 0,\r\n                                    width: \"100%\",\r\n                                    height: `${size}px`,\r\n                                    transform: `translateY(${start}px)`,\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Chats);\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FC } from \"react\";\r\n\r\nimport User from \"./User\";\r\nimport Chats from \"./Chats\";\r\nimport { Toolbar } from \"../../components\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <User />\r\n            </Toolbar>\r\n            <Chats />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Menu);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { StickerSet } from \"@airgram/core\";\r\nimport { useToasts } from \"@geist-ui/react\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store as rootStore } from \"../components\";\r\nimport { HandlersBuilder } from \"../utils\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<string, StickerSet>();\r\n\r\nexport default class StickerSetStore {\r\n    set?: StickerSet = undefined;\r\n    setSet(value: StickerSet) {\r\n        this.set = value;\r\n        cache.set(this.setId, this.set!);\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private setId: string, private toasts: ReturnType<typeof useToasts>) {\r\n        if (cache.has(this.setId)) {\r\n            const set = cache.get(this.setId);\r\n            this.setSet(set!);\r\n        }\r\n        makeAutoObservable(this, { set: observable.ref });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n    dispose() {\r\n        rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateStickerSet, (ctx, next) => {\r\n            if (ctx.update.stickerSet.id === this.setId) {\r\n                this.setSet(ctx.update.stickerSet);\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load() {\r\n        if (this.set) {\r\n            return this.set;\r\n        }\r\n\r\n        try {\r\n            const set = await this.rootStore.Airgram.api.getStickerSet({ setId: this.setId });\r\n\r\n            if (set.response._ === \"error\") {\r\n                throw set.response;\r\n            }\r\n\r\n            this.setSet(set.response);\r\n        } finally {\r\n        }\r\n    }\r\n\r\n    async install() {\r\n        const [, setToast] = this.toasts;\r\n\r\n        try {\r\n            const request = await this.rootStore.Airgram.api.changeStickerSet({\r\n                setId: this.setId,\r\n                isInstalled: true,\r\n                isArchived: false,\r\n            });\r\n\r\n            if (request.response._ === \"error\") {\r\n                throw request.response;\r\n            }\r\n\r\n            setToast({\r\n                actions: [\r\n                    {\r\n                        name: \"Uninstall\",\r\n                        handler: (_, cancel) => {\r\n                            cancel();\r\n                            rootStore.Airgram.api.changeStickerSet({\r\n                                setId: this.setId,\r\n                                isArchived: true,\r\n                            });\r\n                        },\r\n                    },\r\n                ],\r\n                text: \"Sticker set has been installed\",\r\n            });\r\n        } catch {\r\n            setToast({\r\n                type: \"error\",\r\n                text: \"Error installing sticker set\",\r\n            });\r\n        }\r\n    }\r\n\r\n    async delete() {\r\n        const [, setToast] = this.toasts;\r\n\r\n        try {\r\n            const request = await this.rootStore.Airgram.api.changeStickerSet({ setId: this.setId, isArchived: true });\r\n\r\n            if (request.response._ === \"error\") {\r\n                throw request.response;\r\n            }\r\n\r\n            setToast({\r\n                actions: [\r\n                    {\r\n                        name: \"Restore\",\r\n                        handler: (_, cancel) => {\r\n                            cancel();\r\n                            rootStore.Airgram.api.changeStickerSet({\r\n                                setId: this.setId,\r\n                                isInstalled: true,\r\n                                isArchived: false,\r\n                            });\r\n                        },\r\n                    },\r\n                ],\r\n                text: \"Sticker set has been deleted\",\r\n            });\r\n        } catch {\r\n            setToast({\r\n                type: \"error\",\r\n                text: \"Error deleting sticker set\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function useStickerSetStore(setId: string): StickerSetStore {\r\n    const toasts = useToasts();\r\n    const [store] = useState(() => new StickerSetStore(rootStore, setId, toasts));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store;\r\n}\r\n","import { Button } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport { MdAddBox, MdDelete } from \"react-icons/md\";\r\nimport StickerSetStore from \"../../store/StickerSetStore\";\r\n\r\ninterface Props {\r\n    store: StickerSetStore;\r\n}\r\n\r\nconst SetActions: FC<Props> = ({ store }) => {\r\n    const set = store.set;\r\n\r\n    return (\r\n        <>\r\n            {(!set?.isInstalled || set.isArchived) && (\r\n                <Button auto type=\"abort\" iconRight={<MdAddBox />} onClick={() => store.install()} />\r\n            )}\r\n            {set?.isInstalled && !set.isArchived && (\r\n                <Button auto type=\"abort\" iconRight={<MdDelete />} onClick={() => store.delete()} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(SetActions);\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { List, MobileBackButton, Sticker, Toolbar, UserCard } from \"../../components\";\r\nimport { useStickerSetStore } from \"../../store/StickerSetStore\";\r\nimport styles from \"./Set.module.css\";\r\nimport SetActions from \"./SetActions\";\r\n\r\ninterface Props extends RouteComponentProps<{ id?: string | undefined }> {}\r\n\r\nconst Set: FC<Props> = ({ match }) => {\r\n    const setId = match.params.id!;\r\n\r\n    const state = useStickerSetStore(setId);\r\n    const set = state.set;\r\n\r\n    useEffect(() => {\r\n        state.load();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <MobileBackButton />\r\n                <Grid>\r\n                    <UserCard name={set?.title} />\r\n                </Grid>\r\n                <Grid xs justify=\"flex-end\">\r\n                    <SetActions store={state} />\r\n                </Grid>\r\n            </Toolbar>\r\n            <List className={styles.root}>\r\n                <Grid.Container justify=\"flex-start\">\r\n                    {set?.stickers.map((sticker) => (\r\n                        <Grid key={sticker.sticker.id} xs={24} sm={12} md={12} lg={8} xl={6} justify=\"center\">\r\n                            <Sticker sticker={sticker} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid.Container>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Set);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { StickerSetInfo } from \"@airgram/web\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { DropResult } from \"react-beautiful-dnd\";\r\nimport { store as rootStore } from \"../components\";\r\nimport { HandlersBuilder } from \"../utils\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport class StickersStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    isReordering = false;\r\n    setReordering(value: boolean) {\r\n        this.isReordering = value;\r\n    }\r\n    async reorderSets(result: DropResult) {\r\n        if (!this.sets) {\r\n            return;\r\n        }\r\n        const { source, destination } = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        const sourceSet = this.sets[source.index];\r\n\r\n        if (source.index === destination.index) {\r\n            return;\r\n        }\r\n\r\n        this.sets.splice(source.index, 1);\r\n        this.sets.splice(destination.index, 0, sourceSet);\r\n\r\n        const stickerSetIds = this.sets.map((set) => set.id);\r\n\r\n        try {\r\n            const reorder = await this.rootStore.Airgram.api.reorderInstalledStickerSets({ stickerSetIds });\r\n\r\n            if (reorder.response._ === \"error\") {\r\n                throw reorder.response;\r\n            }\r\n        } catch {\r\n            this.sets.splice(destination.index, 0, sourceSet);\r\n            this.sets.splice(source.index, 1);\r\n        }\r\n    }\r\n\r\n    sets?: StickerSetInfo[] = undefined;\r\n    setStickers(sets: StickerSetInfo[]) {\r\n        this.sets = sets;\r\n    }\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            sets: observable.shallow,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateInstalledStickerSets, (ctx, next) => {\r\n            this.load(true);\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async load(force = false) {\r\n        if (!force && this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        if (!force && this.sets) {\r\n            return this.sets;\r\n        }\r\n\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            const stickers = await this.rootStore.Airgram.api.getInstalledStickerSets();\r\n            if (stickers.response._ === \"error\") {\r\n                throw stickers.response;\r\n            }\r\n\r\n            this.setStickers(stickers.response.sets);\r\n            return stickers.response.sets;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n    toggleReordering() {\r\n        this.setReordering(!this.isReordering);\r\n    }\r\n}\r\n\r\nexport function useStickersStore(): StickersStore {\r\n    const [store] = useState(() => new StickersStore(rootStore));\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return store;\r\n}\r\n","import { StickerSetInfo } from \"@airgram/web\";\r\nimport { Button, Grid, Spacer, Text } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useEffect, useRef } from \"react\";\r\nimport { MdOpenInFull } from \"react-icons/md\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useVirtual } from \"react-virtual\";\r\nimport {\r\n    List,\r\n    Sticker,\r\n    StickerSetThumbnail,\r\n    Toolbar,\r\n    virtialContainerStyle,\r\n    virtualSizeStyles,\r\n} from \"../../components\";\r\nimport { STICKER_SIZE } from \"../../components/Sticker\";\r\nimport { useStickerSetStore } from \"../../store/StickerSetStore\";\r\nimport SetActions from \"../Set/SetActions\";\r\nimport styles from \"./InlineSet.module.css\";\r\n\r\ninterface Props {\r\n    setInfo: StickerSetInfo;\r\n    hideToolbar?: boolean;\r\n    hideControls?: boolean;\r\n    hideList?: boolean;\r\n}\r\n\r\nconst InlineSet: FC<Props> = ({ hideToolbar = false, hideControls = false, hideList = false, setInfo }) => {\r\n    const store = useStickerSetStore(setInfo.id);\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n    }, [store]);\r\n\r\n    const set = store.set;\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const estimateSize = useCallback(() => STICKER_SIZE.default + 12, []);\r\n\r\n    const { virtualItems, totalSize } = useVirtual({\r\n        horizontal: true,\r\n        size: set?.stickers.length ?? 0,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            {!hideToolbar && (\r\n                <Toolbar>\r\n                    <StickerSetThumbnail set={set} height={26} width={26} />\r\n                    <Spacer w={0.5} />\r\n                    <Text small b>\r\n                        {set?.title}\r\n                    </Text>\r\n                    {!hideControls && (\r\n                        <Grid xs justify=\"flex-end\">\r\n                            <NavLink to={`/set/${setInfo.id}`}>\r\n                                <Button auto type=\"abort\" iconRight={<MdOpenInFull />} />\r\n                            </NavLink>\r\n                            <SetActions store={store} />\r\n                        </Grid>\r\n                    )}\r\n                </Toolbar>\r\n            )}\r\n            {!hideList && (\r\n                <Grid className={styles.list}>\r\n                    <List ref={parentRef as any}>\r\n                        <div style={virtialContainerStyle(totalSize, true)}>\r\n                            {virtualItems.map(({ index, start, size }) => {\r\n                                const sticker = set?.stickers[index];\r\n\r\n                                return (\r\n                                    <div key={index} style={virtualSizeStyles(size, start, true)}>\r\n                                        <Sticker sticker={sticker!} />\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </List>\r\n                </Grid>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(InlineSet);\r\n","import { StickerSetInfo } from \"@airgram/core\";\r\nimport { FC } from \"react\";\r\nimport { DraggableProvided } from \"react-beautiful-dnd\";\r\nimport { MdOutlineReorder } from \"react-icons/md\";\r\nimport { virtualSizeStyles } from \"../../components\";\r\nimport { StickersStore } from \"../../store/StickersStore\";\r\nimport InlineSet from \"./InlineSet\";\r\nimport styles from \"./Stickers.module.css\";\r\n\r\ninterface Props {\r\n    provided: DraggableProvided;\r\n    store: StickersStore;\r\n    set: StickerSetInfo;\r\n    index: number;\r\n    size: number;\r\n    start?: number;\r\n}\r\n\r\nexport const StickerSetRow: FC<Props> = ({ provided, store, index, set, size, start }) => {\r\n    return (\r\n        <div\r\n            ref={provided.innerRef}\r\n            key={index}\r\n            className={styles.setWrapper}\r\n            {...provided.draggableProps}\r\n            style={{ ...virtualSizeStyles(size, start ?? 0), ...provided.draggableProps.style }}\r\n        >\r\n            {store.isReordering && (\r\n                <div className={styles.dragHandle} {...provided.dragHandleProps}>\r\n                    <MdOutlineReorder />\r\n                </div>\r\n            )}\r\n            <InlineSet setInfo={set!} hideList={store.isReordering} hideControls={store.isReordering} />\r\n        </div>\r\n    );\r\n};\r\n","import { Button, Grid, Text } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useEffect, useMemo, useRef } from \"react\";\r\nimport { DragDropContext, Draggable, DraggableProvided, Droppable, DroppableProvided } from \"react-beautiful-dnd\";\r\nimport { MdSwapVert } from \"react-icons/md\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { useVirtual } from \"react-virtual\";\r\nimport { List, MobileBackButton, Toolbar, TOOLBAR_HEIGHT, virtialContainerStyle } from \"../../components\";\r\nimport { STICKER_SIZE } from \"../../components/Sticker\";\r\nimport { useStickersStore } from \"../../store/StickersStore\";\r\nimport { setRef } from \"../../utils\";\r\nimport styles from \"./Stickers.module.css\";\r\nimport { StickerSetRow } from \"./StickerSetRow\";\r\n\r\ninterface Props extends RouteComponentProps {}\r\n\r\nconst Stickers: FC<Props> = () => {\r\n    const store = useStickersStore();\r\n\r\n    useEffect(() => {\r\n        store.load();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const itemSize = useMemo(\r\n        () => TOOLBAR_HEIGHT + (store.isReordering ? 0 : STICKER_SIZE.default),\r\n        [store.isReordering]\r\n    );\r\n\r\n    const estimateSize = useCallback(() => itemSize, [itemSize]);\r\n\r\n    const { virtualItems, totalSize } = useVirtual({\r\n        size: store.sets?.length ?? 0,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <MobileBackButton />\r\n                <Grid xs>\r\n                    <Text>Stickers</Text>\r\n                </Grid>\r\n                <Grid>\r\n                    <Button\r\n                        auto\r\n                        type={store.isReordering ? \"secondary\" : \"abort\"}\r\n                        iconRight={<MdSwapVert />}\r\n                        onClick={() => store.toggleReordering()}\r\n                    />\r\n                </Grid>\r\n            </Toolbar>\r\n            <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n                <DragDropContext onDragEnd={(result) => store.reorderSets(result)}>\r\n                    <Droppable\r\n                        isDropDisabled={!store.isReordering}\r\n                        droppableId=\"sets\"\r\n                        mode=\"virtual\"\r\n                        renderClone={(provided, _, rubric) => (\r\n                            <StickerSetRow\r\n                                provided={provided}\r\n                                store={store}\r\n                                set={store.sets![rubric.source.index]}\r\n                                index={rubric.source.index}\r\n                                size={itemSize}\r\n                            />\r\n                        )}\r\n                    >\r\n                        {(provided: DroppableProvided) => (\r\n                            <List\r\n                                ref={(ref) => {\r\n                                    if (ref instanceof HTMLElement) {\r\n                                        setRef(parentRef, ref);\r\n                                        setRef(provided.innerRef, ref);\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <div style={virtialContainerStyle(totalSize)}>\r\n                                    {virtualItems.map(({ index, start }) => {\r\n                                        const set = store.sets?.[index]!;\r\n                                        return (\r\n                                            <Draggable\r\n                                                isDragDisabled={!store.isReordering}\r\n                                                draggableId={set.id}\r\n                                                index={index}\r\n                                                key={set.id}\r\n                                            >\r\n                                                {(provided: DraggableProvided) => (\r\n                                                    <StickerSetRow\r\n                                                        provided={provided}\r\n                                                        store={store}\r\n                                                        index={index}\r\n                                                        set={set}\r\n                                                        start={start}\r\n                                                        size={itemSize}\r\n                                                    />\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </List>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </Grid.Container>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Stickers);\r\n","import { Grid, useMediaQuery } from \"@geist-ui/react\";\r\nimport { ComponentProps } from \"react\";\r\nimport { Redirect, Route, RouteProps, Switch } from \"react-router\";\r\nimport Conversation from \"./Conversation/Conversation\";\r\nimport Menu from \"./Menu/Menu\";\r\nimport styles from \"./Root.module.css\";\r\nimport Set from \"./Set/Set\";\r\nimport Stickers from \"./Stickers/Stickers\";\r\n\r\nconst routes: RouteProps[] = [\r\n    {\r\n        path: \"/chats\",\r\n        component: Menu,\r\n    },\r\n    {\r\n        path: \"/stickers\",\r\n        component: Stickers,\r\n    },\r\n    {\r\n        path: \"/conversation/:id?\",\r\n        render: (props) => <Conversation key={props.match.params.id} {...props} />,\r\n    },\r\n    {\r\n        path: \"/set/:id?\",\r\n        render: (props) => <Set key={props.match.params.id} {...props} />,\r\n    },\r\n];\r\n\r\nfunction toRoute(route: RouteProps, index: number) {\r\n    return <Route key={index} {...route} />;\r\n}\r\n\r\nconst panelProps: ComponentProps<typeof Grid> = {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n};\r\n\r\nexport default function Root() {\r\n    const isMobile = useMediaQuery(\"sm\", { match: \"down\" });\r\n    const [menu, ...other] = routes;\r\n\r\n    return (\r\n        <Grid.Container gap={2} margin={0} width=\"100%\" height=\"100%\">\r\n            {isMobile ? (\r\n                <Grid {...panelProps} className={styles.panel} xs={24}>\r\n                    <Switch>\r\n                        {[menu, ...other].map(toRoute)}\r\n                        <Redirect to=\"chats\" />\r\n                    </Switch>\r\n                </Grid>\r\n            ) : (\r\n                <>\r\n                    <Grid {...panelProps} className={styles.panel} sm={8} md={6} lg={4} xl={2}>\r\n                        <Menu />\r\n                    </Grid>\r\n                    <Grid {...panelProps} className={styles.panel} sm={16} md={18} lg={20} xl={22}>\r\n                        <Switch>\r\n                            {other.map(toRoute)}\r\n                            <Redirect to=\"conversation\" />\r\n                        </Switch>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n}\r\n","import { Button, Grid, Link, Spacer, Text } from \"@geist-ui/react\";\r\nimport { useContext } from \"react\";\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\nimport { StoreContext } from \"../components\";\r\n\r\nconst Footer = () => {\r\n    const { Theme } = useContext(StoreContext);\r\n\r\n    const isDarktTheme = Theme.currentTheme === \"dark\";\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" gap={0} height=\"50px\" alignItems=\"center\">\r\n            <Spacer w={0.5} />\r\n            <Button\r\n                auto\r\n                type=\"abort\"\r\n                iconRight={isDarktTheme ? <FiMoon /> : <FiSun />}\r\n                onClick={() => Theme.toggleTheme()}\r\n            />\r\n\r\n            <div style={{ flex: 1 }} />\r\n            <Text span>\r\n                Made with{\" \"}\r\n                <Link underline href=\"https://airgram.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Airgram\r\n                </Link>\r\n                ,{\" \"}\r\n                <Link underline href=\"https://react.geist-ui.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Geist UI\r\n                </Link>{\" \"}\r\n                and <FiHeart color=\"red\" />\r\n            </Text>\r\n            <Spacer />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useContext, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { GeistProvider, CssBaseline, Page } from \"@geist-ui/react\";\n\nimport { StoreContext, CssThemeVariables } from \"./components\";\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\nimport Footer from \"./app/Footer\";\n\nfunction App() {\n    const { Theme, Chats } = useContext(StoreContext);\n\n    useEffect(() => {\n        Chats.load();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <GeistProvider themeType={Theme.currentTheme}>\n            <CssThemeVariables />\n            <CssBaseline />\n            <Page render=\"effect-seo\" scale={0.5} width=\"100%\" padding={0}>\n                <Page.Content paddingTop={0}>\n                    <AuthProvider>\n                        <Root />\n                    </AuthProvider>\n                </Page.Content>\n                <Page.Footer>\n                    <Footer />\n                </Page.Footer>\n            </Page>\n        </GeistProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { StoreProvider } from \"./components\";\n\nReactDOM.render(\n    <StoreProvider>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </StoreProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Stickers_root__3yWzd\",\"setWrapper\":\"Stickers_setWrapper__fAs7y\",\"dragHandle\":\"Stickers_dragHandle__186iY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Sticker_root__gZJDN\",\"sticker\":\"Sticker_sticker__27Rjf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatRow_chat__IbOPK\",\"active_chat\":\"ChatRow_active_chat__2ZRAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Root_panel__2Hl4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Message_container__L0WXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InlineSet_root__1p_bX\",\"list\":\"InlineSet_list__wg14G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"List_thumb__2th6t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"UserCard_card__3-Fjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Conversation_root__1cN7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__V0drn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chats_root__31lV_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Set_root__1thkL\"};"],"sourceRoot":""}