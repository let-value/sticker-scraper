{"version":3,"sources":["components/CenterLayout.tsx","components/CssThemeVariables.tsx","components/List.tsx","store/Airgram.ts","utils/HandlersBuilder.ts","store/AuthorizationStore.ts","store/ChatsStore.ts","store/ConnectionStore.ts","store/ThemeStore.ts","store/RootStore.ts","components/StoreProvider.tsx","components/Toolbar.tsx","components/UserCard.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","utils/convertBlob.ts","store/FileStore.ts","app/Menu/User.tsx","app/Menu/ChatRow.tsx","app/Menu/Chats.tsx","app/Menu/Menu.tsx","store/StickerMessagesStore.ts","app/Conversation/Message.tsx","app/Conversation/Conversation.tsx","app/Root.tsx","app/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx","app/Menu/ChatRow.module.css","app/Conversation/Message.module.css","components/CenterLayout.module.css","app/Root.module.css","components/UserCard.module.css","app/SignIn/QrCode.module.css","app/Menu/Chats.module.css","app/Conversation/Conversation.module.css"],"names":["CenterLayout","className","disablePadding","other","cx","styles","root","padding","document","documentElement","CssThemeVariables","theme","useTheme","useEffect","palette","Object","entries","key","value","style","setProperty","List","forwardRef","ref","children","refSetter","useCallback","scrollbarsRef","current","view","options","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","useSecretChats","prevInstance","undefined","createAirgram","a","api","destroy","newInstance","Airgram","HandlersBuilder","handlers","args","this","push","ctx","next","filter","_","length","Composer","compose","map","AuthorizationStore","rootStore","state","firstLaunch","user","add","UPDATE","updateAuthorizationState","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","build","makeAutoObservable","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","result","response","reset","resetAirgram","logOut","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","getMe","ChatsStore","chats","Map","updateNewChat","updateChat","chat","id","info","updateChatPosition","chatId","position","updateChatLastMessage","lastMessage","positions","find","x","list","updater","get","set","offsetOrder","chatsList","order","getChats","chatList","limit","Array","from","values","sort","b","BigInt","isPinned","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","middleware","updateConnectionState","context","STORAGE_KEY","initColor","window","matchMedia","matches","savedColor","localStorage","getItem","ThemeStore","currentTheme","newTheme","setItem","RootStore","events","EventEmitter","emit","listeners","eventName","Theme","Authorization","Connection","Chats","use","store","StoreContext","createContext","StoreProvider","Provider","Toolbar","props","Container","wrap","height","alignItems","UserCard","card","PhoneNumber","useContext","useState","lock","setLock","useForm","errors","formState","register","handleSubmit","setError","onSubmit","sendPhoneNumber","direction","alignContent","h3","margin","autoFocus","disabled","type","required","htmlType","ghost","onClick","observer","control","useController","defaultValue","name","rules","field","onChange","error","fieldState","sendCode","handleChange","event","target","codeInfo","label","sendPassword","Password","placeholder","passwordHint","codeArea","link","includeMargin","renderAs","size","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","scale","blobToLotty","blob","arrayBuffer","buffer","data","Uint8Array","output","pako","inflate","Blob","text","json","JSON","parse","blobToJson","Response","blobToText","blobToBase64","reader","FileReader","readAsDataURL","Promise","resolve","reject","onloadend","onerror","cache","FileStore","file","format","params","isLoading","content","updateFile","console","log","load","observable","addListener","removeListener","fileId","chachedValue","downloadFile","priority","download","readFilePart","useFileStore","useLocalStore","dispose","setFile","photo","profilePhoto","small","xs","src","firstName","lastName","username","flex","auto","iconRight","ChatRow","to","activeClassName","container","width","title","memo","scrollTop","itemData","parentRef","useRef","rowVirtualizer","useVirtual","estimateSize","scrollToOffset","handleScroll","justify","onScroll","totalSize","virtualItems","index","start","top","left","transform","StickerMessagesStore","isRestored","startMessage","canLoad","messages","messageIds","stickerIds","updateNewMessage","message","has","sticker","setId","save","assign","getChat","getChatHistory","fromMessageId","history","totalCount","stickerMessages","reduce","acc","unshift","isAnimated","useMemo","renderer","animationData","alt","gap","sender","PLACEHOLDER_HEIGHT","match","init","overscan","loadMessages","loaded","sm","md","onScrollStop","minHeight","measureRef","realIndex","Root","isMobile","useMediaQuery","path","component","Menu","Conversation","panel","lg","xl","render","Footer","isDarktTheme","w","toggleTheme","span","underline","href","rel","color","themeType","Content","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a389f91f.chunk.js","sourcesContent":["import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nexport const CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n","import { useTheme } from \"@geist-ui/react\";\r\nimport { useEffect, FC } from \"react\";\r\n\r\nconst root = document.documentElement;\r\n\r\nexport const CssThemeVariables: FC = () => {\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        const { palette } = theme;\r\n\r\n        for (const [key, value] of Object.entries(palette)) {\r\n            root.style.setProperty(\"--palette-\" + key, value);\r\n        }\r\n    }, [theme]);\r\n\r\n    return null;\r\n};\r\n","import { forwardRef, useCallback } from \"react\";\r\nimport Scrollbars, { ScrollbarProps } from \"react-custom-scrollbars-2\";\r\n\r\nexport const List = forwardRef<HTMLElement, ScrollbarProps>(({ style, children, ...other }, ref) => {\r\n    const refSetter = useCallback((scrollbarsRef: any) => {\r\n        if (scrollbarsRef && ref && typeof ref === \"object\") {\r\n            ref.current = scrollbarsRef.view;\r\n        } else if (scrollbarsRef && typeof ref === \"function\") {\r\n            ref?.(scrollbarsRef.view);\r\n        } else if (typeof ref === \"function\") {\r\n            ref?.(null);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Scrollbars ref={refSetter} style={{ ...style }} {...other}>\r\n            {children}\r\n        </Scrollbars>\r\n    );\r\n});\r\n","import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst options: AirgramConfig = {\r\n    //useTestDc: true,\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"error\",\r\n    logVerbosityLevel: 0,\r\n    useSecretChats: false,\r\n};\r\n\r\nlet prevInstance: Airgram | undefined = undefined;\r\n\r\nexport default async function createAirgram() {\r\n    if (prevInstance) {\r\n        await prevInstance.api.destroy();\r\n    }\r\n\r\n    const newInstance = new Airgram(options);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    prevInstance = newInstance;\r\n\r\n    return newInstance;\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { UpdateContext, UpdateUnion, ApiMethods, MiddlewareFn, Composer } from \"@airgram/core\";\r\n\r\ntype UpdateName = `${UPDATE}`;\r\n\r\ntype UpdateLookup = {\r\n    [P in UpdateName]: Extract<UpdateUnion, { _: P }>;\r\n};\r\n\r\ntype MethodName = {\r\n    [K in keyof ApiMethods]: K;\r\n}[keyof ApiMethods];\r\n\r\ntype MethodsLookup = {\r\n    [P in MethodName]: ReturnType<ApiMethods[P]> extends Promise<infer PT> ? PT : never;\r\n};\r\n\r\ntype ActionName = UpdateName | MethodName;\r\n\r\ntype PickContext<TAction extends string> = TAction extends UPDATE\r\n    ? UpdateContext<UpdateLookup[TAction]>\r\n    : TAction extends MethodName\r\n    ? MethodsLookup[TAction]\r\n    : never;\r\n\r\ntype Handler<TAction extends ActionName> = MiddlewareFn<PickContext<TAction>>;\r\n\r\ntype HandlerRecord<TAction extends ActionName> = [action: TAction, handler: Handler<TAction>];\r\n\r\nexport default class HandlersBuilder {\r\n    private handlers: Array<HandlerRecord<any>> = [];\r\n    add<TAction extends ActionName>(...args: HandlerRecord<TAction>) {\r\n        this.handlers.push(args);\r\n        return this;\r\n    }\r\n\r\n    build(): MiddlewareFn {\r\n        return (ctx, next) => {\r\n            const handlers = this.handlers.filter(([update]) => update === ctx._) ?? [];\r\n\r\n            if (handlers.length) {\r\n                return Composer.compose(handlers.map(([, handler]) => handler))(ctx, next);\r\n            }\r\n\r\n            return next();\r\n        };\r\n    }\r\n}\r\n","import { AuthorizationStateUnion, User } from \"@airgram/core\";\r\nimport { UPDATE, AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    firstLaunch = true;\r\n    user?: User;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            handlers: false,\r\n        });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateAuthorizationState, (ctx) => {\r\n            const state = ctx.update.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            this.state = state;\r\n        })\r\n        .build();\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    async logOut() {\r\n        await this.rootStore.Airgram.api.logOut();\r\n        this.firstLaunch = true;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n\r\n    async getMe() {\r\n        const user = await this.rootStore.Airgram.api.getMe();\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        this.user = user.response as User;\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat as AirgramChat, ChatPosition, Message } from \"@airgram/core\";\r\n\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport interface Chat {\r\n    info?: AirgramChat;\r\n    position?: ChatPosition;\r\n    lastMessage?: Message;\r\n}\r\n\r\nexport default class ChatsStore {\r\n    chats = new Map<number, Chat>();\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, { handlers: false });\r\n    }\r\n\r\n    updateChat(chatId: number, updater: (chat: Chat) => Chat | void) {\r\n        let chat = this.chats.get(chatId);\r\n        if (!chat) {\r\n            chat = {};\r\n        }\r\n\r\n        chat = updater(chat!) ?? chat;\r\n        this.chats.set(chatId, chat!);\r\n    }\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            this.updateChat(ctx.update.chat.id, (chat) => {\r\n                chat.info = ctx.update.chat;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatPosition, (ctx, next) => {\r\n            this.updateChat(ctx.update.chatId, (chat) => {\r\n                chat.position = ctx.update.position;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatLastMessage, (ctx, next) => {\r\n            this.updateChat(ctx.update.chatId, (chat) => {\r\n                chat.lastMessage = ctx.update.lastMessage;\r\n            });\r\n\r\n            const position = ctx.update.positions.find((x) => x.list._ === \"chatListMain\");\r\n\r\n            if (position) {\r\n                this.updateChat(ctx.update.chatId, (chat) => {\r\n                    chat.position = position;\r\n                });\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    load() {\r\n        let offsetOrder = \"9223372036854775807\";\r\n\r\n        if (this.chatsList.length) {\r\n            const order = this.chatsList[this.chatsList.length - 1].position?.order;\r\n            if (order) {\r\n                offsetOrder = order;\r\n            }\r\n        }\r\n\r\n        this.rootStore.Airgram.api.getChats({\r\n            chatList: { _: \"chatListMain\" },\r\n            limit: 10,\r\n            offsetOrder,\r\n        });\r\n    }\r\n\r\n    get chatsList() {\r\n        return Array.from(this.chats.values())\r\n            .sort((a, b) => (BigInt(a.position?.order ?? 0) < BigInt(b.position?.order ?? 0) ? 0 : -1))\r\n            .sort((a, b) => {\r\n                const x = a.position?.isPinned;\r\n                const y = b.position?.isPinned;\r\n                return x === y ? 0 : x ? -1 : 1;\r\n            });\r\n    }\r\n}\r\n","import { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { UPDATE, CONNECTION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n\r\n            this.state = state;\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nconst STORAGE_KEY = \"theme\";\r\n\r\ntype ThemeVariants = \"dark\" | \"light\";\r\n\r\nlet initColor: ThemeVariants = \"light\";\r\n\r\nif (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    initColor = \"dark\";\r\n}\r\n\r\nconst savedColor = localStorage.getItem(STORAGE_KEY);\r\n\r\nif (savedColor) {\r\n    initColor = savedColor as ThemeVariants;\r\n}\r\n\r\nexport default class ThemeStore {\r\n    currentTheme = initColor;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const newTheme = this.currentTheme === \"dark\" ? \"light\" : \"dark\";\r\n        this.currentTheme = newTheme;\r\n        localStorage.setItem(STORAGE_KEY, newTheme);\r\n    }\r\n}\r\n","import { Airgram, Composer, MiddlewareFn } from \"@airgram/web\";\r\nimport { EventEmitter } from \"events\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nimport createAirgram from \"./Airgram\";\r\n\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ChatsStore from \"./ChatsStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\nimport ThemeStore from \"./ThemeStore\";\r\n\r\nexport type EventPayload = Parameters<MiddlewareFn>;\r\n\r\nexport default class RootStore {\r\n    static eventName = \"action\";\r\n    events = new EventEmitter();\r\n    private emit: MiddlewareFn = (ctx, next) => {\r\n        //console.log(ctx);\r\n        const listeners = (this.events.listeners(RootStore.eventName) ?? []) as MiddlewareFn[];\r\n        return Composer.compose(listeners)(ctx, next);\r\n    };\r\n\r\n    Theme = new ThemeStore();\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    Chats = new ChatsStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { events: false, Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await createAirgram();\r\n        this.Airgram.use(this.Authorization.handlers, this.Connection, this.Chats.handlers, this.emit);\r\n    }\r\n}\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const StoreProvider: FC = ({ children }) => (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n);\r\n","import { FC } from \"react\";\r\nimport { Grid, GridContainerProps } from \"@geist-ui/react\";\r\n\r\nexport const Toolbar: FC<GridContainerProps> = (props) => (\r\n    <Grid.Container wrap=\"nowrap\" height=\"64px\" alignItems=\"center\" {...props} />\r\n);\r\n","import { ComponentProps, FC } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { User } from \"@geist-ui/react\";\r\n\r\nimport styles from \"./UserCard.module.css\";\r\n\r\nexport const UserCard: FC<ComponentProps<typeof User>> = ({ className, ...other }) => (\r\n    <User className={cx(styles.card, className)} {...other} />\r\n);\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", error);\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <RenderQrCode includeMargin renderAs=\"svg\" value={state.link} size={240} />\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { useContext, FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { Spinner } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../components\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","import pako from \"pako\";\r\n\r\nexport async function blobToLotty(blob: Blob) {\r\n    const buffer = await blob.arrayBuffer();\r\n    const data = new Uint8Array(buffer);\r\n    const output = pako.inflate(data);\r\n    var json = await new Blob([output]).text();\r\n\r\n    return JSON.parse(json);\r\n}\r\n\r\nexport function blobToJson(blob: Blob) {\r\n    return new Response(new Blob([blob], { type: \"application/json\" })).text();\r\n}\r\n\r\nexport function blobToText(blob: Blob) {\r\n    return new Response(blob).text();\r\n}\r\n\r\nexport function blobToBase64(blob: Blob) {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    return new Promise<string>((resolve, reject) => {\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string);\r\n        };\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n","import { makeAutoObservable, observable } from \"mobx\";\r\n\r\nimport { DownloadFileParams, File } from \"@airgram/core\";\r\nimport RootStore from \"./RootStore\";\r\nimport { useEffect } from \"react\";\r\nimport { store as rootStore } from \"../components/StoreProvider\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport { UPDATE } from \"@airgram/constants\";\r\n\r\nimport { blobToBase64, blobToJson, blobToLotty, blobToText } from \"../utils\";\r\nimport { useLocalStore } from \"mobx-react-lite\";\r\n\r\nconst cache = new Map<number, any>();\r\n\r\ntype FileFormats = \"blob\" | \"base64\" | \"text\" | \"json\" | \"lotty\";\r\n\r\ntype FileFormat<TFormat extends FileFormats> = TFormat extends \"blob\"\r\n    ? Blob\r\n    : TFormat extends \"base64\" | \"text\"\r\n    ? string\r\n    : TFormat extends \"json\" | \"lotty\"\r\n    ? object\r\n    : never;\r\n\r\ntype DownloadParams = Omit<DownloadFileParams, \"fileId\">;\r\n\r\nexport default class FileStore<TFormat extends FileFormats> {\r\n    isLoading = false;\r\n    private format?: FileFormats = undefined;\r\n    private file?: File = undefined;\r\n    content?: FileFormat<TFormat> = undefined;\r\n    private params?: DownloadParams = undefined;\r\n    constructor(private rootStore: RootStore, file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        makeAutoObservable(this, { content: observable.ref });\r\n        this.file = file;\r\n        this.format = format;\r\n        this.params = params;\r\n        this.load();\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateFile, (ctx, next) => {\r\n            if (ctx.update.file.id === this.file?.id) {\r\n                console.log(UPDATE.updateFile, ctx.update.file.id, ctx.update.file);\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    setFile(file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        this.file = file;\r\n\r\n        if (this.format !== format) {\r\n            this.content = undefined;\r\n            this.format = format;\r\n        }\r\n\r\n        this.params = params;\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.file || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        if (this.content) {\r\n            return this.content;\r\n        }\r\n\r\n        try {\r\n            this.isLoading = true;\r\n\r\n            const fileId = this.file.id;\r\n\r\n            const chachedValue = cache.get(fileId);\r\n            if (chachedValue) {\r\n                this.content = chachedValue;\r\n                return chachedValue;\r\n            }\r\n\r\n            const download = await this.rootStore.Airgram.api.downloadFile({ fileId, priority: 1, ...this.params });\r\n\r\n            if (download.response._ === \"error\") {\r\n                console.log(\"downloadFile\", fileId, download.response);\r\n                return;\r\n            }\r\n\r\n            const file = await this.rootStore.Airgram.api.readFilePart({ fileId });\r\n\r\n            if (file.response._ === \"error\") {\r\n                console.log(\"readFilePart\", fileId, file.response);\r\n                return;\r\n            }\r\n\r\n            const blob = file.response.data as unknown as Blob;\r\n\r\n            let content: any = null;\r\n            if (this.format === \"blob\") {\r\n                content = blob;\r\n            }\r\n\r\n            if (this.format === \"base64\") {\r\n                content = await blobToBase64(blob);\r\n            }\r\n\r\n            if (this.format === \"text\") {\r\n                content = await blobToText(blob);\r\n            }\r\n\r\n            if (this.format === \"json\") {\r\n                content = await blobToJson(blob);\r\n            }\r\n\r\n            if (this.format === \"lotty\") {\r\n                content = await blobToLotty(blob);\r\n            }\r\n\r\n            cache.set(fileId, content);\r\n\r\n            this.content = content;\r\n            return content;\r\n        } finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function useFileStore<TResult extends FileFormats>(\r\n    file?: File,\r\n    format?: TResult,\r\n    params?: DownloadParams\r\n): FileFormat<TResult> | undefined {\r\n    const store = useLocalStore(() => new FileStore<TResult>(rootStore));\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        store.setFile(file, format, params);\r\n    }, [file, format, params, store]);\r\n\r\n    return store.content;\r\n}\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Grid, Spinner, Button } from \"@geist-ui/react\";\r\nimport { StoreContext, UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport { FiLogOut } from \"react-icons/fi\";\r\n\r\nconst User: FC = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const photo = useFileStore(Authorization.user?.profilePhoto?.small, \"base64\", { priority: 32 });\r\n\r\n    useEffect(() => {\r\n        Authorization.getMe();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!Authorization.user) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" alignItems=\"center\" xs>\r\n            <UserCard src={photo} name={`${Authorization.user.firstName} ${Authorization.user.lastName}`}>\r\n                {Authorization.user.username}\r\n            </UserCard>\r\n            <div style={{ flex: 1 }} />\r\n            <Button auto type=\"abort\" iconRight={<FiLogOut />} onClick={() => Authorization.logOut()} />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(User);\r\n","import { FC, memo } from \"react\";\r\nimport cx from \"classnames\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { Chat } from \"../../store/ChatsStore\";\r\nimport { UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport styles from \"./ChatRow.module.css\";\r\n\r\ninterface ChatRowProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\r\n    chat: Chat;\r\n}\r\n\r\nconst ChatRow: FC<ChatRowProps> = ({ chat, className, ...other }) => {\r\n    const photo = useFileStore(chat.info?.photo?.small, \"base64\");\r\n\r\n    return (\r\n        <NavLink\r\n            to={`/conversation/${chat.info?.id}`}\r\n            className={cx(styles.chat, className)}\r\n            activeClassName={styles[\"active_chat\"]}\r\n            {...other}\r\n        >\r\n            <Grid.Container className={styles.container} alignItems=\"center\" height=\"100%\" width=\"100%\">\r\n                <UserCard src={photo} name={chat.info?.title} />\r\n            </Grid.Container>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default memo(ChatRow);\r\n","import { FC, useContext, useEffect, useRef, useCallback } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useVirtual } from \"react-virtual\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, List } from \"../../components\";\r\n\r\nimport ChatRow from \"./ChatRow\";\r\n\r\nimport styles from \"./Chats.module.css\";\r\n\r\nlet scrollTop = 0;\r\n\r\nconst Chats: FC = () => {\r\n    const { Chats } = useContext(StoreContext);\r\n\r\n    const itemData = Chats.chatsList;\r\n\r\n    useEffect(() => {\r\n        Chats.load();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const rowVirtualizer = useVirtual({\r\n        size: itemData.length,\r\n        parentRef,\r\n        estimateSize: useCallback(() => 64, []),\r\n    });\r\n\r\n    useEffect(() => {\r\n        rowVirtualizer.scrollToOffset(scrollTop);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const target = event.target as HTMLDivElement;\r\n        scrollTop = target.scrollTop;\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n            <List ref={parentRef as any} onScroll={handleScroll}>\r\n                <div\r\n                    style={{\r\n                        height: `${rowVirtualizer.totalSize}px`,\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                    }}\r\n                >\r\n                    {rowVirtualizer.virtualItems.map(({ index, size, start }) => {\r\n                        const chat = itemData[index];\r\n                        return (\r\n                            <ChatRow\r\n                                key={chat.info?.id ?? index}\r\n                                chat={chat}\r\n                                style={{\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    left: 0,\r\n                                    width: \"100%\",\r\n                                    height: `${size}px`,\r\n                                    transform: `translateY(${start}px)`,\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Chats);\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FC } from \"react\";\r\n\r\nimport User from \"./User\";\r\nimport Chats from \"./Chats\";\r\nimport { Toolbar } from \"../../components\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <User />\r\n            </Toolbar>\r\n            <Chats />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Menu);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat, Message, Messages, MessageSticker } from \"@airgram/core\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst limit = 100;\r\n\r\nexport interface StickerMessage extends Message {\r\n    content: MessageSticker;\r\n}\r\n\r\ninterface IMessagesStore {\r\n    startMessage: number;\r\n    canLoad: boolean;\r\n    chat?: Chat;\r\n    messages?: StickerMessage[];\r\n    messageIds: Map<number, boolean>;\r\n    stickerIds: Map<string, boolean>;\r\n}\r\n\r\nconst cache = new Map<number, IMessagesStore>();\r\n\r\nexport default class StickerMessagesStore implements IMessagesStore {\r\n    isLoading = false;\r\n    isRestored = false;\r\n    startMessage = 0;\r\n    canLoad = true;\r\n    chat?: Chat = undefined;\r\n    messages: StickerMessage[] = [];\r\n    messageIds = new Map<number, boolean>();\r\n    stickerIds = new Map<string, boolean>();\r\n\r\n    constructor(private rootStore: RootStore, private chatId: number) {\r\n        if (cache.has(chatId)) {\r\n            const values = cache.get(chatId);\r\n            Object.assign(this, values);\r\n            this.isRestored = true;\r\n        }\r\n\r\n        makeAutoObservable(this, { dispose: false, handlers: false });\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewMessage, (ctx, next) => {\r\n            const message = ctx.update.message;\r\n            if (message.chatId === this.chatId && !this.messageIds.has(message.id)) {\r\n                this.messageIds.set(message.id, true);\r\n\r\n                if (message.content._ === \"messageSticker\" && !this.stickerIds.has(message.content.sticker.setId)) {\r\n                    this.messages?.push(message as any);\r\n                    this.stickerIds.set(message.content.sticker.setId, true);\r\n                }\r\n\r\n                this.save();\r\n            }\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    init() {\r\n        if (this.isRestored) {\r\n            return;\r\n        }\r\n\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.canLoad || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        this.isLoading = true;\r\n\r\n        try {\r\n            if (!this.chat) {\r\n                const chat = await this.rootStore.Airgram.api.getChat({ chatId: this.chatId });\r\n\r\n                if (chat.response._ === \"chat\") {\r\n                    this.chat = chat.response as Chat;\r\n                }\r\n            }\r\n\r\n            while (true) {\r\n                const history = await this.rootStore.Airgram.api.getChatHistory({\r\n                    chatId: this.chatId,\r\n                    limit,\r\n                    fromMessageId: this.startMessage,\r\n                });\r\n\r\n                if (history.response._ === \"messages\") {\r\n                    const messages = history.response as Messages;\r\n\r\n                    if (messages.totalCount === 0) {\r\n                        this.canLoad = false;\r\n                        break;\r\n                    }\r\n\r\n                    const lastMessage = messages.messages![messages.messages!.length - 1];\r\n                    this.startMessage = lastMessage.id;\r\n\r\n                    const stickerMessages = Array.from(\r\n                        messages\r\n                            .messages!.reduce((acc, message) => {\r\n                                if (\r\n                                    message.content._ === \"messageSticker\" &&\r\n                                    !acc.has(message.content.sticker.setId) &&\r\n                                    !this.stickerIds.has(message.content.sticker.setId)\r\n                                ) {\r\n                                    acc.set(message.content.sticker.setId, message as any);\r\n                                }\r\n                                return acc;\r\n                            }, new Map<string, StickerMessage>())\r\n                            .values()\r\n                    ).filter((x) => !this.messageIds.has(x.id));\r\n\r\n                    for (const message of stickerMessages) {\r\n                        const content = message.content as MessageSticker;\r\n\r\n                        this.messageIds.set(message.id, true);\r\n                        this.stickerIds.set(content.sticker.setId, true);\r\n                        this.messages!.unshift(message);\r\n                    }\r\n\r\n                    if (stickerMessages.length) {\r\n                        return stickerMessages.length;\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.save();\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    save() {\r\n        const { chat, messages, messageIds, stickerIds, startMessage, canLoad } = this;\r\n        cache.set(this.chatId, { chat, messages, messageIds, stickerIds, startMessage, canLoad });\r\n    }\r\n}\r\n","import { useMemo } from \"react\";\r\nimport Lottie from \"lottie-react\";\r\n\r\nimport { Grid, GridContainerProps } from \"@geist-ui/react\";\r\n\r\nimport { StickerMessage } from \"../../store/StickerMessagesStore\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport styles from \"./Message.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface Props extends GridContainerProps {\r\n    message: StickerMessage;\r\n}\r\n\r\nconst Message = ({ message, ...other }: Props, ref: any) => {\r\n    const sticker = message.content.sticker;\r\n    const format = sticker.isAnimated ? \"lotty\" : \"base64\";\r\n    const file = useFileStore(sticker.sticker, format);\r\n    const children = useMemo(\r\n        () =>\r\n            sticker.isAnimated ? (\r\n                <Lottie renderer=\"svg\" className={styles.sticker} animationData={file as any} />\r\n            ) : (\r\n                <img className={styles.sticker} alt=\"\" src={file as any} />\r\n            ),\r\n        [file, sticker.isAnimated]\r\n    );\r\n\r\n    return (\r\n        <Grid.Container ref={ref} gap={0} direction=\"column\" {...other}>\r\n            <Grid>{message.sender._}</Grid>\r\n            <Grid className={styles.sticker}>{children}</Grid>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Message, { forwardRef: true });\r\n","import { FC, useContext, useState, useEffect, useRef, useCallback, CSSProperties } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useVirtual } from \"react-virtual\";\r\n\r\nimport { Button, Grid, Loading, Text } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, List, StoreContext, Toolbar, UserCard } from \"../../components\";\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport Message from \"./Message\";\r\n\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\n\r\nimport styles from \"./Conversation.module.css\";\r\n\r\nconst PLACEHOLDER_HEIGHT = 1000;\r\nconst MESSAGE_HEIGHT = 348;\r\n\r\ninterface Props extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst Conversation: FC<Props> = ({ match }) => {\r\n    const id = match.params.id;\r\n    const chatId = parseInt(id);\r\n\r\n    const rootStore = useContext(StoreContext);\r\n    const { Chats } = rootStore;\r\n    const [store] = useState(() => new StickerMessagesStore(rootStore, chatId));\r\n\r\n    const chat = store.chat;\r\n    const messages = store.messages;\r\n\r\n    const photo = useFileStore(chat?.photo?.small, \"base64\");\r\n\r\n    useEffect(() => {\r\n        if (Chats.chats.has(chatId)) {\r\n            store.init();\r\n        }\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n    }, [Chats.chats, chatId, store]);\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    let size = messages.length;\r\n    if (store.canLoad) {\r\n        size++;\r\n    }\r\n\r\n    const estimateSize = useCallback(\r\n        (index) => (store.canLoad && index === 0 ? PLACEHOLDER_HEIGHT : MESSAGE_HEIGHT),\r\n        [store.canLoad]\r\n    );\r\n\r\n    const rowVirtualizer = useVirtual({\r\n        size,\r\n        parentRef,\r\n        estimateSize,\r\n        overscan: 0,\r\n    });\r\n\r\n    const loadMessages = useCallback(async () => {\r\n        if (parentRef.current && parentRef.current.scrollTop < PLACEHOLDER_HEIGHT - 50) {\r\n            const loaded = await store.load();\r\n            if (loaded) {\r\n                parentRef.current!.scrollTop += MESSAGE_HEIGHT * loaded;\r\n            }\r\n        }\r\n    }, [store]);\r\n\r\n    useEffect(() => {\r\n        if (!store.canLoad) {\r\n            parentRef.current!.scrollTop -= PLACEHOLDER_HEIGHT;\r\n        }\r\n    }, [store.canLoad]);\r\n\r\n    useEffect(() => {\r\n        loadMessages();\r\n    }, [loadMessages, messages.length]);\r\n\r\n    const handleScroll = useCallback(() => {\r\n        loadMessages();\r\n    }, [loadMessages]);\r\n\r\n    if (!id) {\r\n        return (\r\n            <CenterLayout>\r\n                <Text type=\"secondary\">Please choose a conversation </Text>\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <Grid sm md={0}>\r\n                    <Button auto type=\"abort\" iconRight={<FiArrowLeft />} />\r\n                </Grid>\r\n                <Grid xs>\r\n                    <UserCard src={photo} name={chat?.title} />\r\n                </Grid>\r\n            </Toolbar>\r\n            <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n                <List ref={parentRef as any} onScrollStop={handleScroll}>\r\n                    <div\r\n                        style={{\r\n                            minHeight: \"100%\",\r\n                            height: `${rowVirtualizer.totalSize}px`,\r\n                            width: \"100%\",\r\n                            position: \"relative\",\r\n                        }}\r\n                    >\r\n                        {rowVirtualizer.virtualItems.map(({ index, start, size, measureRef }) => {\r\n                            let realIndex = index;\r\n                            if (store.canLoad) {\r\n                                realIndex--;\r\n                            }\r\n\r\n                            const style: CSSProperties = {\r\n                                position: \"absolute\",\r\n                                top: 0,\r\n                                left: 0,\r\n                                height: size,\r\n                                width: \"100%\",\r\n                                transform: `translateY(${start}px)`,\r\n                            };\r\n\r\n                            if (realIndex < 0)\r\n                                return (\r\n                                    <Grid.Container alignItems=\"flex-end\" key={index} style={style}>\r\n                                        <Loading>Loading messages</Loading>\r\n                                    </Grid.Container>\r\n                                );\r\n\r\n                            const message = messages[realIndex];\r\n\r\n                            return <Message ref={measureRef} key={message.id} style={style} message={message} />;\r\n                        })}\r\n                    </div>\r\n                </List>\r\n            </Grid.Container>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Conversation);\r\n","import { Switch, Route, Redirect } from \"react-router\";\r\n\r\nimport { Grid, useMediaQuery } from \"@geist-ui/react\";\r\n\r\nimport Menu from \"./Menu/Menu\";\r\nimport Conversation from \"./Conversation/Conversation\";\r\n\r\nimport styles from \"./Root.module.css\";\r\n\r\nexport default function Root() {\r\n    const isMobile = useMediaQuery(\"sm\", { match: \"down\" });\r\n\r\n    return (\r\n        <Grid.Container gap={0} width=\"100%\" height=\"100%\">\r\n            {isMobile ? (\r\n                <Switch>\r\n                    <Route path=\"/chats\" component={Menu} />\r\n                    <Route path=\"/conversation/:id\" component={Conversation} />\r\n                    <Redirect to=\"chats\" />\r\n                </Switch>\r\n            ) : (\r\n                <>\r\n                    <Grid className={styles.panel} sm={8} md={6} lg={4} xl={2}>\r\n                        <Menu />\r\n                    </Grid>\r\n                    <Grid className={styles.panel} sm={16} md={18} lg={20} xl={22}>\r\n                        <Switch>\r\n                            <Route\r\n                                path=\"/conversation/:id?\"\r\n                                render={(props) => <Conversation key={props.match.params.id} {...(props as any)} />}\r\n                            />\r\n                            <Redirect to=\"conversation\" />\r\n                        </Switch>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n}\r\n","import { useContext } from \"react\";\r\n\r\nimport { Grid, Link, Text, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n    const { Theme } = useContext(StoreContext);\r\n\r\n    const isDarktTheme = Theme.currentTheme === \"dark\";\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" gap={0} height=\"50px\" alignItems=\"center\">\r\n            <Spacer w={0.5} />\r\n            <Button\r\n                auto\r\n                type=\"abort\"\r\n                iconRight={isDarktTheme ? <FiMoon /> : <FiSun />}\r\n                onClick={() => Theme.toggleTheme()}\r\n            />\r\n\r\n            <div style={{ flex: 1 }} />\r\n            <Text span>\r\n                Made with{\" \"}\r\n                <Link underline href=\"https://airgram.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Airgram\r\n                </Link>\r\n                ,{\" \"}\r\n                <Link underline href=\"https://react.geist-ui.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Geist UI\r\n                </Link>{\" \"}\r\n                and <FiHeart color=\"red\" />\r\n            </Text>\r\n            <Spacer />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { GeistProvider, CssBaseline, Page } from \"@geist-ui/react\";\n\nimport { StoreContext, CssThemeVariables } from \"./components\";\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\nimport Footer from \"./app/Footer\";\n\nfunction App() {\n    const { Theme } = useContext(StoreContext);\n\n    return (\n        <GeistProvider themeType={Theme.currentTheme}>\n            <CssThemeVariables />\n            <CssBaseline />\n            <Page render=\"effect-seo\" scale={0.5} width=\"100%\" padding={0}>\n                <Page.Content paddingTop={0}>\n                    <AuthProvider>\n                        <Root />\n                    </AuthProvider>\n                </Page.Content>\n                <Page.Footer>\n                    <Footer />\n                </Page.Footer>\n            </Page>\n        </GeistProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { StoreProvider } from \"./components\";\n\nReactDOM.render(\n    <StoreProvider>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </StoreProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatRow_chat__IbOPK\",\"active_chat\":\"ChatRow_active_chat__2ZRAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sticker\":\"Message_sticker__2bd3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Root_panel__2Hl4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"UserCard_card__3-Fjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chats_root__31lV_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Conversation_root__1cN7I\"};"],"sourceRoot":""}