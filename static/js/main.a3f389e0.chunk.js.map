{"version":3,"sources":["store/Airgram.ts","utils/HandlersBuilder.ts","store/AuthorizationStore.ts","store/ChatsStore.ts","store/ConnectionStore.ts","store/ThemeStore.ts","store/RootStore.ts","components/StoreProvider.tsx","components/CenterLayout.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","utils/blobToBase64.ts","store/FileStore.ts","components/UserCard.tsx","app/Menu/User.tsx","components/List.tsx","app/Menu/ChatRow.tsx","app/Menu/Chats.tsx","app/Menu/Menu.tsx","app/Conversation/Conversation.tsx","app/Root.tsx","app/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx","components/CenterLayout.module.css","app/Root.module.css","app/SignIn/QrCode.module.css","components/UserCard.module.css","app/Menu/ChatRow.module.css","app/Menu/Chats.module.css"],"names":["options","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","prevInstance","undefined","createAirgram","a","api","destroy","newInstance","Airgram","HandlersBuilder","handlers","args","this","push","ctx","next","filter","_","length","Composer","compose","map","AuthorizationStore","rootStore","state","firstLaunch","user","add","UPDATE","updateAuthorizationState","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","runInAction","build","makeAutoObservable","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","result","response","reset","resetAirgram","logOut","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","getMe","ChatsStore","chats","Map","updateNewChat","updateChat","chat","id","info","updateChatPosition","chatId","position","updateChatLastMessage","lastMessage","positions","find","x","list","updater","get","set","getChats","chatList","limit","Array","from","values","sort","b","BigInt","order","isPinned","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","middleware","updateConnectionState","context","STORAGE_KEY","initColor","window","matchMedia","matches","savedColor","localStorage","getItem","ThemeStore","currentTheme","newTheme","setItem","leakedActions","RootStore","Theme","Authorization","Connection","Chats","use","store","StoreContext","createContext","StoreProvider","children","Provider","value","CenterLayout","className","disablePadding","other","cx","styles","root","padding","PhoneNumber","useContext","useState","lock","setLock","useForm","errors","formState","register","handleSubmit","setError","onSubmit","useCallback","sendPhoneNumber","Container","direction","alignContent","alignItems","h3","margin","autoFocus","disabled","type","required","htmlType","ghost","onClick","observer","control","useController","defaultValue","name","rules","field","onChange","error","fieldState","sendCode","handleChange","event","target","codeInfo","label","sendPassword","Password","placeholder","passwordHint","codeArea","link","includeMargin","renderAs","size","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","scale","blobToBase64","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onloadend","onerror","cache","FileStore","file","base64","load","fileId","chachedValue","downloadFile","priority","readFilePart","data","useFileStore","setState","useEffect","setFile","UserCard","card","photo","profilePhoto","small","wrap","xs","src","firstName","lastName","username","style","flex","auto","iconRight","List","forwardRef","ref","onScroll","refSetter","scrollbarsRef","view","overflow","index","to","height","width","title","scrollTop","itemData","chatsList","init","handleScroll","scrollOffset","justify","initialScrollOffset","outerElementType","itemCount","itemSize","ChatRow","Conversation","match","params","Root","isMobile","useMediaQuery","gap","path","component","Menu","panel","sm","md","lg","xl","Footer","isDarktTheme","w","toggleTheme","span","underline","href","rel","color","themeType","render","Content","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a3f389e0.chunk.js","sourcesContent":["import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst options: AirgramConfig = {\r\n    //useTestDc: true,\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"info\",\r\n    logVerbosityLevel: 2,\r\n};\r\n\r\nlet prevInstance: Airgram | undefined = undefined;\r\n\r\nexport default async function createAirgram() {\r\n    if (prevInstance) {\r\n        await prevInstance.api.destroy();\r\n    }\r\n\r\n    const newInstance = new Airgram(options);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    prevInstance = newInstance;\r\n\r\n    return newInstance;\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { UpdateContext, UpdateUnion, ApiMethods, MiddlewareFn, Composer } from \"@airgram/core\";\r\n\r\ntype UpdateName = `${UPDATE}`;\r\n\r\ntype UpdateLookup = {\r\n    [P in UpdateName]: Extract<UpdateUnion, { _: P }>;\r\n};\r\n\r\ntype MethodName = {\r\n    [K in keyof ApiMethods]: K;\r\n}[keyof ApiMethods];\r\n\r\ntype MethodsLookup = {\r\n    [P in MethodName]: ReturnType<ApiMethods[P]> extends Promise<infer PT> ? PT : never;\r\n};\r\n\r\ntype ActionName = UpdateName | MethodName;\r\n\r\ntype PickContext<TAction extends string> = TAction extends UPDATE\r\n    ? UpdateContext<UpdateLookup[TAction]>\r\n    : TAction extends MethodName\r\n    ? MethodsLookup[TAction]\r\n    : never;\r\n\r\ntype Handler<TAction extends ActionName> = MiddlewareFn<PickContext<TAction>>;\r\n\r\ntype HandlerRecord<TAction extends ActionName> = [action: TAction, handler: Handler<TAction>];\r\n\r\nexport default class HandlersBuilder {\r\n    private handlers: Array<HandlerRecord<any>> = [];\r\n    add<TAction extends ActionName>(...args: HandlerRecord<TAction>) {\r\n        this.handlers.push(args);\r\n        return this;\r\n    }\r\n\r\n    build(): MiddlewareFn {\r\n        return (ctx, next) => {\r\n            const handlers = this.handlers.filter(([update]) => update === ctx._) ?? [];\r\n\r\n            if (handlers.length) {\r\n                return Composer.compose(handlers.map(([, handler]) => handler))(ctx, next);\r\n            }\r\n\r\n            return next();\r\n        };\r\n    }\r\n}\r\n","import { AuthorizationStateUnion, User } from \"@airgram/core\";\r\nimport { UPDATE, AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    firstLaunch = true;\r\n    user?: User;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            handlers: false,\r\n        });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateAuthorizationState, (ctx) => {\r\n            const state = ctx.update.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        })\r\n        .build();\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    async logOut() {\r\n        await this.rootStore.Airgram.api.logOut();\r\n        this.firstLaunch = true;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n\r\n    async getMe() {\r\n        const user = await this.rootStore.Airgram.api.getMe();\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        runInAction(() => {\r\n            this.user = user.response as User;\r\n        });\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat as AirgramChat, ChatPosition, Message } from \"@airgram/core\";\r\n\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport interface Chat {\r\n    info?: AirgramChat;\r\n    position?: ChatPosition;\r\n    lastMessage?: Message;\r\n}\r\n\r\nexport default class ChatsStore {\r\n    chats = new Map<number, Chat>();\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, { handlers: false });\r\n    }\r\n\r\n    updateChat(chatId: number, updater: (chat: Chat) => Chat | void) {\r\n        let chat = this.chats.get(chatId);\r\n        if (!chat) {\r\n            chat = {};\r\n        }\r\n\r\n        runInAction(() => {\r\n            chat = updater(chat!) ?? chat;\r\n            this.chats.set(chatId, chat!);\r\n        });\r\n    }\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            this.updateChat(ctx.update.chat.id, (chat) => {\r\n                chat.info = ctx.update.chat;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatPosition, (ctx, next) => {\r\n            this.updateChat(ctx.update.chatId, (chat) => {\r\n                chat.position = ctx.update.position;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatLastMessage, (ctx, next) => {\r\n            this.updateChat(ctx.update.chatId, (chat) => {\r\n                chat.lastMessage = ctx.update.lastMessage;\r\n            });\r\n\r\n            const position = ctx.update.positions.find((x) => x.list._ === \"chatListMain\");\r\n\r\n            if (position) {\r\n                this.updateChat(ctx.update.chatId, (chat) => {\r\n                    chat.position = position;\r\n                });\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    async init() {\r\n        await this.rootStore.Airgram.api.getChats({ chatList: { _: \"chatListMain\" }, limit: 10 });\r\n    }\r\n\r\n    get chatsList() {\r\n        return Array.from(this.chats.values())\r\n            .sort((a, b) => (BigInt(a.position?.order ?? 0) < BigInt(b.position?.order ?? 0) ? 0 : -1))\r\n            .sort((a, b) => {\r\n                const x = a.position?.isPinned;\r\n                const y = b.position?.isPinned;\r\n                return x === y ? 0 : x ? -1 : 1;\r\n            });\r\n    }\r\n}\r\n","import { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { UPDATE, CONNECTION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nconst STORAGE_KEY = \"theme\";\r\n\r\ntype ThemeVariants = \"dark\" | \"light\";\r\n\r\nlet initColor: ThemeVariants = \"light\";\r\n\r\nif (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    initColor = \"dark\";\r\n}\r\n\r\nconst savedColor = localStorage.getItem(STORAGE_KEY);\r\n\r\nif (savedColor) {\r\n    initColor = savedColor as ThemeVariants;\r\n}\r\n\r\nexport default class ThemeStore {\r\n    currentTheme = initColor;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const newTheme = this.currentTheme === \"dark\" ? \"light\" : \"dark\";\r\n        this.currentTheme = newTheme;\r\n        localStorage.setItem(STORAGE_KEY, newTheme);\r\n    }\r\n}\r\n","import { Airgram, MiddlewareFn } from \"@airgram/web\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport createAirgram from \"./Airgram\";\r\n\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ChatsStore from \"./ChatsStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\nimport ThemeStore from \"./ThemeStore\";\r\n\r\nconst leakedActions: MiddlewareFn = (ctx, next) => {\r\n    //console.log(\"recieved\", ctx);\r\n    return next();\r\n};\r\n\r\nexport default class RootStore {\r\n    Theme = new ThemeStore();\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    Chats = new ChatsStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await createAirgram();\r\n        this.Airgram.use(this.Authorization.handlers, this.Connection, this.Chats.handlers, leakedActions);\r\n    }\r\n}\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nconst StoreProvider: FC = ({ children }) => <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\r\n\r\nexport default StoreProvider;\r\n","import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nconst CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n\r\nexport default CenterLayout;\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", error);\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <RenderQrCode includeMargin renderAs=\"svg\" value={state.link} size={240} />\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { useContext, FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { Spinner } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport CenterLayout from \"../components/CenterLayout\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","export default function blobToBase64(blob: Blob) {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    return new Promise<string>((resolve, reject) => {\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string);\r\n        };\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nimport { File } from \"@airgram/core\";\r\nimport RootStore from \"./RootStore\";\r\nimport { blobToBase64 } from \"../utils\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nconst cache = new Map<number, [Blob, string]>();\r\n\r\ninterface IFile {\r\n    file?: File;\r\n    blob?: Blob;\r\n    base64?: string;\r\n}\r\n\r\nexport default class FileStore implements IFile {\r\n    blob?: Blob = undefined;\r\n    base64?: string = undefined;\r\n\r\n    constructor(private rootStore: RootStore, public file?: File) {\r\n        makeAutoObservable(this);\r\n\r\n        this.load();\r\n    }\r\n\r\n    setFile(file?: File) {\r\n        this.file = file;\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.file) {\r\n            return;\r\n        }\r\n\r\n        const fileId = this.file.id;\r\n\r\n        const chachedValue = cache.get(fileId);\r\n        if (chachedValue) {\r\n            const [blob, base64] = chachedValue;\r\n\r\n            this.blob = blob;\r\n            this.base64 = base64;\r\n\r\n            return;\r\n        }\r\n\r\n        await this.rootStore.Airgram.api.downloadFile({ fileId, priority: 2 });\r\n\r\n        const file = await this.rootStore.Airgram.api.readFilePart({ fileId });\r\n\r\n        if (file.response._ !== \"filePart\") {\r\n            return;\r\n        }\r\n\r\n        const blob = file.response.data as unknown as Blob;\r\n        const base64 = await blobToBase64(blob);\r\n\r\n        cache.set(fileId, [blob, base64]);\r\n\r\n        this.blob = blob;\r\n        this.base64 = base64;\r\n    }\r\n}\r\n\r\nexport function useFileStore(file?: File) {\r\n    const rootStore = useContext(StoreContext);\r\n\r\n    const [store] = useState(() => new FileStore(rootStore));\r\n    const [state, setState] = useState<IFile | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            await store.setFile(file);\r\n            setState(store);\r\n        })();\r\n    }, [file, store]);\r\n\r\n    return state;\r\n}\r\n","import { ComponentProps, FC } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { User } from \"@geist-ui/react\";\r\n\r\nimport styles from \"./UserCard.module.css\";\r\n\r\nconst UserCard: FC<ComponentProps<typeof User>> = ({ className, ...other }) => (\r\n    <User className={cx(styles.card, className)} {...other} />\r\n);\r\n\r\nexport default UserCard;\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Grid, Spinner, Button } from \"@geist-ui/react\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport UserCard from \"../../components/UserCard\";\r\n\r\nimport { FiLogOut } from \"react-icons/fi\";\r\n\r\nconst User: FC = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const photo = useFileStore(Authorization.user?.profilePhoto?.small);\r\n\r\n    useEffect(() => {\r\n        Authorization.getMe();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!Authorization.user) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" alignItems=\"center\" xs>\r\n            <UserCard src={photo?.base64} name={`${Authorization.user.firstName} ${Authorization.user.lastName}`}>\r\n                {Authorization.user.username}\r\n            </UserCard>\r\n            <div style={{ flex: 1 }} />\r\n            <Button auto type=\"abort\" iconRight={<FiLogOut />} onClick={() => Authorization.logOut()} />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(User);\r\n","import { forwardRef, useCallback, HTMLProps } from \"react\";\r\nimport Scrollbars from \"react-custom-scrollbars-2\";\r\n\r\nconst List = forwardRef<Scrollbars, HTMLProps<HTMLDivElement>>(({ onScroll, style, children }, ref) => {\r\n    const refSetter = useCallback((scrollbarsRef) => {\r\n        if (scrollbarsRef && typeof ref === \"function\") {\r\n            ref?.(scrollbarsRef.view);\r\n        } else if (typeof ref === \"function\") {\r\n            ref?.(null);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Scrollbars ref={refSetter} style={{ ...style, overflow: \"hidden\" }} onScroll={onScroll}>\r\n            {children}\r\n        </Scrollbars>\r\n    );\r\n});\r\n\r\nexport default List;\r\n","import { FC } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { Chat } from \"../../store/ChatsStore\";\r\nimport UserCard from \"../../components/UserCard\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport { ListChildComponentProps } from \"react-window\";\r\n\r\nimport styles from \"./ChatRow.module.css\";\r\n\r\nconst ChatRow: FC<ListChildComponentProps<Chat[]>> = ({ data, index, style }) => {\r\n    const chat = data[index];\r\n\r\n    const photo = useFileStore(chat.info?.photo?.small);\r\n\r\n    return (\r\n        <NavLink key={index} to={`/conversation/${chat.info?.id}`} style={style}>\r\n            <Grid.Container className={styles.chat} alignItems=\"center\" height=\"100%\" width=\"100%\">\r\n                <UserCard src={photo?.base64} name={chat.info?.title} />\r\n            </Grid.Container>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default observer(ChatRow);\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport { FixedSizeList, ListOnScrollProps } from \"react-window\";\r\n\r\nimport List from \"../../components/List\";\r\nimport ChatRow from \"./ChatRow\";\r\n\r\nimport styles from \"./Chats.module.css\";\r\nimport { useCallback } from \"react\";\r\n\r\nlet scrollTop = 0;\r\n\r\nconst Chats: FC = () => {\r\n    const { Chats } = useContext(StoreContext);\r\n\r\n    const itemData = Chats.chatsList;\r\n\r\n    useEffect(() => {\r\n        Chats.init();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleScroll = useCallback(({ scrollOffset }: ListOnScrollProps) => {\r\n        scrollTop = scrollOffset;\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <FixedSizeList\r\n                        initialScrollOffset={scrollTop}\r\n                        outerElementType={List}\r\n                        itemData={itemData}\r\n                        itemCount={itemData.length}\r\n                        itemSize={64}\r\n                        height={height}\r\n                        width={width}\r\n                        onScroll={handleScroll}\r\n                    >\r\n                        {ChatRow}\r\n                    </FixedSizeList>\r\n                )}\r\n            </AutoSizer>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Chats);\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FC } from \"react\";\r\n\r\nimport User from \"./User\";\r\nimport Chats from \"./Chats\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid.Container height=\"64px\" alignItems=\"center\">\r\n                <User />\r\n            </Grid.Container>\r\n            <Chats />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Menu);\r\n","import { FC } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\nimport { Text } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\n\r\ninterface Props extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst Conversation: FC<Props> = ({ match }) => {\r\n    const id = match.params.id;\r\n\r\n    if (!id) {\r\n        return (\r\n            <CenterLayout>\r\n                <Text type=\"secondary\">Please choose a conversation </Text>\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    return <>Conversation</>;\r\n};\r\n\r\nexport default Conversation;\r\n","import { Switch, Route, Redirect } from \"react-router\";\r\n\r\nimport { Grid, useMediaQuery } from \"@geist-ui/react\";\r\n\r\nimport Menu from \"./Menu/Menu\";\r\nimport Conversation from \"./Conversation/Conversation\";\r\n\r\nimport styles from \"./Root.module.css\";\r\n\r\nexport default function Root() {\r\n    const isMobile = useMediaQuery(\"sm\", { match: \"down\" });\r\n\r\n    return (\r\n        <Grid.Container gap={0} width=\"100%\" height=\"100%\">\r\n            {isMobile ? (\r\n                <Switch>\r\n                    <Route path=\"/chats\" component={Menu} />\r\n                    <Route path=\"/conversation/:id\" component={Conversation} />\r\n                    <Redirect to=\"chats\" />\r\n                </Switch>\r\n            ) : (\r\n                <>\r\n                    <Grid className={styles.panel} sm={8} md={6} lg={4} xl={2}>\r\n                        <Menu />\r\n                    </Grid>\r\n                    <Grid className={styles.panel} sm={16} md={18} lg={20} xl={22}>\r\n                        <Switch>\r\n                            <Route path=\"/conversation/:id?\" component={Conversation} />\r\n                            <Redirect to=\"conversation\" />\r\n                        </Switch>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n}\r\n","import { useContext } from \"react\";\r\n\r\nimport { Grid, Link, Text, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n    const { Theme } = useContext(StoreContext);\r\n\r\n    const isDarktTheme = Theme.currentTheme === \"dark\";\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" gap={0} height=\"50px\" alignItems=\"center\">\r\n            <Spacer w={0.5} />\r\n            <Button\r\n                auto\r\n                type=\"abort\"\r\n                iconRight={isDarktTheme ? <FiMoon /> : <FiSun />}\r\n                onClick={() => Theme.toggleTheme()}\r\n            />\r\n\r\n            <div style={{ flex: 1 }} />\r\n            <Text span>\r\n                Made with{\" \"}\r\n                <Link underline href=\"https://airgram.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Airgram\r\n                </Link>\r\n                ,{\" \"}\r\n                <Link underline href=\"https://react.geist-ui.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Geist UI\r\n                </Link>{\" \"}\r\n                and <FiHeart color=\"red\" />\r\n            </Text>\r\n            <Spacer />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { GeistProvider, CssBaseline, Page } from \"@geist-ui/react\";\n\nimport { StoreContext } from \"./components/StoreProvider\";\n\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\nimport Footer from \"./app/Footer\";\n\nfunction App() {\n    const { Theme } = useContext(StoreContext);\n\n    return (\n        <GeistProvider themeType={Theme.currentTheme}>\n            <CssBaseline />\n            <Page render=\"effect-seo\" scale={0.5} width=\"100%\" padding={0}>\n                <Page.Content paddingTop={0}>\n                    <AuthProvider>\n                        <Root />\n                    </AuthProvider>\n                </Page.Content>\n                <Page.Footer>\n                    <Footer />\n                </Page.Footer>\n            </Page>\n        </GeistProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport StoreProvider from \"./components/StoreProvider\";\n\nReactDOM.render(\n    <StrictMode>\n        <StoreProvider>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </StoreProvider>\n    </StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Root_panel__2Hl4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"UserCard_card__3-Fjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatRow_chat__IbOPK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chats_root__31lV_\"};"],"sourceRoot":""}