{"version":3,"sources":["store/Airgram.ts","store/AuthorizationStore.ts","store/ConnectionStore.ts","store/RootStore.ts","components/StoreProvider.tsx","components/CenterLayout.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","app/Root.tsx","App.tsx","reportWebVitals.js","index.tsx","components/CenterLayout.module.css","app/SignIn/QrCode.module.css"],"names":["options","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","prevInstance","undefined","createAirgram","a","api","destroy","newInstance","Airgram","AuthorizationStore","rootStore","state","firstLaunch","middleware","ctx","next","_","UPDATE","updateAuthorizationState","context","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","runInAction","makeAutoObservable","this","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","result","response","reset","resetAirgram","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","updateConnectionState","RootStore","Authorization","Connection","use","store","StoreContext","createContext","StoreProvider","children","Provider","value","CenterLayout","className","disablePadding","other","cx","styles","root","padding","PhoneNumber","useContext","useState","lock","setLock","useForm","errors","formState","register","handleSubmit","setError","onSubmit","useCallback","sendPhoneNumber","Container","direction","alignContent","alignItems","h3","margin","autoFocus","disabled","type","required","htmlType","ghost","onClick","observer","control","useController","defaultValue","name","rules","field","onChange","error","fieldState","sendCode","handleChange","event","target","length","codeInfo","label","sendPassword","Password","placeholder","passwordHint","codeArea","link","href","rel","renderAs","size","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","scale","Root","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a4fc4cec.chunk.js","sourcesContent":["import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst options: AirgramConfig = {\r\n    //useTestDc: true,\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"info\",\r\n    logVerbosityLevel: 2,\r\n};\r\n\r\nlet prevInstance: Airgram | undefined = undefined;\r\n\r\nexport default async function createAirgram() {\r\n    if (prevInstance) {\r\n        await prevInstance.api.destroy();\r\n    }\r\n\r\n    const newInstance = new Airgram(options);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    prevInstance = newInstance;\r\n\r\n    return newInstance;\r\n}\r\n","import { AuthorizationStateUnion, MiddlewareFn, UpdateAuthorizationState } from \"@airgram/core\";\r\nimport { UPDATE, AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    firstLaunch = true;\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateAuthorizationState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateAuthorizationState;\r\n\r\n            const state = context.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        }\r\n\r\n        return next();\r\n    };\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n}\r\n","import { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { UPDATE, CONNECTION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { Airgram } from \"@airgram/web\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport createAirgram from \"./Airgram\";\r\n\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\n\r\nexport default class RootStore {\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await createAirgram();\r\n        this.Airgram.use(this.Authorization, this.Connection);\r\n    }\r\n}\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nconst StoreProvider: FC = ({ children }) => <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\r\n\r\nexport default StoreProvider;\r\n","import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nconst CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n\r\nexport default CenterLayout;\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", error);\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <a href={state.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <RenderQrCode renderAs=\"svg\" value={state.link} size={240} />\r\n                            </a>\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { useContext, FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { Spinner } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport CenterLayout from \"../components/CenterLayout\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","import { Switch } from \"react-router\";\r\n\r\nexport default function Root() {\r\n    return <Switch></Switch>;\r\n}\r\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { StoreContext } from \"./components/StoreProvider\";\n\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\n\nfunction App() {\n    const store = useContext(StoreContext);\n\n    console.log(store.Authorization.state);\n\n    return (\n        <AuthProvider>\n            <Root />\n        </AuthProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { GeistProvider, CssBaseline } from \"@geist-ui/react\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport StoreProvider from \"./components/StoreProvider\";\n\nReactDOM.render(\n    <StrictMode>\n        <StoreProvider>\n            <GeistProvider>\n                <CssBaseline />\n                <BrowserRouter>\n                    <App />\n                </BrowserRouter>\n            </GeistProvider>\n        </StoreProvider>\n    </StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};"],"sourceRoot":""}