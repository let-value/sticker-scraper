{"version":3,"sources":["components/CenterLayout.tsx","components/CssThemeVariables.tsx","components/List.tsx","store/Airgram.ts","utils/HandlersBuilder.ts","store/AuthorizationStore.ts","store/ChatsStore.ts","store/ConnectionStore.ts","store/ThemeStore.ts","store/RootStore.ts","components/StoreProvider.tsx","utils/convertBlob.ts","store/FileStore.ts","components/Sticker.tsx","components/Toolbar.tsx","components/UserCard.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","app/Menu/User.tsx","app/Menu/ChatRow.tsx","app/Menu/Chats.tsx","app/Menu/Menu.tsx","store/StickerMessagesStore.ts","app/Conversation/Loader.tsx","store/StickerSetStore.ts","app/Conversation/Message.tsx","app/Conversation/Conversation.tsx","app/Set/Set.tsx","app/Root.tsx","app/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx","app/Menu/ChatRow.module.css","components/CenterLayout.module.css","components/Sticker.module.css","app/Conversation/Message.module.css","app/Root.module.css","components/List.module.css","components/UserCard.module.css","app/SignIn/QrCode.module.css","app/Menu/Chats.module.css","app/Conversation/Conversation.module.css","app/Set/Set.module.css"],"names":["CenterLayout","className","disablePadding","other","cx","styles","root","padding","document","documentElement","CssThemeVariables","theme","useTheme","useEffect","palette","Object","entries","key","value","style","setProperty","renderThumb","props","thumb","ListComponent","ref","component","Component","children","refSetter","useCallback","scrollbarsRef","current","view","renderView","renderThumbHorizontal","renderThumbVertical","List","forwardRef","options","useTestDc","readOnly","instanceName","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","useDatabase","useFileDatabase","useChatInfoDatabase","useMessageDatabase","useSecretChats","AirgramFactory","a","this","api","destroy","newInstance","Airgram","HandlersBuilder","handlers","args","push","ctx","next","filter","_","length","Composer","compose","map","AuthorizationStore","rootStore","state","undefined","firstLaunch","user","add","UPDATE","updateAuthorizationState","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","runInAction","build","makeAutoObservable","observable","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","result","response","reset","resetAirgram","logOut","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","getMe","ChatsStore","chats","Map","updateNewChat","updateChat","chat","id","info","updateChatPosition","chatId","position","updateChatLastMessage","lastMessage","positions","find","x","list","shallow","updater","get","set","loadChats","chatList","limit","Array","from","values","sort","b","BigInt","order","isPinned","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","middleware","updateConnectionState","context","STORAGE_KEY","initColor","window","matchMedia","matches","savedColor","localStorage","getItem","ThemeStore","currentTheme","newTheme","setItem","airgramFactory","RootStore","events","EventEmitter","emit","listeners","eventName","Theme","Authorization","Connection","Chats","makeAsync","use","store","StoreContext","createContext","StoreProvider","Provider","blobToLotty","blob","arrayBuffer","buffer","data","Uint8Array","output","pako","inflate","Blob","text","json","JSON","parse","blobToJson","Response","type","blobToText","blobToBase64","reader","FileReader","readAsDataURL","Promise","resolve","reject","onloadend","onerror","error","cache","FileStore","file","format","params","isLoading","content","updateFile","load","addListener","removeListener","fileId","cachedValue","setContent","downloadFile","priority","readFilePart","useFileStore","useLocalObservable","dispose","setFile","observer","sticker","isAnimated","intervalCheck","scrollCheck","isVisible","loop","renderer","animationData","alt","src","Toolbar","Container","wrap","height","alignItems","UserCard","card","PhoneNumber","useContext","useState","lock","setLock","useForm","errors","formState","register","handleSubmit","setError","onSubmit","sendPhoneNumber","message","direction","alignContent","h3","margin","autoFocus","disabled","required","htmlType","ghost","onClick","control","useController","defaultValue","name","rules","field","onChange","fieldState","sendCode","handleChange","event","target","codeInfo","label","sendPassword","Password","placeholder","passwordHint","codeArea","link","includeMargin","renderAs","size","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","scale","photo","profilePhoto","small","xs","firstName","lastName","username","flex","auto","iconRight","ChatRow","to","activeClassName","container","width","title","memo","scrollTop","itemData","chatsList","parentRef","useRef","rowVirtualizer","useVirtual","estimateSize","scrollToOffset","handleScroll","justify","onScroll","totalSize","virtualItems","index","start","top","left","transform","StickerMessagesStore","isRestored","startMessage","canLoad","messages","messageIds","stickerIds","processed","total","batch","updateNewMessage","has","setId","addMessage","save","assign","unshift","setLoadingProgress","setLoading","getChat","getChatHistory","fromMessageId","history","totalCount","stickerMessages","reduce","acc","insertMessage","console","log","span","StickerSetStore","getStickerSet","gap","PLACEHOLDER_HEIGHT","createContainerStyle","memoize","minHeight","createMessageStyles","match","useHistory","scrollView","count","offset","init","loaded","tryLoadMessages","md","goBack","realIndex","h5","stickers","sm","lg","xl","RenderConversation","RenderSet","Root","isMobile","useMediaQuery","path","Menu","panel","Footer","isDarktTheme","w","toggleTheme","underline","href","rel","color","themeType","render","Content","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.abcc6f2f.chunk.js","sourcesContent":["import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nexport const CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n","import { useTheme } from \"@geist-ui/react\";\r\nimport { useEffect, FC } from \"react\";\r\n\r\nconst root = document.documentElement;\r\n\r\nexport const CssThemeVariables: FC = () => {\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        const { palette } = theme;\r\n\r\n        for (const [key, value] of Object.entries(palette)) {\r\n            root.style.setProperty(\"--palette-\" + key, value);\r\n        }\r\n    }, [theme]);\r\n\r\n    return null;\r\n};\r\n","import { forwardRef, useCallback, FC, HTMLProps, Ref, ComponentProps, ElementType } from \"react\";\r\nimport cx from \"classnames\";\r\nimport Scrollbars, { ScrollbarProps } from \"react-custom-scrollbars-2\";\r\n\r\nimport styles from \"./List.module.css\";\r\n\r\nconst renderThumb: FC<HTMLProps<HTMLDivElement>> = ({ className, ...props }) => {\r\n    return <div className={cx(className, styles.thumb)} {...props} />;\r\n};\r\n\r\ntype Props<TComponent extends ElementType> = ComponentProps<TComponent> &\r\n    ScrollbarProps & {\r\n        component?: TComponent;\r\n    };\r\n\r\nconst ListComponent = <TComponent extends ElementType = \"div\">(\r\n    { component: Component = \"div\", children, ...other }: Props<TComponent>,\r\n    ref: Ref<HTMLDivElement>\r\n) => {\r\n    const refSetter = useCallback((scrollbarsRef: any) => {\r\n        if (scrollbarsRef && ref && typeof ref === \"object\") {\r\n            (ref.current as any) = scrollbarsRef.view;\r\n        } else if (scrollbarsRef && typeof ref === \"function\") {\r\n            ref?.(scrollbarsRef.view);\r\n        } else if (typeof ref === \"function\") {\r\n            ref?.(null);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const renderView = useCallback(\r\n        (props) => {\r\n            return <Component {...props} />;\r\n        },\r\n        [Component]\r\n    );\r\n\r\n    return (\r\n        <Scrollbars\r\n            ref={refSetter}\r\n            renderView={renderView}\r\n            renderThumbHorizontal={renderThumb}\r\n            renderThumbVertical={renderThumb}\r\n            {...other}\r\n        >\r\n            {children}\r\n        </Scrollbars>\r\n    );\r\n};\r\n\r\nexport const List = forwardRef(ListComponent);\r\n","import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst useTestDc = false;\r\n\r\nconst options: AirgramConfig = {\r\n    useTestDc,\r\n    readOnly: false,\r\n    instanceName: useTestDc ? \"tdlib_test\" : \"tdlib\",\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"info\",\r\n    logVerbosityLevel: 1,\r\n    useDatabase: true,\r\n    useFileDatabase: true,\r\n    useChatInfoDatabase: true,\r\n    useMessageDatabase: true,\r\n    useSecretChats: false,\r\n};\r\n\r\nexport class AirgramFactory {\r\n    current?: Airgram;\r\n\r\n    async makeAsync() {\r\n        if (this.current) {\r\n            await this.current.api.destroy();\r\n        }\r\n\r\n        const newInstance = new Airgram(options);\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this.current = newInstance;\r\n\r\n        return newInstance;\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { UpdateContext, UpdateUnion, ApiMethods, MiddlewareFn, Composer } from \"@airgram/core\";\r\n\r\ntype UpdateName = `${UPDATE}`;\r\n\r\ntype UpdateLookup = {\r\n    [P in UpdateName]: Extract<UpdateUnion, { _: P }>;\r\n};\r\n\r\ntype MethodName = {\r\n    [K in keyof ApiMethods]: K;\r\n}[keyof ApiMethods];\r\n\r\ntype MethodsLookup = {\r\n    [P in MethodName]: ReturnType<ApiMethods[P]> extends Promise<infer PT> ? PT : never;\r\n};\r\n\r\ntype ActionName = UpdateName | MethodName;\r\n\r\ntype PickContext<TAction extends string> = TAction extends UPDATE\r\n    ? UpdateContext<UpdateLookup[TAction]>\r\n    : TAction extends MethodName\r\n    ? MethodsLookup[TAction]\r\n    : never;\r\n\r\ntype Handler<TAction extends ActionName> = MiddlewareFn<PickContext<TAction>>;\r\n\r\ntype HandlerRecord<TAction extends ActionName> = [action: TAction, handler: Handler<TAction>];\r\n\r\nexport default class HandlersBuilder {\r\n    private handlers: Array<HandlerRecord<any>> = [];\r\n    add<TAction extends ActionName>(...args: HandlerRecord<TAction>) {\r\n        this.handlers.push(args);\r\n        return this;\r\n    }\r\n\r\n    build(): MiddlewareFn {\r\n        return (ctx, next) => {\r\n            const handlers = this.handlers.filter(([update]) => update === ctx._) ?? [];\r\n\r\n            if (handlers.length) {\r\n                return Composer.compose(handlers.map(([, handler]) => handler))(ctx, next);\r\n            }\r\n\r\n            return next();\r\n        };\r\n    }\r\n}\r\n","import { AuthorizationStateUnion, User } from \"@airgram/core\";\r\nimport { UPDATE, AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, observable, runInAction } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    firstLaunch = true;\r\n    user?: User;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            user: observable.ref,\r\n            handlers: false,\r\n        });\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateAuthorizationState, (ctx) => {\r\n            const state = ctx.update.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        })\r\n        .build();\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    async logOut() {\r\n        await this.rootStore.Airgram.api.logOut();\r\n        this.firstLaunch = true;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n\r\n    async getMe() {\r\n        if (this.user) {\r\n            return;\r\n        }\r\n\r\n        const user = await this.rootStore.Airgram.api.getMe();\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        this.user = user.response as User;\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat as AirgramChat, ChatPosition, Message } from \"@airgram/core\";\r\n\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport interface Chat {\r\n    info?: AirgramChat;\r\n    position?: ChatPosition;\r\n    lastMessage?: Message;\r\n}\r\n\r\nexport default class ChatsStore {\r\n    chats = new Map<number, Chat>();\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, { chats: observable.shallow, handlers: false });\r\n    }\r\n\r\n    updateChat(chatId: number, updater: (chat: Chat) => Chat | void) {\r\n        let chat = this.chats.get(chatId);\r\n        if (!chat) {\r\n            chat = {};\r\n        }\r\n\r\n        chat = updater(chat!) ?? chat;\r\n        this.chats.set(chatId, chat!);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            this.updateChat(ctx.update.chat.id, (chat) => {\r\n                chat.info = ctx.update.chat;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatPosition, (ctx, next) => {\r\n            this.updateChat(ctx.update.chatId, (chat) => {\r\n                chat.position = ctx.update.position;\r\n            });\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateChatLastMessage, (ctx, next) => {\r\n            this.updateChat(ctx.update.chatId, (chat) => {\r\n                chat.lastMessage = ctx.update.lastMessage;\r\n            });\r\n\r\n            const position = ctx.update.positions.find((x) => x.list._ === \"chatListMain\");\r\n\r\n            if (position) {\r\n                this.updateChat(ctx.update.chatId, (chat) => {\r\n                    chat.position = position;\r\n                });\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    load() {\r\n        return this.rootStore.Airgram.api.loadChats({\r\n            chatList: { _: \"chatListMain\" },\r\n            limit: 10,\r\n        });\r\n    }\r\n\r\n    get chatsList() {\r\n        return Array.from(this.chats.values())\r\n            .sort((a, b) => (BigInt(a.position?.order ?? 0) < BigInt(b.position?.order ?? 0) ? 0 : -1))\r\n            .sort((a, b) => {\r\n                const x = a.position?.isPinned;\r\n                const y = b.position?.isPinned;\r\n                return x === y ? 0 : x ? -1 : 1;\r\n            });\r\n    }\r\n}\r\n","import { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { UPDATE, CONNECTION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n\r\n            this.state = state;\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nconst STORAGE_KEY = \"theme\";\r\n\r\ntype ThemeVariants = \"dark\" | \"light\";\r\n\r\nlet initColor: ThemeVariants = \"light\";\r\n\r\nif (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    initColor = \"dark\";\r\n}\r\n\r\nconst savedColor = localStorage.getItem(STORAGE_KEY);\r\n\r\nif (savedColor) {\r\n    initColor = savedColor as ThemeVariants;\r\n}\r\n\r\nexport default class ThemeStore {\r\n    currentTheme = initColor;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const newTheme = this.currentTheme === \"dark\" ? \"light\" : \"dark\";\r\n        this.currentTheme = newTheme;\r\n        localStorage.setItem(STORAGE_KEY, newTheme);\r\n    }\r\n}\r\n","import { Airgram, Composer, MiddlewareFn } from \"@airgram/web\";\r\nimport { EventEmitter } from \"events\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nimport { AirgramFactory } from \"./Airgram\";\r\n\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ChatsStore from \"./ChatsStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\nimport ThemeStore from \"./ThemeStore\";\r\n\r\nexport type EventPayload = Parameters<MiddlewareFn>;\r\n\r\nconst airgramFactory = new AirgramFactory();\r\n\r\nexport default class RootStore {\r\n    static eventName = \"action\";\r\n    events = new EventEmitter();\r\n    private emit: MiddlewareFn = (ctx, next) => {\r\n        //console.log(ctx);\r\n        const listeners = (this.events.listeners(RootStore.eventName) ?? []) as MiddlewareFn[];\r\n        return Composer.compose(listeners)(ctx, next);\r\n    };\r\n\r\n    Theme = new ThemeStore();\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    Chats = new ChatsStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { events: false, Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await airgramFactory.makeAsync();\r\n        this.Airgram.use(this.Authorization.handlers, this.Connection, this.Chats.handlers, this.emit);\r\n    }\r\n}\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const StoreProvider: FC = ({ children }) => (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n);\r\n","import pako from \"pako\";\r\n\r\nexport async function blobToLotty(blob: Blob) {\r\n    const buffer = await blob.arrayBuffer();\r\n    const data = new Uint8Array(buffer);\r\n    const output = pako.inflate(data);\r\n    var json = await new Blob([output]).text();\r\n\r\n    return JSON.parse(json);\r\n}\r\n\r\nexport function blobToJson(blob: Blob) {\r\n    return new Response(new Blob([blob], { type: \"application/json\" })).text();\r\n}\r\n\r\nexport function blobToText(blob: Blob) {\r\n    return new Response(blob).text();\r\n}\r\n\r\nexport function blobToBase64(blob: Blob) {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    return new Promise<string>((resolve, reject) => {\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string);\r\n        };\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n","import { makeAutoObservable, observable } from \"mobx\";\r\n\r\nimport { DownloadFileParams, File } from \"@airgram/core\";\r\nimport RootStore from \"./RootStore\";\r\nimport { useEffect } from \"react\";\r\nimport { store as rootStore } from \"../components/StoreProvider\";\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport { UPDATE } from \"@airgram/constants\";\r\n\r\nimport { blobToBase64, blobToJson, blobToLotty, blobToText } from \"../utils\";\r\nimport { useLocalObservable } from \"mobx-react-lite\";\r\n\r\nconst cache = new Map<number, any>();\r\n\r\ntype FileFormats = \"blob\" | \"base64\" | \"text\" | \"json\" | \"lotty\";\r\n\r\ntype FileFormat<TFormat extends FileFormats> = TFormat extends \"blob\"\r\n    ? Blob\r\n    : TFormat extends \"base64\" | \"text\"\r\n    ? string\r\n    : TFormat extends \"json\" | \"lotty\"\r\n    ? object\r\n    : never;\r\n\r\ntype DownloadParams = Omit<DownloadFileParams, \"fileId\">;\r\n\r\nexport default class FileStore<TFormat extends FileFormats> {\r\n    isLoading = false;\r\n    private format?: FileFormats = undefined;\r\n    private file?: File = undefined;\r\n    content?: FileFormat<TFormat> = undefined;\r\n    setContent(content: any) {\r\n        this.content = content;\r\n    }\r\n    private params?: DownloadParams = undefined;\r\n    constructor(private rootStore: RootStore, file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        makeAutoObservable(this, { content: observable.ref, handlers: false });\r\n        this.file = file;\r\n        this.format = format;\r\n        this.params = params;\r\n        this.load();\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateFile, (ctx, next) => {\r\n            if (ctx.update.file.id === this.file?.id) {\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    setFile(file?: File, format?: FileFormats, params?: DownloadParams) {\r\n        this.file = file;\r\n\r\n        if (this.format !== format) {\r\n            this.content = undefined;\r\n            this.format = format;\r\n        }\r\n\r\n        this.params = params;\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.file || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        if (this.content) {\r\n            return this.content;\r\n        }\r\n\r\n        try {\r\n            this.isLoading = true;\r\n\r\n            const fileId = this.file.id;\r\n\r\n            const cachedValue = cache.get(fileId);\r\n            if (cachedValue) {\r\n                this.setContent(cachedValue);\r\n                return cachedValue;\r\n            }\r\n\r\n            const download = await this.rootStore.Airgram.api.downloadFile({ fileId, priority: 1, ...this.params });\r\n\r\n            if (download.response._ === \"error\") {\r\n                return;\r\n            }\r\n\r\n            const file = await this.rootStore.Airgram.api.readFilePart({ fileId });\r\n\r\n            if (file.response._ === \"error\") {\r\n                return;\r\n            }\r\n\r\n            const blob = file.response.data as unknown as Blob;\r\n\r\n            let content: any = null;\r\n            if (this.format === \"blob\") {\r\n                content = blob;\r\n            }\r\n\r\n            if (this.format === \"base64\") {\r\n                content = await blobToBase64(blob);\r\n            }\r\n\r\n            if (this.format === \"text\") {\r\n                content = await blobToText(blob);\r\n            }\r\n\r\n            if (this.format === \"json\") {\r\n                content = await blobToJson(blob);\r\n            }\r\n\r\n            if (this.format === \"lotty\") {\r\n                content = await blobToLotty(blob);\r\n            }\r\n\r\n            cache.set(fileId, content);\r\n\r\n            this.setContent(content);\r\n            return content;\r\n        } finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function useFileStore<TResult extends FileFormats>(\r\n    file?: File,\r\n    format?: TResult,\r\n    params?: DownloadParams\r\n): FileFormat<TResult> | undefined {\r\n    const store = useLocalObservable(() => new FileStore<TResult>(rootStore));\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        store.setFile(file, format, params);\r\n    }, [file, format, params, store]);\r\n\r\n    return store.content;\r\n}\r\n","import { FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Lottie from \"lottie-react\";\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { Sticker as AirgramSticker } from \"@airgram/core\";\r\n\r\nimport { useFileStore } from \"../store/FileStore\";\r\n\r\nimport styles from \"./Sticker.module.css\";\r\n\r\nexport interface StickerProps {\r\n    sticker: AirgramSticker;\r\n}\r\n\r\nconst Sticker: FC<StickerProps> = ({ sticker }) => {\r\n    const file = useFileStore(sticker.sticker, sticker.isAnimated ? \"lotty\" : \"base64\");\r\n\r\n    return sticker.isAnimated ? (\r\n        <VisibilitySensor intervalCheck={true} scrollCheck={true}>\r\n            {({ isVisible }) => (\r\n                <Lottie loop={isVisible} renderer=\"svg\" className={styles.root} animationData={file as any} />\r\n            )}\r\n        </VisibilitySensor>\r\n    ) : (\r\n        <img className={styles.root} alt=\"\" src={file as any} />\r\n    );\r\n};\r\n\r\nexport default observer(Sticker);\r\n","import { FC } from \"react\";\r\nimport { Grid, GridContainerProps } from \"@geist-ui/react\";\r\n\r\nexport const Toolbar: FC<GridContainerProps> = (props) => (\r\n    <Grid.Container wrap=\"nowrap\" height=\"64px\" alignItems=\"center\" {...props} />\r\n);\r\n","import { ComponentProps, FC } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { User } from \"@geist-ui/react\";\r\n\r\nimport styles from \"./UserCard.module.css\";\r\n\r\nexport const UserCard: FC<ComponentProps<typeof User>> = ({ className, ...other }) => (\r\n    <User className={cx(styles.card, className)} {...other} />\r\n);\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", { message: error as string });\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, StoreContext } from \"../../components\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", { message: error as string });\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", { message: error as string });\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../../components\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <RenderQrCode includeMargin renderAs=\"svg\" value={state.link} size={240} />\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { useContext, FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { Spinner } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, CenterLayout } from \"../components\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Grid, Spinner, Button } from \"@geist-ui/react\";\r\nimport { StoreContext, UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport { FiLogOut } from \"react-icons/fi\";\r\n\r\nconst User: FC = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const photo = useFileStore(Authorization.user?.profilePhoto?.small, \"base64\", { priority: 32 });\r\n\r\n    useEffect(() => {\r\n        Authorization.getMe();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!Authorization.user) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" alignItems=\"center\" xs>\r\n            <UserCard src={photo} name={`${Authorization.user.firstName} ${Authorization.user.lastName}`}>\r\n                {Authorization.user.username}\r\n            </UserCard>\r\n            <div style={{ flex: 1 }} />\r\n            <Button auto type=\"abort\" iconRight={<FiLogOut />} onClick={() => Authorization.logOut()} />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(User);\r\n","import { FC, memo } from \"react\";\r\nimport cx from \"classnames\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { Chat } from \"../../store/ChatsStore\";\r\nimport { UserCard } from \"../../components\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport styles from \"./ChatRow.module.css\";\r\n\r\ninterface ChatRowProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\r\n    chat: Chat;\r\n}\r\n\r\nconst ChatRow: FC<ChatRowProps> = ({ chat, className, ...other }) => {\r\n    const photo = useFileStore(chat.info?.photo?.small, \"base64\");\r\n\r\n    return (\r\n        <NavLink\r\n            to={`/conversation/${chat.info?.id}`}\r\n            className={cx(styles.chat, className)}\r\n            activeClassName={styles[\"active_chat\"]}\r\n            {...other}\r\n        >\r\n            <Grid.Container className={styles.container} alignItems=\"center\" height=\"100%\" width=\"100%\">\r\n                <UserCard src={photo} name={chat.info?.title} />\r\n            </Grid.Container>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default memo(ChatRow);\r\n","import { FC, useContext, useEffect, useRef, useCallback } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useVirtual } from \"react-virtual\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext, List } from \"../../components\";\r\n\r\nimport ChatRow from \"./ChatRow\";\r\n\r\nimport styles from \"./Chats.module.css\";\r\n\r\nlet scrollTop = 0;\r\n\r\nconst Chats: FC = () => {\r\n    const { Chats } = useContext(StoreContext);\r\n\r\n    const itemData = Chats.chatsList;\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    const rowVirtualizer = useVirtual({\r\n        size: itemData.length,\r\n        parentRef,\r\n        estimateSize: useCallback(() => 64, []),\r\n    });\r\n\r\n    useEffect(() => {\r\n        rowVirtualizer.scrollToOffset(scrollTop);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const target = event.target as HTMLDivElement;\r\n        scrollTop = target.scrollTop;\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n            <List ref={parentRef as any} onScroll={handleScroll}>\r\n                <div\r\n                    style={{\r\n                        height: `${rowVirtualizer.totalSize}px`,\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                    }}\r\n                >\r\n                    {rowVirtualizer.virtualItems.map(({ index, size, start }) => {\r\n                        const chat = itemData[index];\r\n                        return (\r\n                            <ChatRow\r\n                                key={chat.info?.id ?? index}\r\n                                chat={chat}\r\n                                style={{\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    left: 0,\r\n                                    width: \"100%\",\r\n                                    height: `${size}px`,\r\n                                    transform: `translateY(${start}px)`,\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Chats);\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FC } from \"react\";\r\n\r\nimport User from \"./User\";\r\nimport Chats from \"./Chats\";\r\nimport { Toolbar } from \"../../components\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                <User />\r\n            </Toolbar>\r\n            <Chats />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Menu);\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { Chat, Message, Messages, MessageSticker } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable } from \"mobx\";\r\n\r\nimport HandlersBuilder from \"../utils/HandlersBuilder\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst limit = 100;\r\n\r\nexport interface StickerMessage extends Message {\r\n    content: MessageSticker;\r\n}\r\n\r\ninterface IMessagesStore {\r\n    startMessage: number;\r\n    canLoad: boolean;\r\n    chat?: Chat;\r\n    messages?: StickerMessage[];\r\n    messageIds: Map<number, boolean>;\r\n    stickerIds: Map<string, boolean>;\r\n}\r\n\r\nconst cache = new Map<number, IMessagesStore>();\r\n\r\nexport default class StickerMessagesStore implements IMessagesStore {\r\n    isLoading = false;\r\n    setLoading(value: boolean) {\r\n        this.isLoading = value;\r\n    }\r\n    isRestored = false;\r\n    startMessage = 0;\r\n    canLoad = true;\r\n    chat?: Chat = undefined;\r\n    messages: StickerMessage[] = [];\r\n    insertMessage(message: StickerMessage) {\r\n        this.messages.unshift(message);\r\n    }\r\n    addMessage(message: StickerMessage) {\r\n        this.messages.push(message);\r\n    }\r\n    messageIds = new Map<number, boolean>();\r\n    stickerIds = new Map<string, boolean>();\r\n\r\n    processed: number = 0;\r\n    total: number = 0;\r\n    batch: number = 0;\r\n    setLoadingProgress(processed: number, total: number, batch: number) {\r\n        this.processed = processed;\r\n        this.total = total;\r\n        this.batch = batch;\r\n    }\r\n\r\n    constructor(private rootStore: RootStore, private chatId: number) {\r\n        if (cache.has(chatId)) {\r\n            const values = cache.get(chatId);\r\n            Object.assign(this, values);\r\n            this.isRestored = true;\r\n        }\r\n\r\n        makeAutoObservable(this, {\r\n            chat: observable.ref,\r\n            messages: observable.shallow,\r\n            messageIds: observable.shallow,\r\n            stickerIds: observable.shallow,\r\n            dispose: false,\r\n            handlers: false,\r\n        });\r\n\r\n        rootStore.events.addListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    dispose() {\r\n        this.rootStore.events.removeListener(RootStore.eventName, this.handlers);\r\n    }\r\n\r\n    handlers = new HandlersBuilder()\r\n        .add(UPDATE.updateNewChat, (ctx, next) => {\r\n            if (ctx.update.chat.id === this.chatId) {\r\n                this.load();\r\n            }\r\n\r\n            return next();\r\n        })\r\n        .add(UPDATE.updateNewMessage, (ctx, next) => {\r\n            const message = ctx.update.message;\r\n            if (message.chatId === this.chatId && !this.messageIds.has(message.id)) {\r\n                this.messageIds.set(message.id, true);\r\n\r\n                if (message.content._ === \"messageSticker\" && !this.stickerIds.has(message.content.sticker.setId)) {\r\n                    this.addMessage(message as unknown as StickerMessage);\r\n                    this.stickerIds.set(message.content.sticker.setId, true);\r\n                }\r\n\r\n                this.save();\r\n            }\r\n            return next();\r\n        })\r\n        .build();\r\n\r\n    init() {\r\n        if (this.isRestored) {\r\n            return;\r\n        }\r\n\r\n        return this.load();\r\n    }\r\n\r\n    async load() {\r\n        if (!this.canLoad || this.isLoading) {\r\n            return;\r\n        }\r\n\r\n        this.setLoadingProgress(0, 0, 0);\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            if (!this.chat) {\r\n                const chat = await this.rootStore.Airgram.api.getChat({ chatId: this.chatId });\r\n\r\n                if (chat.response._ === \"chat\") {\r\n                    this.chat = chat.response as Chat;\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            while (true) {\r\n                const history = await this.rootStore.Airgram.api.getChatHistory({\r\n                    chatId: this.chatId,\r\n                    limit,\r\n                    fromMessageId: this.startMessage,\r\n                });\r\n\r\n                if (history.response._ === \"messages\") {\r\n                    const messages = history.response as Messages;\r\n\r\n                    if (messages.totalCount === 0) {\r\n                        this.canLoad = false;\r\n                        break;\r\n                    }\r\n\r\n                    const lastMessage = messages.messages![messages.messages!.length - 1];\r\n                    this.startMessage = lastMessage.id;\r\n\r\n                    const stickerMessages = Array.from(\r\n                        messages\r\n                            .messages!.reduce((acc, message) => {\r\n                                if (\r\n                                    message.content._ === \"messageSticker\" &&\r\n                                    !acc.has(message.content.sticker.setId) &&\r\n                                    !this.stickerIds.has(message.content.sticker.setId)\r\n                                ) {\r\n                                    acc.set(message.content.sticker.setId, message as any);\r\n                                }\r\n                                return acc;\r\n                            }, new Map<string, StickerMessage>())\r\n                            .values()\r\n                    ).filter((x) => !this.messageIds.has(x.id));\r\n\r\n                    for (const message of stickerMessages) {\r\n                        const content = message.content as MessageSticker;\r\n\r\n                        this.messageIds.set(message.id, true);\r\n                        this.stickerIds.set(content.sticker.setId, true);\r\n                        this.insertMessage(message);\r\n                    }\r\n\r\n                    this.setLoadingProgress(\r\n                        this.processed + messages.totalCount,\r\n                        this.total + messages.totalCount,\r\n                        this.batch + 1\r\n                    );\r\n\r\n                    this.save();\r\n\r\n                    if (stickerMessages.length) {\r\n                        return stickerMessages.length;\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.save();\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    save() {\r\n        const { chat, messages, messageIds, stickerIds, startMessage, canLoad } = this;\r\n        cache.set(this.chatId, { chat, messages, messageIds, stickerIds, startMessage, canLoad });\r\n    }\r\n}\r\n","import { FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Text, Loading } from \"@geist-ui/react\";\r\n\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\n\r\ninterface Props {\r\n    store: StickerMessagesStore;\r\n}\r\n\r\nconst Loader: FC<Props> = ({ store }) => {\r\n    return store.isLoading ? (\r\n        <Loading>\r\n            <Text span type=\"secondary\">\r\n                Loading messages ({store.processed}/{store.total} batch: {store.batch})\r\n            </Text>\r\n        </Loading>\r\n    ) : (\r\n        <Text span type=\"secondary\">\r\n            Scroll to start loading\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default observer(Loader);\r\n","import { StickerSet } from \"@airgram/core\";\r\nimport { makeAutoObservable, observable, runInAction } from \"mobx\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nconst cache = new Map<string, StickerSet>();\r\n\r\nexport default class StickerSetStore {\r\n    set?: StickerSet = undefined;\r\n\r\n    constructor(private rootStore: RootStore, private setId: string) {\r\n        makeAutoObservable(this, { set: observable.ref });\r\n    }\r\n\r\n    async load() {\r\n        if (this.set) {\r\n            return;\r\n        }\r\n\r\n        if (cache.has(this.setId)) {\r\n            const set = cache.get(this.setId);\r\n            runInAction(() => {\r\n                this.set = set;\r\n            });\r\n            return;\r\n        }\r\n\r\n        const set = await this.rootStore.Airgram.api.getStickerSet({ setId: this.setId });\r\n\r\n        if (set.response._ === \"stickerSet\") {\r\n            runInAction(() => {\r\n                this.set = set.response as StickerSet;\r\n            });\r\n            cache.set(this.setId, this.set!);\r\n        }\r\n    }\r\n}\r\n","import { useContext } from \"react\";\r\nimport { LinkProps, NavLink } from \"react-router-dom\";\r\nimport { observer, useLocalObservable } from \"mobx-react-lite\";\r\nimport { Grid, Text } from \"@geist-ui/react\";\r\n\r\nimport { StickerMessage } from \"../../store/StickerMessagesStore\";\r\nimport StickerSetStore from \"../../store/StickerSetStore\";\r\n\r\nimport styles from \"./Message.module.css\";\r\n\r\nimport { Sticker, StoreContext } from \"../../components\";\r\nimport { useEffect } from \"react\";\r\n\r\ninterface MessageProps extends Omit<LinkProps, \"to\"> {\r\n    message: StickerMessage;\r\n}\r\n\r\nconst Message = ({ message, ...other }: MessageProps) => {\r\n    const sticker = message.content.sticker;\r\n    const rootStore = useContext(StoreContext);\r\n\r\n    const state = useLocalObservable(() => new StickerSetStore(rootStore, sticker.setId));\r\n\r\n    useEffect(() => {\r\n        state.load();\r\n    }, [state]);\r\n\r\n    return (\r\n        <NavLink className={styles.root} to={`/set/${sticker.setId}`} {...other}>\r\n            <Grid.Container gap={1} direction=\"column\">\r\n                <Grid>\r\n                    <Text b type=\"secondary\">\r\n                        {state.set?.title}\r\n                    </Text>\r\n                </Grid>\r\n                <Grid.Container className={styles.container} alignItems=\"center\">\r\n                    <Sticker sticker={sticker} />\r\n                </Grid.Container>\r\n            </Grid.Container>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default observer(Message);\r\n","import { FC, useContext, useState, useEffect, useRef, useCallback, CSSProperties } from \"react\";\r\nimport { RouteComponentProps, useHistory } from \"react-router\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useVirtual } from \"react-virtual\";\r\n\r\nimport { Button, Grid, Text } from \"@geist-ui/react\";\r\n\r\nimport { CenterLayout, List, StoreContext, Toolbar, UserCard } from \"../../components\";\r\nimport StickerMessagesStore from \"../../store/StickerMessagesStore\";\r\nimport { useFileStore } from \"../../store/FileStore\";\r\n\r\nimport Loader from \"./Loader\";\r\nimport Message from \"./Message\";\r\n\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\n\r\nimport styles from \"./Conversation.module.css\";\r\nimport memoize from \"fast-memoize\";\r\n\r\nconst PLACEHOLDER_HEIGHT = 1000;\r\nconst MESSAGE_HEIGHT = 420;\r\n\r\nlet scrollTop = new Map<number, number>();\r\n\r\nconst createContainerStyle = memoize(\r\n    (totalSize): CSSProperties => ({\r\n        minHeight: \"100%\",\r\n        height: `${totalSize}px`,\r\n        width: \"100%\",\r\n        position: \"relative\",\r\n    })\r\n);\r\n\r\nconst createMessageStyles = memoize(\r\n    (size, start): CSSProperties => ({\r\n        position: \"absolute\",\r\n        top: start,\r\n        left: 0,\r\n        height: size,\r\n        width: \"100%\",\r\n        padding: 32,\r\n        //transform: `translateY(${start}px)`,\r\n    })\r\n);\r\n\r\nexport interface Props extends RouteComponentProps<{ id?: string | undefined }> {}\r\n\r\nconst Conversation: FC<Props> = ({ match }) => {\r\n    const id = match.params.id!;\r\n    const chatId = parseInt(id);\r\n\r\n    const history = useHistory();\r\n\r\n    const rootStore = useContext(StoreContext);\r\n    const { Chats } = rootStore;\r\n    const [store] = useState(() => new StickerMessagesStore(rootStore, chatId));\r\n\r\n    const chat = store.chat;\r\n    const messages = store.messages;\r\n\r\n    const photo = useFileStore(chat?.photo?.small, \"base64\");\r\n\r\n    const parentRef = useRef<HTMLElement>();\r\n\r\n    let size = messages.length;\r\n    if (store.canLoad) {\r\n        size++;\r\n    }\r\n\r\n    const estimateSize = useCallback(\r\n        (index) => (store.canLoad && index === 0 ? PLACEHOLDER_HEIGHT : MESSAGE_HEIGHT),\r\n        [store.canLoad]\r\n    );\r\n\r\n    const { virtualItems, totalSize, scrollToOffset } = useVirtual({\r\n        size,\r\n        parentRef,\r\n        estimateSize,\r\n    });\r\n\r\n    const scrollView = useCallback(\r\n        (count?: number) => {\r\n            if (parentRef.current && count) {\r\n                const offset = MESSAGE_HEIGHT * count;\r\n\r\n                parentRef.current!.scrollTop += offset;\r\n                scrollToOffset(parentRef.current!.scrollTop);\r\n            }\r\n        },\r\n        [scrollToOffset]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (scrollTop.has(chatId)) {\r\n            scrollToOffset(scrollTop.get(chatId) ?? 0);\r\n        } else {\r\n            scrollView(store.messages.length);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (Chats.chats.has(chatId)) {\r\n            (async () => {\r\n                const loaded = await store.init();\r\n                scrollView(loaded);\r\n            })();\r\n        }\r\n\r\n        return () => {\r\n            store.dispose();\r\n        };\r\n    }, [Chats.chats, chatId, scrollView, store]);\r\n\r\n    const tryLoadMessages = useCallback(async () => {\r\n        if (parentRef.current && parentRef.current.scrollTop < PLACEHOLDER_HEIGHT - 200) {\r\n            const loaded = await store.load();\r\n            scrollView(loaded);\r\n        }\r\n    }, [scrollView, store]);\r\n\r\n    useEffect(() => {\r\n        if (!store.canLoad) {\r\n            parentRef.current!.scrollTop -= PLACEHOLDER_HEIGHT;\r\n        }\r\n    }, [store.canLoad]);\r\n\r\n    useEffect(() => {\r\n        tryLoadMessages();\r\n    }, [tryLoadMessages, messages.length]);\r\n\r\n    const handleScroll = useCallback(\r\n        (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n            tryLoadMessages();\r\n            const target = event.target as HTMLDivElement;\r\n            scrollTop.set(chatId, target.scrollTop);\r\n        },\r\n        [chatId, tryLoadMessages]\r\n    );\r\n\r\n    if (!id) {\r\n        return (\r\n            <CenterLayout>\r\n                <Text type=\"secondary\">Please choose a conversation </Text>\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    const style = createContainerStyle(totalSize);\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                {history.length ? (\r\n                    <Grid md={0}>\r\n                        <Button auto type=\"abort\" iconRight={<FiArrowLeft />} onClick={history.goBack} />\r\n                    </Grid>\r\n                ) : (\r\n                    false\r\n                )}\r\n                <Grid xs>\r\n                    <UserCard src={photo} name={chat?.title} />\r\n                </Grid>\r\n            </Toolbar>\r\n            <Grid.Container className={styles.root} direction=\"column\" justify=\"flex-start\">\r\n                <List ref={parentRef as any} onScroll={handleScroll}>\r\n                    <div style={style}>\r\n                        {virtualItems.map(({ index, start, size }) => {\r\n                            let realIndex = index;\r\n                            if (store.canLoad) {\r\n                                realIndex--;\r\n                            }\r\n\r\n                            const style = createMessageStyles(size, start);\r\n\r\n                            if (realIndex < 0)\r\n                                return (\r\n                                    <Grid.Container gap={0} alignItems=\"flex-end\" key={index} style={style}>\r\n                                        <Grid xs justify=\"center\" padding=\"50px\">\r\n                                            <Loader store={store} />\r\n                                        </Grid>\r\n                                    </Grid.Container>\r\n                                );\r\n\r\n                            const message = messages[realIndex];\r\n\r\n                            return <Message key={message.id} style={style} message={message} />;\r\n                        })}\r\n                    </div>\r\n                </List>\r\n            </Grid.Container>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Conversation);\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { observer, useLocalObservable } from \"mobx-react-lite\";\r\nimport { RouteComponentProps, useHistory } from \"react-router\";\r\n\r\nimport { Button, Grid, Text } from \"@geist-ui/react\";\r\nimport { List, Sticker, StoreContext, Toolbar } from \"../../components\";\r\nimport StickerSetStore from \"../../store/StickerSetStore\";\r\n\r\nimport styles from \"./Set.module.css\";\r\n\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\n\r\ninterface Props extends RouteComponentProps<{ id?: string | undefined }> {}\r\n\r\nconst Set: FC<Props> = ({ match }) => {\r\n    const setId = match.params.id!;\r\n\r\n    const history = useHistory();\r\n    const rootStore = useContext(StoreContext);\r\n\r\n    const state = useLocalObservable(() => new StickerSetStore(rootStore, setId));\r\n    const set = state.set;\r\n\r\n    useEffect(() => {\r\n        state.load();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Toolbar>\r\n                {history.length ? (\r\n                    <Grid md={0}>\r\n                        <Button auto type=\"abort\" iconRight={<FiArrowLeft />} onClick={history.goBack} />\r\n                    </Grid>\r\n                ) : (\r\n                    false\r\n                )}\r\n                <Grid xs>\r\n                    <Text h5 margin={0}>\r\n                        {set?.title}\r\n                    </Text>\r\n                </Grid>\r\n            </Toolbar>\r\n            <List className={styles.root}>\r\n                <Grid.Container justify=\"flex-start\">\r\n                    {set?.stickers.map((sticker) => (\r\n                        <Grid key={sticker.sticker.id} xs={24} sm={12} md={12} lg={8} xl={6} justify=\"center\">\r\n                            <Sticker sticker={sticker} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid.Container>\r\n            </List>\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Set);\r\n","import { Switch, Route, Redirect } from \"react-router\";\r\n\r\nimport { Grid, useMediaQuery } from \"@geist-ui/react\";\r\n\r\nimport Menu from \"./Menu/Menu\";\r\nimport Conversation, { Props as ConversationProps } from \"./Conversation/Conversation\";\r\nimport Set from \"./Set/Set\";\r\n\r\nimport styles from \"./Root.module.css\";\r\n\r\nfunction RenderConversation(props: ConversationProps) {\r\n    return <Conversation key={props.match.params.id} {...props} />;\r\n}\r\n\r\nfunction RenderSet(props: ConversationProps) {\r\n    return <Set key={props.match.params.id} {...props} />;\r\n}\r\n\r\nexport default function Root() {\r\n    const isMobile = useMediaQuery(\"sm\", { match: \"down\" });\r\n\r\n    return (\r\n        <Grid.Container gap={0} width=\"100%\" height=\"100%\">\r\n            {isMobile ? (\r\n                <Switch>\r\n                    <Route path=\"/chats\" component={Menu} />\r\n                    <Route path=\"/conversation/:id\" component={RenderConversation} />\r\n                    <Route path=\"/set/:id\" component={RenderSet} />\r\n                    <Redirect to=\"chats\" />\r\n                </Switch>\r\n            ) : (\r\n                <>\r\n                    <Grid className={styles.panel} sm={8} md={6} lg={4} xl={2}>\r\n                        <Menu />\r\n                    </Grid>\r\n                    <Grid className={styles.panel} sm={16} md={18} lg={20} xl={22}>\r\n                        <Switch>\r\n                            <Route path=\"/conversation/:id?\" component={RenderConversation} />\r\n                            <Route path=\"/set/:id\" component={RenderSet} />\r\n                            <Redirect to=\"conversation\" />\r\n                        </Switch>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n}\r\n","import { useContext } from \"react\";\r\n\r\nimport { Grid, Link, Text, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n    const { Theme } = useContext(StoreContext);\r\n\r\n    const isDarktTheme = Theme.currentTheme === \"dark\";\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" gap={0} height=\"50px\" alignItems=\"center\">\r\n            <Spacer w={0.5} />\r\n            <Button\r\n                auto\r\n                type=\"abort\"\r\n                iconRight={isDarktTheme ? <FiMoon /> : <FiSun />}\r\n                onClick={() => Theme.toggleTheme()}\r\n            />\r\n\r\n            <div style={{ flex: 1 }} />\r\n            <Text span>\r\n                Made with{\" \"}\r\n                <Link underline href=\"https://airgram.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Airgram\r\n                </Link>\r\n                ,{\" \"}\r\n                <Link underline href=\"https://react.geist-ui.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Geist UI\r\n                </Link>{\" \"}\r\n                and <FiHeart color=\"red\" />\r\n            </Text>\r\n            <Spacer />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useContext, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { GeistProvider, CssBaseline, Page } from \"@geist-ui/react\";\n\nimport { StoreContext, CssThemeVariables } from \"./components\";\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\nimport Footer from \"./app/Footer\";\n\nfunction App() {\n    const { Theme, Chats } = useContext(StoreContext);\n\n    useEffect(() => {\n        Chats.load();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <GeistProvider themeType={Theme.currentTheme}>\n            <CssThemeVariables />\n            <CssBaseline />\n            <Page render=\"effect-seo\" scale={0.5} width=\"100%\" padding={0}>\n                <Page.Content paddingTop={0}>\n                    <AuthProvider>\n                        <Root />\n                    </AuthProvider>\n                </Page.Content>\n                <Page.Footer>\n                    <Footer />\n                </Page.Footer>\n            </Page>\n        </GeistProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { StoreProvider } from \"./components\";\n\nReactDOM.render(\n    <StoreProvider>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </StoreProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatRow_chat__IbOPK\",\"active_chat\":\"ChatRow_active_chat__2ZRAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Sticker_root__gZJDN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Message_container__L0WXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Root_panel__2Hl4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"List_thumb__2th6t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"UserCard_card__3-Fjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chats_root__31lV_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Conversation_root__1cN7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Set_root__1thkL\"};"],"sourceRoot":""}