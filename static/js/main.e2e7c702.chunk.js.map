{"version":3,"sources":["store/Airgram.ts","utils/blobToBase64.ts","store/AuthorizationStore.ts","store/ChatsStore.ts","store/ConnectionStore.ts","store/ThemeStore.ts","store/RootStore.ts","components/StoreProvider.tsx","components/CenterLayout.tsx","app/SignIn/PhoneNumber.tsx","app/SignIn/Code.tsx","app/SignIn/Password.tsx","app/SignIn/QrCode.tsx","app/SignIn/SignIn.tsx","app/AuthProvider.tsx","app/Menu/User.tsx","app/Menu/Chats.tsx","app/Menu/Menu.tsx","app/Conversation/Conversation.tsx","app/Root.tsx","app/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx","components/CenterLayout.module.css","app/Root.module.css","app/SignIn/QrCode.module.css","app/Menu/Chats.module.css"],"names":["options","apiId","parseInt","process","apiHash","jsLogVerbosityLevel","logVerbosityLevel","prevInstance","undefined","createAirgram","a","api","destroy","newInstance","Airgram","blobToBase64","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onloadend","result","onerror","error","AuthorizationStore","rootStore","state","firstLaunch","user","userPhoto","middleware","ctx","next","_","UPDATE","updateAuthorizationState","context","update","authorizationState","AUTHORIZATION_STATE","authorizationStateWaitPhoneNumber","authorizationStateWaitEncryptionKey","switchToQr","runInAction","makeAutoObservable","this","authorizationStateWaitOtherDeviceConfirmation","requestQrCodeAuthentication","response","reset","resetAirgram","logOut","phoneNumber","setAuthenticationPhoneNumber","code","checkAuthenticationCode","password","checkAuthenticationPassword","getMe","photoId","profilePhoto","small","id","readFilePart","fileId","photo","data","console","log","ChatsStore","updateChatChatList","getChats","chatList","limit","ConnectionStore","CONNECTION_STATE","connectionStateWaitingForNetwork","updateConnectionState","STORAGE_KEY","initColor","window","matchMedia","matches","savedColor","localStorage","getItem","ThemeStore","currentTheme","newTheme","setItem","RootStore","Theme","Authorization","Connection","Chats","use","store","StoreContext","createContext","StoreProvider","children","Provider","value","CenterLayout","className","disablePadding","other","cx","styles","root","padding","PhoneNumber","useContext","useState","lock","setLock","useForm","errors","formState","register","handleSubmit","setError","onSubmit","useCallback","sendPhoneNumber","Container","direction","alignContent","alignItems","h3","margin","autoFocus","disabled","type","required","htmlType","ghost","onClick","observer","control","useController","defaultValue","name","rules","field","onChange","fieldState","sendCode","handleChange","event","target","length","codeInfo","label","sendPassword","Password","placeholder","passwordHint","codeArea","link","includeMargin","renderAs","size","switchToPhoneNumber","authorizationStateWaitCode","authorizationStateWaitPassword","loadingState","authorizationStateWaitTdlibParameters","signInState","includes","scale","useEffect","wrap","xs","src","firstName","lastName","username","style","flex","auto","iconRight","init","justify","height","Conversation","match","params","Root","isMobile","useMediaQuery","query","gap","width","path","component","Menu","to","panel","sm","md","lg","xl","Footer","isDarktTheme","w","toggleTheme","span","underline","href","rel","color","themeType","render","Content","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","basename","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e2e7c702.chunk.js","sourcesContent":["import { Airgram, AirgramConfig } from \"@airgram/web\";\r\n\r\nconst options: AirgramConfig = {\r\n    //useTestDc: true,\r\n    apiId: parseInt(process.env.REACT_APP_APP_ID!),\r\n    apiHash: process.env.REACT_APP_API_HASH,\r\n    jsLogVerbosityLevel: \"info\",\r\n    logVerbosityLevel: 2,\r\n};\r\n\r\nlet prevInstance: Airgram | undefined = undefined;\r\n\r\nexport default async function createAirgram() {\r\n    if (prevInstance) {\r\n        await prevInstance.api.destroy();\r\n    }\r\n\r\n    const newInstance = new Airgram(options);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    prevInstance = newInstance;\r\n\r\n    return newInstance;\r\n}\r\n","export default function blobToBase64(blob: Blob) {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    return new Promise<string>((resolve, reject) => {\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string);\r\n        };\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n","import { AuthorizationStateUnion, FilePart, MiddlewareFn, UpdateAuthorizationState, User } from \"@airgram/core\";\r\nimport { UPDATE, AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { blobToBase64 } from \"../utils\";\r\n\r\nexport default class AuthorizationStore {\r\n    state?: AuthorizationStateUnion = undefined;\r\n    firstLaunch = true;\r\n    user?: User;\r\n    userPhoto?: string;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateAuthorizationState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateAuthorizationState;\r\n\r\n            const state = context.authorizationState;\r\n\r\n            if (\r\n                this.firstLaunch &&\r\n                state._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber &&\r\n                this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey\r\n            ) {\r\n                this.firstLaunch = false;\r\n                this.switchToQr();\r\n                return;\r\n            }\r\n\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        }\r\n\r\n        return next();\r\n    };\r\n\r\n    async switchToQr() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n            return;\r\n        }\r\n\r\n        const result = await this.rootStore.Airgram.api.requestQrCodeAuthentication();\r\n\r\n        if (result.response._ === \"error\") {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async switchToPhoneNumber() {\r\n        if (this.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n    }\r\n\r\n    async reset() {\r\n        this.firstLaunch = false;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    async logOut() {\r\n        await this.rootStore.Airgram.api.logOut();\r\n        this.firstLaunch = true;\r\n        await this.rootStore.resetAirgram();\r\n    }\r\n\r\n    sendPhoneNumber(phoneNumber: string) {\r\n        return this.rootStore.Airgram.api.setAuthenticationPhoneNumber({ phoneNumber });\r\n    }\r\n\r\n    sendCode(code: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationCode({ code });\r\n    }\r\n\r\n    sendPassword(password: string) {\r\n        return this.rootStore.Airgram.api.checkAuthenticationPassword({ password });\r\n    }\r\n\r\n    async getMe() {\r\n        const user = await this.rootStore.Airgram.api.getMe();\r\n\r\n        if (user.response._ === \"error\") {\r\n            throw user.response;\r\n        }\r\n\r\n        runInAction(() => {\r\n            this.user = user.response as User;\r\n        });\r\n\r\n        const photoId = user.response.profilePhoto?.small?.id;\r\n\r\n        if (photoId === undefined) {\r\n            return;\r\n        }\r\n\r\n        const photo = await this.rootStore.Airgram.api.readFilePart({ fileId: photoId });\r\n\r\n        if (photo.response._ === \"filePart\") {\r\n            this.userPhoto = await blobToBase64((photo.response as FilePart).data as unknown as Blob);\r\n            console.log(this.userPhoto);\r\n        }\r\n    }\r\n}\r\n","import { UPDATE } from \"@airgram/constants\";\r\nimport { MiddlewareFn } from \"@airgram/web\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport RootStore from \"./RootStore\";\r\n\r\nexport default class ChatsStore {\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, { middleware: false });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        console.log(ctx);\r\n\r\n        if (ctx._ === UPDATE.updateChatChatList && \"update\" in ctx) {\r\n            //const context = ctx.update as unknown as UpdateAuthorizationState;\r\n        }\r\n\r\n        return next();\r\n    };\r\n\r\n    async init() {\r\n        await this.rootStore.Airgram.api.getChats({ chatList: { _: \"chatListMain\" }, limit: 10 });\r\n    }\r\n}\r\n","import { MiddlewareFn, UpdateConnectionState } from \"@airgram/core\";\r\nimport { UPDATE, CONNECTION_STATE } from \"@airgram/constants\";\r\n\r\nimport RootStore from \"./RootStore\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nexport default class ConnectionStore {\r\n    state: CONNECTION_STATE = CONNECTION_STATE.connectionStateWaitingForNetwork;\r\n\r\n    constructor(private rootStore: RootStore) {\r\n        makeAutoObservable(this, {\r\n            middleware: false,\r\n        });\r\n    }\r\n\r\n    middleware = (): MiddlewareFn => async (ctx, next) => {\r\n        if (ctx._ === UPDATE.updateConnectionState && \"update\" in ctx) {\r\n            const context = ctx.update as unknown as UpdateConnectionState;\r\n            const state = context.state._ as CONNECTION_STATE;\r\n            runInAction(() => {\r\n                this.state = state;\r\n            });\r\n        }\r\n\r\n        return next();\r\n    };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nconst STORAGE_KEY = \"theme\";\r\n\r\ntype ThemeVariants = \"dark\" | \"light\";\r\n\r\nlet initColor: ThemeVariants = \"light\";\r\n\r\nif (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    initColor = \"dark\";\r\n}\r\n\r\nconst savedColor = localStorage.getItem(STORAGE_KEY);\r\n\r\nif (savedColor) {\r\n    initColor = savedColor as ThemeVariants;\r\n}\r\n\r\nexport default class ThemeStore {\r\n    currentTheme = initColor;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const newTheme = this.currentTheme === \"dark\" ? \"light\" : \"dark\";\r\n        this.currentTheme = newTheme;\r\n        localStorage.setItem(STORAGE_KEY, newTheme);\r\n    }\r\n}\r\n","import { Airgram } from \"@airgram/web\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport createAirgram from \"./Airgram\";\r\n\r\nimport AuthorizationStore from \"./AuthorizationStore\";\r\nimport ChatsStore from \"./ChatsStore\";\r\nimport ConnectionStore from \"./ConnectionStore\";\r\nimport ThemeStore from \"./ThemeStore\";\r\n\r\nexport default class RootStore {\r\n    Theme = new ThemeStore();\r\n    Airgram: Airgram = undefined as any;\r\n    Authorization = new AuthorizationStore(this);\r\n    Connection = new ConnectionStore(this);\r\n    Chats = new ChatsStore(this);\r\n    constructor() {\r\n        this.resetAirgram();\r\n        makeAutoObservable(this, { Airgram: false });\r\n    }\r\n\r\n    async resetAirgram() {\r\n        this.Airgram = await createAirgram();\r\n        this.Airgram.use(this.Authorization, this.Connection, this.Chats);\r\n    }\r\n}\r\n","import { createContext, FC } from \"react\";\r\nimport RootStore from \"../store/RootStore\";\r\n\r\nexport const store = new RootStore();\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nconst StoreProvider: FC = ({ children }) => <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\r\n\r\nexport default StoreProvider;\r\n","import { FC, HTMLProps } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CenterLayout.module.css\";\r\n\r\nexport interface CenterLayoutProps extends HTMLProps<HTMLDivElement> {\r\n    disablePadding?: boolean;\r\n}\r\n\r\nconst CenterLayout: FC<CenterLayoutProps> = ({ className, disablePadding, ...other }) => {\r\n    return <div className={cx(styles.root, { [styles.padding]: !disablePadding }, className)} {...other} />;\r\n};\r\n\r\nexport default CenterLayout;\r\n","import { useCallback, useContext, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nconst PhoneNumber = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ phoneNumber }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPhoneNumber(phoneNumber);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"phoneNumber\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Log in to Telegram</Text>\r\n                    <Text margin={0}>by phone number</Text>\r\n                    <Spacer />\r\n                    <Input\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        type={errors.phoneNumber ? \"error\" : undefined}\r\n                        {...register(\"phoneNumber\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button ghost type=\"success\" onClick={() => Authorization.switchToQr()}>\r\n                        Log in by qr code\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default PhoneNumber;\r\n","import { useCallback, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useController, useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitCode } from \"@airgram/web\";\r\n\r\nimport { Grid, Text, Input, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nconst Code = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const { handleSubmit, setError, control } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitCode;\r\n\r\n    const {\r\n        field: { value, onChange },\r\n        fieldState: { error },\r\n    } = useController({ defaultValue: \"\", name: \"code\", rules: { required: true }, control });\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ code }) => {\r\n            try {\r\n                const result = await Authorization.sendCode(code);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"code\", error);\r\n            }\r\n        },\r\n        [Authorization, setError]\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = event.target.value;\r\n            onChange(value);\r\n\r\n            if (value.length === 5) {\r\n                handleSubmit(onSubmit)(event);\r\n            }\r\n        },\r\n        [handleSubmit, onChange, onSubmit]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>{state.codeInfo.phoneNumber}</Text>\r\n                    <Input\r\n                        autoFocus\r\n                        label=\"Code\"\r\n                        type={error ? \"error\" : undefined}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Spacer />\r\n                    <Button htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Code);\r\n","import { useCallback, useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AuthorizationStateWaitPassword } from \"@airgram/web\";\r\n\r\nimport { Button, Grid, Input, Spacer, Text } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nconst Password = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const [lock, setLock] = useState(false);\r\n\r\n    const {\r\n        formState: { errors },\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n    } = useForm();\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitPassword;\r\n\r\n    const onSubmit = useCallback(\r\n        async ({ password }) => {\r\n            if (lock) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                setLock(true);\r\n                const result = await Authorization.sendPassword(password);\r\n                if (result.response._ === \"error\") {\r\n                    throw result.response._;\r\n                }\r\n            } catch (error) {\r\n                setError(\"password\", error);\r\n            } finally {\r\n                setLock(false);\r\n            }\r\n        },\r\n        [Authorization, lock, setError]\r\n    );\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                    <Text h3>Enter Your Password</Text>\r\n                    <Input.Password\r\n                        autoFocus\r\n                        disabled={lock}\r\n                        placeholder={state.passwordHint}\r\n                        type={errors.password ? \"error\" : undefined}\r\n                        {...register(\"password\", { required: true })}\r\n                    />\r\n                    <Spacer />\r\n                    <Button disabled={lock} htmlType=\"submit\" type=\"success\">\r\n                        Next\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button type=\"success\" ghost onClick={() => Authorization.reset()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid.Container>\r\n            </form>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(Password);\r\n","import { useContext } from \"react\";\r\nimport { AuthorizationStateWaitOtherDeviceConfirmation } from \"@airgram/web\";\r\n\r\nimport { Grid, Button, Spinner, Text, Spacer } from \"@geist-ui/react\";\r\nimport RenderQrCode from \"qrcode.react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport styles from \"./QrCode.module.css\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst QrCode = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    const state = Authorization.state as AuthorizationStateWaitOtherDeviceConfirmation;\r\n\r\n    return (\r\n        <CenterLayout>\r\n            <Grid.Container direction=\"column\" alignContent=\"center\" alignItems=\"center\">\r\n                <Text h3>Log in to Telegram</Text>\r\n                <Text margin={0}>by qr code</Text>\r\n                <Spacer />\r\n                <div className={styles.codeArea}>\r\n                    <CenterLayout disablePadding>\r\n                        {state.link ? (\r\n                            <RenderQrCode includeMargin renderAs=\"svg\" value={state.link} size={240} />\r\n                        ) : (\r\n                            <Spinner />\r\n                        )}\r\n                    </CenterLayout>\r\n                </div>\r\n                <Spacer />\r\n                <Button ghost type=\"success\" onClick={() => Authorization.switchToPhoneNumber()}>\r\n                    Log in by phone number\r\n                </Button>\r\n            </Grid.Container>\r\n        </CenterLayout>\r\n    );\r\n};\r\n\r\nexport default observer(QrCode);\r\n","import { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport PhoneNumber from \"./PhoneNumber\";\r\nimport Code from \"./Code\";\r\nimport Password from \"./Password\";\r\nimport QrCode from \"./QrCode\";\r\n\r\nconst SignIn = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber) {\r\n        return <PhoneNumber />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitCode) {\r\n        return <Code />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitPassword) {\r\n        return <Password />;\r\n    }\r\n\r\n    if (Authorization.state?._ === AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation) {\r\n        return <QrCode />;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default observer(SignIn);\r\n","import { useContext, FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { AUTHORIZATION_STATE } from \"@airgram/constants\";\r\n\r\nimport { Spinner } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport CenterLayout from \"../components/CenterLayout\";\r\nimport SignIn from \"./SignIn/SignIn\";\r\n\r\nconst loadingState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitTdlibParameters,\r\n    AUTHORIZATION_STATE.authorizationStateWaitEncryptionKey,\r\n];\r\n\r\nconst signInState: string[] = [\r\n    AUTHORIZATION_STATE.authorizationStateWaitPhoneNumber,\r\n    AUTHORIZATION_STATE.authorizationStateWaitCode,\r\n    AUTHORIZATION_STATE.authorizationStateWaitPassword,\r\n    AUTHORIZATION_STATE.authorizationStateWaitOtherDeviceConfirmation,\r\n];\r\n\r\nconst AuthProvider: FC = ({ children }) => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    if (!Authorization.state || loadingState.includes(Authorization.state._)) {\r\n        return (\r\n            <CenterLayout>\r\n                <Spinner scale={5} />\r\n            </CenterLayout>\r\n        );\r\n    }\r\n\r\n    if (signInState.includes(Authorization.state._)) {\r\n        return <SignIn />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default observer(AuthProvider);\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Grid, User as UserCard, Spinner, Button } from \"@geist-ui/react\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport { FiLogOut } from \"react-icons/fi\";\r\n\r\nconst User: FC = () => {\r\n    const { Authorization } = useContext(StoreContext);\r\n\r\n    useEffect(() => {\r\n        Authorization.getMe();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!Authorization.user) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" alignItems=\"center\" xs>\r\n            <UserCard\r\n                src={Authorization.userPhoto}\r\n                name={`${Authorization.user.firstName} ${Authorization.user.lastName}`}\r\n            >\r\n                {Authorization.user.username}\r\n            </UserCard>\r\n            <div style={{ flex: 1 }} />\r\n            <Button auto type=\"abort\" iconRight={<FiLogOut />} onClick={() => Authorization.logOut()} />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(User);\r\n","import { FC, useContext, useEffect } from \"react\";\r\nimport { Grid } from \"@geist-ui/react\";\r\nimport { StoreContext } from \"../../components/StoreProvider\";\r\n\r\nimport styles from \"./Chats.module.css\";\r\n\r\nconst Chats: FC = () => {\r\n    const { Chats } = useContext(StoreContext);\r\n\r\n    useEffect(() => {\r\n        Chats.init();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Grid.Container className={styles.root} direction=\"column\">\r\n            Chats\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Chats;\r\n","import { Grid } from \"@geist-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FC } from \"react\";\r\n\r\nimport User from \"./User\";\r\nimport Chats from \"./Chats\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <Grid.Container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid.Container height=\"64px\" alignItems=\"center\">\r\n                <User />\r\n            </Grid.Container>\r\n            <Chats />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default observer(Menu);\r\n","import { FC } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\nimport { Text } from \"@geist-ui/react\";\r\n\r\nimport CenterLayout from \"../../components/CenterLayout\";\r\n\r\ninterface Props extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst Conversation: FC<Props> = ({ match }) => {\r\n    const id = match.params.id;\r\n\r\n    if (!id) {\r\n        return (\r\n            <CenterLayout>\r\n                <Text type=\"secondary\">Please choose a conversation </Text>\r\n            </CenterLayout>\r\n        );\r\n    }\r\n    return <>Conversation</>;\r\n};\r\n\r\nexport default Conversation;\r\n","import { Switch, Route, Redirect } from \"react-router\";\r\n\r\nimport { Grid } from \"@geist-ui/react\";\r\n\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nimport Menu from \"./Menu/Menu\";\r\nimport Conversation from \"./Conversation/Conversation\";\r\n\r\nimport styles from \"./Root.module.css\";\r\n\r\nexport default function Root() {\r\n    const isMobile = useMediaQuery({ query: \"(max-width: 650px)\" });\r\n\r\n    return (\r\n        <Grid.Container gap={0} width=\"100%\" height=\"100%\">\r\n            {isMobile ? (\r\n                <Switch>\r\n                    <Route path=\"/chats\" component={Menu} />\r\n                    <Route path=\"/conversation/:id\" component={Conversation} />\r\n                    <Redirect to=\"chats\" />\r\n                </Switch>\r\n            ) : (\r\n                <>\r\n                    <Grid className={styles.panel} sm={8} md={6} lg={4} xl={2}>\r\n                        <Menu />\r\n                    </Grid>\r\n                    <Grid className={styles.panel} sm={16} md={18} lg={20} xl={22}>\r\n                        <Switch>\r\n                            <Route path=\"/conversation/:id?\" component={Conversation} />\r\n                            <Redirect to=\"conversation\" />\r\n                        </Switch>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid.Container>\r\n    );\r\n}\r\n","import { useContext } from \"react\";\r\n\r\nimport { Grid, Link, Text, Spacer, Button } from \"@geist-ui/react\";\r\n\r\nimport { StoreContext } from \"../components/StoreProvider\";\r\n\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n    const { Theme } = useContext(StoreContext);\r\n\r\n    const isDarktTheme = Theme.currentTheme === \"dark\";\r\n\r\n    return (\r\n        <Grid.Container wrap=\"nowrap\" gap={0} height=\"50px\" alignItems=\"center\">\r\n            <Spacer w={0.5} />\r\n            <Button\r\n                auto\r\n                type=\"abort\"\r\n                iconRight={isDarktTheme ? <FiMoon /> : <FiSun />}\r\n                onClick={() => Theme.toggleTheme()}\r\n            />\r\n\r\n            <div style={{ flex: 1 }} />\r\n            <Text span>\r\n                Made with{\" \"}\r\n                <Link underline href=\"https://airgram.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Airgram\r\n                </Link>\r\n                ,{\" \"}\r\n                <Link underline href=\"https://react.geist-ui.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    Geist UI\r\n                </Link>{\" \"}\r\n                and <FiHeart color=\"red\" />\r\n            </Text>\r\n            <Spacer />\r\n        </Grid.Container>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { GeistProvider, CssBaseline, Page } from \"@geist-ui/react\";\n\nimport { StoreContext } from \"./components/StoreProvider\";\n\nimport AuthProvider from \"./app/AuthProvider\";\nimport Root from \"./app/Root\";\nimport Footer from \"./app/Footer\";\n\nfunction App() {\n    const { Theme } = useContext(StoreContext);\n\n    return (\n        <GeistProvider themeType={Theme.currentTheme}>\n            <CssBaseline />\n            <Page render=\"effect-seo\" scale={0.5} width=\"100%\" padding={0}>\n                <Page.Content paddingTop={0}>\n                    <AuthProvider>\n                        <Root />\n                    </AuthProvider>\n                </Page.Content>\n                <Page.Footer>\n                    <Footer />\n                </Page.Footer>\n            </Page>\n        </GeistProvider>\n    );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport \"inter-ui/inter.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport StoreProvider from \"./components/StoreProvider\";\n\nReactDOM.render(\n    <StrictMode>\n        <StoreProvider>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <App />\n            </BrowserRouter>\n        </StoreProvider>\n    </StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CenterLayout_root__L4_bA\",\"padding\":\"CenterLayout_padding__3SYoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Root_panel__2Hl4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeArea\":\"QrCode_codeArea__1c03P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chats_root__31lV_\"};"],"sourceRoot":""}